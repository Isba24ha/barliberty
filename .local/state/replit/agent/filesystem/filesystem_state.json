{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Bar Management System\n\n## Overview\n\nThis is a full-stack bar management application designed to streamline operations for bars, supporting multiple user roles (cashier, server, manager) with role-based permissions. It comprehensively manages inventory, sales, tables, and customer credit, aiming to enhance efficiency and provide real-time insights into bar operations. The project ambition is to deliver a robust, user-friendly system for optimized bar management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nInterface language: French labels and messages preferred for UI elements.\nSession management: Sessions should remain open until manually closed (no automatic time limits).\nPrinter support: EPSON thermal printer integration for receipt printing required.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript, Vite\n- **UI/Styling**: Shadcn/UI (Radix UI primitives), Tailwind CSS\n- **State Management**: Zustand, TanStack Query\n- **Routing**: Wouter\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js (TypeScript, ESM)\n- **Database**: PostgreSQL (Neon serverless driver)\n- **ORM**: Drizzle ORM\n- **Session Management**: Express sessions with PostgreSQL storage\n- **Authentication**: Custom role-based authentication\n\n### Database Design\n- **Primary Database**: PostgreSQL (Neon serverless)\n- **Schema Management**: Drizzle Kit\n- **Key Tables**: `users`, `bar_sessions`, `tables`, `products`, `orders`, `payments`, `credit_clients`\n- **Relationships**: Normalized with foreign key constraints\n- **Enums**: Role-based permissions, order statuses, payment methods\n\n### Key Features\n- **Authentication & Authorization**: Three distinct user roles (Cashier, Server, Manager) with role-based access control and persistent sessions.\n- **Session Management**: Handling of morning/evening shifts and manual session closure.\n- **Order Management**: Full order lifecycle, including item addition, quantity handling, and payment processing.\n- **Credit System**: Customer credit accounts with payment tracking.\n- **Table Management**: Real-time table status updates (free, pending order, occupied) with location-based grouping.\n- **Inventory Control**: Product and stock management with CRUD operations, image upload support, stock level monitoring (min/max), and category management.\n- **Real-time Features**: Polling-based updates for orders, tables, and sessions; live dashboard with real-time statistics.\n- **Manager Dashboard**: Comprehensive analytics (sales by shift, top products, session history), user management, inventory management, and export functionality.\n- **Thermal Printer Integration**: Support for EPSON thermal printers via Web Serial API for receipt printing.\n\n### System Design Choices\n- **Monorepo Structure**: Shared TypeScript types and schemas for end-to-end type safety.\n- **Performance Optimization**: User caching system for rapid authentication, optimized database connection pooling.\n- **Security**: Robust session management with IP tracking, activity monitoring, and environment-based CORS configuration.\n- **UI/UX**: Consistent iconography (Lucide React), accessibility (Radix UI), and responsive design.\n\n## External Dependencies\n\n### Frontend Dependencies\n- **UI Components**: Radix UI\n- **Icons**: Lucide React\n- **Date Handling**: `date-fns`\n- **Styling Utilities**: `clsx`, `tailwind-merge`\n- **Validation**: Zod\n\n### Backend Dependencies\n- **Database Driver**: `@neondatabase/serverless`\n- **ORM**: `drizzle-orm`\n- **Session Storage**: `connect-pg-simple`\n\n### Development Tools\n- **Replit Integration**: Replit-specific plugins\n- **Error Handling**: Runtime error overlay\n- **Code Execution**: `tsx` (TypeScript execution), `esbuild` (production builds)","size_bytes":3839},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// Configure websocket for serverless environment\nif (typeof window === 'undefined') {\n  neonConfig.webSocketConstructor = ws;\n}\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  max: 15, // Optimized connection pool size\n  min: 3, // Minimum connections to maintain\n  connectionTimeoutMillis: 8000, // Connection timeout\n  idleTimeoutMillis: 60000, // Idle timeout (1 minute)\n  acquireTimeoutMillis: 3000, // Timeout for acquiring connection\n  allowExitOnIdle: false, // Keep connections alive\n  application_name: 'liberty-bar-management'\n});\n\nexport const db = drizzle({ client: pool, schema });\n\n// Database connection monitoring\npool.on('connect', () => {\n  console.log('Database connection established');\n});\n\npool.on('error', (err) => {\n  console.error('Database connection error:', err);\n});\n\npool.on('remove', () => {\n  console.log('Database connection removed from pool');\n});","size_bytes":1229},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport cors from \"cors\";\nimport crypto from \"crypto\";\nimport cookieParser from \"cookie-parser\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { pool } from \"./db\";\nimport ConnectPgSimple from \"connect-pg-simple\";\n\nconst app = express();\n\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// HTTPS redirect middleware for production\nif (isProduction) {\n  app.use((req, res, next) => {\n    if (req.header('x-forwarded-proto') !== 'https') {\n      return res.redirect(`https://${req.header('host')}${req.url}`);\n    }\n    next();\n  });\n}\n\n// CORS configuration for cross-origin requests\nconst corsOptions = {\n  origin: function (origin: string | undefined, callback: (error: Error | null, allow?: boolean) => void) {\n    // Allow requests with no origin (like mobile apps or curl requests)\n    if (!origin) return callback(null, true);\n    \n    // Define allowed origins based on environment\n    const allowedOrigins = isProduction \n      ? [\n          process.env.FRONTEND_URL,\n          process.env.REPLIT_DOMAIN ? `https://${process.env.REPLIT_DOMAIN}` : null,\n          'https://liberty-bar-management.replit.app',\n          // Add your custom domain here when deployed\n        ].filter(Boolean) // Remove null values\n      : [\n          'http://localhost:5000',\n          'http://localhost:3000',\n          'http://127.0.0.1:5000',\n          'http://127.0.0.1:3000',\n          // Add the current Replit preview URL\n          /https:\\/\\/.*\\.replit\\.dev$/,\n          /https:\\/\\/.*\\.replit\\.app$/\n        ];\n    \n    // Check if origin matches any allowed origin or pattern\n    const isAllowed = allowedOrigins.some(allowedOrigin => {\n      if (typeof allowedOrigin === 'string') {\n        return origin === allowedOrigin;\n      } else if (allowedOrigin instanceof RegExp) {\n        return allowedOrigin.test(origin);\n      }\n      return false;\n    });\n    \n    if (isAllowed) {\n      callback(null, true);\n    } else {\n      // In development, be more permissive\n      if (!isProduction) {\n        console.log('CORS: Allowing origin in development:', origin);\n        callback(null, true);\n      } else {\n        console.log('CORS: Blocking origin:', origin);\n        callback(new Error('Not allowed by CORS'));\n      }\n    }\n  },\n  credentials: true, // Allow cookies to be sent\n  optionsSuccessStatus: 200,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']\n};\n\napp.use(cors(corsOptions));\n\n// Check database connection before starting\nasync function checkDatabaseConnection() {\n  try {\n    const client = await pool.connect();\n    await client.query('SELECT NOW()');\n    client.release();\n    log('Database connection verified');\n    return true;\n  } catch (error) {\n    console.error('Database connection failed:', error);\n    return false;\n  }\n}\n\n// Log environment variables for production debugging\nif (process.env.NODE_ENV === 'production') {\n  log(`Environment variables check:`);\n  log(`FRONTEND_URL: ${process.env.FRONTEND_URL || 'NOT SET'}`);\n  log(`REPLIT_DOMAIN: ${process.env.REPLIT_DOMAIN || 'NOT SET'}`);\n  log(`DATABASE_URL: ${process.env.DATABASE_URL ? 'SET' : 'NOT SET'}`);\n  log(`SESSION_SECRET: ${process.env.SESSION_SECRET ? 'SET' : 'NOT SET'}`);\n}\n\n// Enhanced middleware configuration\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\napp.use(cookieParser()); // Add cookie parser middleware\n\n// Security headers\napp.use((req, res, next) => {\n  res.set({\n    'Cache-Control': 'no-store',\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protection': '1; mode=block'\n  });\n  next();\n});\n\n// Configure session with simplified settings for debugging\nconst PgSession = ConnectPgSimple(session);\n\nconst sessionConfig = {\n  store: new PgSession({\n    pool: pool,\n    tableName: 'sessions',\n    createTableIfMissing: true,\n    pruneSessionInterval: 60 * 15, // Clean up sessions every 15 minutes\n    errorLog: (error: any) => {\n      console.error('Session store error:', error);\n    }\n  }),\n  secret: process.env.SESSION_SECRET || \"liberty-bar-management-secret-key-2025\",\n  resave: false,\n  saveUninitialized: false,\n  rolling: true, // Reset expiration on activity\n  name: 'liberty.session', // Use custom session name\n  cookie: {\n    secure: false, // Set to false for development\n    httpOnly: false, // Set to false for debugging cookie issues\n    maxAge: 8 * 60 * 60 * 1000, // 8 hours to match client session\n    sameSite: 'lax', // Back to 'lax' for same-origin requests\n    path: '/' // Ensure cookie is available for all paths\n  }\n};\n\napp.use(session(sessionConfig));\n\n// Session debugging middleware (can be removed in production)\nif (process.env.NODE_ENV === 'development') {\n  app.use((req, res, next) => {\n    if (req.path.startsWith('/api') && req.path !== '/api/auth/user') {\n      console.log(`[Session] ${req.method} ${req.path} - User: ${req.session?.user?.id || 'Anonymous'}`);\n    }\n    next();\n  });\n}\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Enhanced error handling middleware\napp.use((err: any, req: Request, res: Response, next: NextFunction) => {\n  console.error('Unhandled error:', err);\n  \n  if (err.code === 'ECONNREFUSED') {\n    return res.status(503).json({ \n      message: 'Database connection failed',\n      error: 'Service temporarily unavailable'\n    });\n  }\n  \n  if (err.name === 'ValidationError') {\n    return res.status(400).json({ \n      message: 'Validation failed',\n      error: err.message\n    });\n  }\n  \n  res.status(500).json({ \n    message: 'Internal server error',\n    error: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'\n  });\n});\n\n// Graceful shutdown handling\nconst shutdown = async (signal: string) => {\n  log(`${signal} received, shutting down gracefully`);\n  \n  try {\n    await pool.end();\n    log('Database pool closed');\n    process.exit(0);\n  } catch (error) {\n    console.error('Error during shutdown:', error);\n    process.exit(1);\n  }\n};\n\nprocess.on('SIGTERM', () => shutdown('SIGTERM'));\nprocess.on('SIGINT', () => shutdown('SIGINT'));\n\n// Server startup\n(async () => {\n  try {\n    // Verify database connection before starting server\n    const dbConnected = await checkDatabaseConnection();\n    if (!dbConnected) {\n      log('Failed to connect to database, retrying in 5 seconds...');\n      setTimeout(() => process.exit(1), 5000);\n      return;\n    }\n\n    const server = await registerRoutes(app);\n\n    // Setup development or production serving\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    // ALWAYS serve the app on port 5000\n    const port = 5000;\n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, () => {\n      log(`🚀 LIBERTY Bar Management System serving on port ${port}`);\n      log(`📊 Database: Connected and ready`);\n      log(`🔐 Session store: PostgreSQL`);\n      log(`🌐 Environment: ${app.get(\"env\")}`);\n    });\n\n  } catch (error) {\n    log(`Failed to start server: ${error}`);\n    process.exit(1);\n  }\n})();\n","size_bytes":8045},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { z } from \"zod\";\nimport {\n  insertBarSessionSchema,\n  insertTableSchema,\n  insertProductSchema,\n  insertCategorySchema,\n  insertCreditClientSchema,\n  insertOrderSchema,\n  insertOrderItemSchema,\n  insertPaymentSchema,\n  insertAbsenceSchema,\n  products, \n  orders, \n  orderItems, \n  categories, \n  tables, \n  payments, \n  barSessions, \n  users, \n  creditClients, \n  absences\n} from \"@shared/schema\";\nimport { and, eq, gte, lt, sql, sum, count, desc, asc } from \"drizzle-orm\";\n\n// Enhanced auth middleware for production\nconst requireAuth = (req: any, res: any, next: any) => {\n  try {\n    const session = req.session as any;\n    console.log(`[DEBUG AUTH] Route: ${req.method} ${req.path}`);\n    console.log(`[DEBUG AUTH] Session ID: ${session?.id || 'No session ID'}`);\n    console.log(`[DEBUG AUTH] Session data:`, session ? Object.keys(session) : 'No session');\n    console.log(`[DEBUG AUTH] Session user:`, session?.user);\n    \n    // Check if session exists and has user data\n    if (!session || !session.user) {\n      console.log(`[DEBUG AUTH] Auth failed - no session or user. Session: ${!!session}, User: ${!!session?.user}`);\n      return res.status(401).json({ \n        message: \"Não autorizado\",\n        details: \"Sessão inválida ou expirada\" \n      });\n    }\n\n    // Validate user data integrity\n    if (!session.user.id || !session.user.role) {\n      console.log(`[DEBUG AUTH] Auth failed - invalid user data. ID: ${session.user.id}, Role: ${session.user.role}`);\n      return res.status(401).json({ \n        message: \"Não autorizado\",\n        details: \"Dados de usuário inválidos\" \n      });\n    }\n\n    // Update last activity for session tracking\n    session.lastActivity = new Date().toISOString();\n    \n    // Attach user to request object\n    req.user = session.user;\n    console.log(`[DEBUG AUTH] Auth successful for user: ${req.user.id}, role: ${req.user.role}`);\n    \n    next();\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    return res.status(500).json({ \n      message: \"Erro de autenticação\",\n      details: process.env.NODE_ENV === 'development' ? error.message : \"Erro interno\" \n    });\n  }\n};\n\nconst requireRole = (roles: string[]) => (req: any, res: any, next: any) => {\n  if (!req.user || !roles.includes(req.user.role)) {\n    return res.status(403).json({ message: \"Acesso negado\" });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Cache user data for faster authentication\n  const userCache = new Map();\n  \n  // Preload user data into cache at startup\n  const preloadUserCache = async () => {\n    try {\n      const userIds = ['rafa', 'filinto', 'junior', 'server-001', 'jose.barros', 'milisiana', 'cashier-001', 'lucelle', 'carlmalack', 'manager', 'manager-001'];\n      const users = await Promise.all(userIds.map(id => storage.getUser(id)));\n      \n      users.forEach(user => {\n        if (user) {\n          userCache.set(user.id, user);\n        }\n      });\n      \n      console.log(`Preloaded ${userCache.size} users into cache`);\n    } catch (error) {\n      console.error('Error preloading user cache:', error);\n    }\n  };\n  \n  // Initialize cache\n  preloadUserCache();\n\n  // Enhanced login route with improved security and error handling\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password, role } = req.body;\n      \n      // Input validation\n      if (!username || !password || !role) {\n        return res.status(400).json({ \n          message: \"Dados incompletos\", \n          details: \"Username, password e role são obrigatórios\" \n        });\n      }\n\n      // Sanitize inputs\n      const sanitizedUsername = username.trim().toLowerCase();\n      const sanitizedRole = role.trim().toLowerCase();\n      \n      // Define user credentials with enhanced security\n      const userCredentials = new Map([\n        // Servers\n        ['rafa', { password: 'Liberty@25%', role: 'server', active: true }],\n        ['filinto', { password: 'Liberty@25%', role: 'server', active: true }],\n        ['junior', { password: 'Liberty@25%', role: 'server', active: true }],\n        ['server-001', { password: 'Liberty@25%', role: 'server', active: true }],\n        // Cashiers\n        ['jose.barros', { password: 'Liberty@25%', role: 'cashier', active: true }],\n        ['milisiana', { password: 'Liberty@25%', role: 'cashier', active: true }],\n        ['cashier-001', { password: 'Liberty@25%', role: 'cashier', active: true }],\n        // Managers\n        ['lucelle', { password: 'Bissau@25%', role: 'manager', active: true }],\n        ['carlmalack', { password: 'Bissau@25%', role: 'manager', active: true }],\n        ['manager', { password: 'Liberty@25%', role: 'manager', active: true }],\n        ['manager-001', { password: 'Liberty@25%', role: 'manager', active: true }],\n      ]);\n      \n      // Enhanced credential validation\n      const userCreds = userCredentials.get(sanitizedUsername);\n      \n      if (!userCreds || userCreds.password !== password || userCreds.role !== sanitizedRole) {\n        return res.status(401).json({ \n          message: \"Credenciais inválidas\", \n          details: \"Usuário, senha ou role incorretos\" \n        });\n      }\n      \n      if (!userCreds.active) {\n        return res.status(403).json({ \n          message: \"Conta desativada\", \n          details: \"Contacte o administrador\" \n        });\n      }\n      \n      // Get user from cache first, fallback to database\n      let user = userCache.get(sanitizedUsername);\n      if (!user) {\n        user = await storage.getUser(sanitizedUsername);\n        if (user) {\n          userCache.set(sanitizedUsername, user);\n        }\n      }\n      \n      if (!user) {\n        return res.status(401).json({ \n          message: \"Usuário não encontrado\", \n          details: \"Dados do usuário não disponíveis\" \n        });\n      }\n      \n      // Check if user is active in database\n      if (!user.isActive) {\n        return res.status(403).json({ \n          message: \"Conta desativada\", \n          details: \"Usuário inativo no sistema\" \n        });\n      }\n      \n      // Store user in session with enhanced security\n      if (!req.session) {\n        return res.status(500).json({ \n          message: \"Erro de sessão\", \n          details: \"Sessão não disponível\" \n        });\n      }\n      \n      (req.session as any).user = user;\n      (req.session as any).loginTime = new Date().toISOString();\n      (req.session as any).expiresAt = new Date(Date.now() + 8 * 60 * 60 * 1000).toISOString();\n      (req.session as any).lastActivity = new Date().toISOString();\n      (req.session as any).ipAddress = req.ip;\n      (req.session as any).userAgent = req.get('User-Agent') || 'unknown';\n      \n      // Save session explicitly to ensure persistence BEFORE sending response\n      await new Promise<void>((resolve, reject) => {\n        req.session.save((err) => {\n          if (err) {\n            console.error('Session save error:', err);\n            reject(new Error('Falha ao salvar sessão'));\n          } else {\n            console.log('Session saved successfully for user:', user.id);\n            resolve();\n          }\n        });\n      });\n      \n      // Log successful login\n      console.log(`Login successful: ${user.firstName} ${user.lastName} (${user.role}) at ${new Date().toISOString()}`);\n      \n      // Return enhanced user data ONLY after session is saved\n      return res.json({\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          isActive: user.isActive,\n          profileImageUrl: user.profileImageUrl\n        },\n        session: {\n          loginTime: (req.session as any).loginTime,\n          expiresAt: (req.session as any).expiresAt || new Date(Date.now() + 8 * 60 * 60 * 1000).toISOString()\n        },\n        message: \"Login realizado com sucesso\"\n      });\n      \n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ \n        message: \"Erro interno do servidor\", \n        details: process.env.NODE_ENV === 'development' ? error.message : \"Tente novamente mais tarde\" \n      });\n    }\n  });\n\n  app.get(\"/api/auth/user\", requireAuth, async (req: any, res) => {\n    try {\n      // Return comprehensive user data from session\n      const user = req.user;\n      \n      // Validate user data before returning\n      if (!user || !user.id || !user.role) {\n        return res.status(401).json({ \n          message: \"Não autorizado\",\n          details: \"Dados de usuário inválidos\" \n        });\n      }\n\n      // Return user data for authenticated users\n      res.json({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        isActive: user.isActive,\n        profileImageUrl: user.profileImageUrl,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ \n        message: \"Erro ao buscar usuário\",\n        details: process.env.NODE_ENV === 'development' ? error.message : \"Erro interno\" \n      });\n    }\n  });\n\n  // Helper endpoint to get dashboard redirect path based on user role\n  app.get(\"/api/auth/redirect\", requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      \n      if (!user || !user.role) {\n        return res.status(401).json({ \n          message: \"Não autorizado\",\n          details: \"Dados de usuário inválidos\" \n        });\n      }\n\n      let dashboardPath = \"/dashboard\";\n      let type = \"operational\";\n\n      if (user.role === \"manager\") {\n        dashboardPath = \"/manager\";\n        type = \"management\";\n      } else if (user.role === \"cashier\" || user.role === \"server\") {\n        dashboardPath = \"/dashboard\";\n        type = \"operational\";\n      }\n\n      res.json({\n        dashboardPath,\n        type,\n        userRole: user.role\n      });\n    } catch (error) {\n      console.error('Get redirect error:', error);\n      res.status(500).json({ \n        message: \"Erro interno do servidor\",\n        details: process.env.NODE_ENV === 'development' ? error.message : \"Tente novamente mais tarde\"\n      });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    try {\n      req.session.destroy((err) => {\n        if (err) {\n          console.error('Logout error:', err);\n          return res.status(500).json({ message: \"Erro ao fazer logout\" });\n        }\n        res.clearCookie('liberty.session');\n        res.json({ message: \"Logout realizado com sucesso\" });\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n      res.status(500).json({ message: \"Erro ao fazer logout\" });\n    }\n  });\n\n  app.get(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Erro ao fazer logout\" });\n      }\n      res.clearCookie('liberty.session');\n      res.redirect('/login');\n    });\n  });\n\n  // Session test route to verify session persistence\n  app.get(\"/api/auth/session-test\", (req, res) => {\n    try {\n      const session = req.session as any;\n      const sessionInfo = {\n        hasSession: !!session,\n        sessionId: session?.id || null,\n        user: session?.user || null,\n        loginTime: session?.loginTime || null,\n        cookie: {\n          secure: session?.cookie?.secure || false,\n          httpOnly: session?.cookie?.httpOnly || false,\n          maxAge: session?.cookie?.maxAge || null,\n          sameSite: session?.cookie?.sameSite || null,\n          domain: session?.cookie?.domain || null\n        },\n        timestamp: new Date().toISOString()\n      };\n      \n      res.json({\n        message: \"Session test successful\",\n        sessionInfo,\n        authenticated: !!session?.user\n      });\n    } catch (error) {\n      console.error(\"Session test error:\", error);\n      res.status(500).json({ \n        message: \"Session test failed\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  // Session routes\n  app.get(\"/api/sessions/active\", requireAuth, async (req: any, res) => {\n    try {\n      const session = await storage.getActiveSession(req.user.id);\n      res.json(session);\n    } catch (error) {\n      console.error(\"Error fetching active session:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération de la session\" });\n    }\n  });\n\n  app.post(\"/api/sessions\", requireAuth, requireRole([\"cashier\"]), async (req: any, res) => {\n    try {\n      const sessionData = insertBarSessionSchema.parse({\n        ...req.body,\n        userId: req.user.id,\n      });\n      const session = await storage.createSession(sessionData);\n      res.json(session);\n    } catch (error) {\n      console.error(\"Error creating session:\", error);\n      res.status(500).json({ message: \"Erreur lors de la création de la session\" });\n    }\n  });\n\n  app.post(\"/api/sessions/:id/end\", requireAuth, requireRole([\"cashier\"]), async (req: any, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      await storage.endSession(sessionId);\n      res.json({ message: \"Session fermée avec succès\" });\n    } catch (error) {\n      console.error(\"Error ending session:\", error);\n      res.status(500).json({ message: \"Erreur lors de la fermeture de la session\" });\n    }\n  });\n\n  app.get(\"/api/sessions/:id/stats\", requireAuth, async (req: any, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      const stats = await storage.getSessionStats(sessionId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching session stats:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des statistiques\" });\n    }\n  });\n\n  // Table routes\n  app.get(\"/api/tables\", requireAuth, async (req, res) => {\n    try {\n      const tables = await storage.getAllTables();\n      res.json(tables);\n    } catch (error) {\n      console.error(\"Error fetching tables:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des tables\" });\n    }\n  });\n\n  app.post(\"/api/tables\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const tableData = insertTableSchema.parse(req.body);\n      const table = await storage.createTable(tableData);\n      res.json(table);\n    } catch (error) {\n      console.error(\"Error creating table:\", error);\n      res.status(500).json({ message: \"Erreur lors de la création de la table\" });\n    }\n  });\n\n  app.put(\"/api/tables/:id/status\", requireAuth, async (req: any, res) => {\n    try {\n      const tableId = parseInt(req.params.id);\n      const { status, orderId } = req.body;\n      await storage.updateTableStatus(tableId, status, orderId);\n      res.json({ message: \"Statut de la table mis à jour\" });\n    } catch (error) {\n      console.error(\"Error updating table status:\", error);\n      res.status(500).json({ message: \"Erreur lors de la mise à jour du statut de la table\" });\n    }\n  });\n\n  // Product routes\n  app.get(\"/api/products\", requireAuth, async (req, res) => {\n    try {\n      // Disable cache for product data to ensure fresh data after mutations\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0',\n        'ETag': Date.now().toString()\n      });\n      \n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des produits\" });\n    }\n  });\n\n  app.post(\"/api/products\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Erreur lors de la création du produit\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const productId = parseInt(id);\n      \n      if (isNaN(productId)) {\n        return res.status(400).json({ message: \"ID de produit invalide\" });\n      }\n\n      const productData = insertProductSchema.partial().parse(req.body);\n      await storage.updateProduct(productId, productData);\n      \n      const updatedProduct = await storage.getProduct(productId);\n      res.json(updatedProduct);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Erreur lors de la mise à jour du produit\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const productId = parseInt(id);\n      \n      if (isNaN(productId)) {\n        return res.status(400).json({ message: \"ID de produit invalide\" });\n      }\n\n      // Soft delete: set isActive to false instead of hard delete\n      await storage.updateProduct(productId, { isActive: false });\n      \n      res.json({ message: \"Produit supprimé avec succès\", id: productId });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Erreur lors de la suppression du produit\" });\n    }\n  });\n\n  // Category routes\n  app.get(\"/api/categories\", requireAuth, async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des catégories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Erreur lors de la création de la catégorie\" });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const categoryId = parseInt(id);\n      \n      if (isNaN(categoryId)) {\n        return res.status(400).json({ message: \"ID de catégorie invalide\" });\n      }\n\n      const categoryData = insertCategorySchema.partial().parse(req.body);\n      await storage.updateCategory(categoryId, categoryData);\n      \n      const updatedCategory = await storage.getCategory(categoryId);\n      res.json(updatedCategory);\n    } catch (error) {\n      console.error(\"Error updating category:\", error);\n      res.status(500).json({ message: \"Erreur lors de la mise à jour de la catégorie\" });\n    }\n  });\n\n  // Credit client routes\n  app.get(\"/api/credit-clients\", requireAuth, async (req, res) => {\n    try {\n      const clients = await storage.getAllCreditClients();\n      res.json(clients);\n    } catch (error) {\n      console.error(\"Error fetching credit clients:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des clients à crédit\" });\n    }\n  });\n\n  app.post(\"/api/credit-clients\", requireAuth, requireRole([\"cashier\", \"server\"]), async (req, res) => {\n    try {\n      console.log(\"Creating credit client with data:\", req.body);\n      \n      // Ensure proper data structure\n      const clientData = {\n        name: req.body.name,\n        phone: req.body.phone,\n        email: req.body.email || null,\n        address: req.body.address || null,\n        notes: req.body.notes || null,\n        totalCredit: \"0.00\",\n        isActive: true,\n      };\n      \n      console.log(\"Processed client data:\", clientData);\n      \n      const client = await storage.createCreditClient(clientData);\n      console.log(\"Client created successfully:\", client);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error creating credit client:\", error);\n      console.error(\"Error details:\", error.message);\n      res.status(500).json({ \n        message: \"Erreur lors de la création du client à crédit\",\n        details: error.message \n      });\n    }\n  });\n\n  // Order routes\n  app.get(\"/api/orders\", requireAuth, async (req, res) => {\n    try {\n      const { status, date, limit, offset } = req.query;\n      \n      // Parse pagination parameters\n      const limitNum = limit ? parseInt(limit as string) : 50; // Default limit of 50\n      const offsetNum = offset ? parseInt(offset as string) : 0;\n      \n      if (status === \"completed\" && date) {\n        // Filter completed orders by date - use original method for now\n        const orders = await storage.getAllOrders();\n        const filterDate = new Date(date as string);\n        const nextDate = new Date(filterDate);\n        nextDate.setDate(nextDate.getDate() + 1);\n        \n        const filteredOrders = orders.filter(order => {\n          const orderDate = new Date(order.createdAt);\n          return order.status === \"completed\" && \n                 orderDate >= filterDate && \n                 orderDate < nextDate;\n        });\n        \n        res.json(filteredOrders);\n      } else {\n        // Use pagination for regular requests\n        const orders = await storage.getAllOrders(limitNum, offsetNum);\n        res.json(orders);\n      }\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des commandes\" });\n    }\n  });\n\n  app.get(\"/api/orders/pending\", requireAuth, async (req, res) => {\n    try {\n      const orders = await storage.getPendingOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching pending orders:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des commandes en attente\" });\n    }\n  });\n\n  app.post(\"/api/orders\", requireAuth, requireRole([\"server\", \"cashier\"]), async (req: any, res) => {\n    try {\n      const { items, ...orderData } = req.body;\n      \n      // Get active session - check for any active session, not just user's own\n      let activeSession = await storage.getActiveSession(req.user.id);\n      \n      // If no personal session, look for any active session in the system\n      if (!activeSession) {\n        activeSession = await storage.getAnyActiveSession();\n      }\n      \n      // If still no session and user is cashier, create one automatically\n      if (!activeSession && req.user.role === \"cashier\") {\n        activeSession = await storage.createSession({\n          userId: req.user.id,\n          shiftType: new Date().getHours() < 14 ? \"morning\" : \"evening\",\n        });\n      }\n      \n      if (!activeSession) {\n        return res.status(400).json({ message: \"Nenhuma sessão ativa encontrada. Um caixa deve iniciar uma sessão primeiro.\" });\n      }\n\n      const order = await storage.createOrder({\n        ...orderData,\n        serverId: req.user.id,\n        sessionId: activeSession.id,\n      });\n\n      // Add items to the order\n      for (const item of items) {\n        // Get product to retrieve price\n        const product = await storage.getProduct(item.productId);\n        if (!product) {\n          throw new Error(`Product with ID ${item.productId} not found`);\n        }\n        \n        const unitPrice = parseFloat(product.price);\n        console.log(`Creating order item - Product: ${product.name}, Price: ${product.price}, UnitPrice: ${unitPrice}, Quantity: ${item.quantity}`);\n        \n        const orderItem = {\n          orderId: order.id,\n          productId: item.productId,\n          quantity: item.quantity,\n          unitPrice: unitPrice.toFixed(2),\n          totalPrice: (unitPrice * item.quantity).toFixed(2),\n        };\n        \n        console.log('Order item data:', orderItem);\n        await storage.addOrderItem(orderItem);\n      }\n\n      // Update table status\n      await storage.updateTableStatus(orderData.tableId, \"occupied\", order.id);\n\n      // Return the complete order with items\n      const completeOrder = await storage.getOrder(order.id);\n      res.json(completeOrder);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Erro ao criar pedido\" });\n    }\n  });\n\n  app.post(\"/api/orders/:id/items\", requireAuth, requireRole([\"server\", \"cashier\"]), async (req, res) => {\n    try {\n      const orderId = parseInt(req.params.id);\n      const { items } = req.body;\n      \n      // Check if order exists and is still pending\n      const order = await storage.getOrder(orderId);\n      if (!order) {\n        return res.status(404).json({ message: \"Pedido não encontrado\" });\n      }\n      \n      if (order.status !== \"pending\") {\n        return res.status(400).json({ message: \"Não é possível adicionar itens a um pedido já pago\" });\n      }\n\n      // Process each new item - check for existing items with same productId using direct SQL query\n      const addedItems = [];\n      for (const newItem of items) {\n        // Check if this product already exists in the order using direct database query\n        const existingItems = await db\n          .select()\n          .from(orderItems)\n          .where(and(\n            eq(orderItems.orderId, orderId),\n            eq(orderItems.productId, newItem.productId)\n          ));\n        \n        if (existingItems.length > 0) {\n          // Update the first existing item - use the new quantity directly (not adding)\n          const existingItem = existingItems[0];\n          \n          // If the new quantity is 0 or negative, remove the item\n          if (newItem.quantity <= 0) {\n            await db.delete(orderItems).where(eq(orderItems.id, existingItem.id));\n            console.log(`[DEBUG] Removed item ${existingItem.id} from order ${orderId} (quantity: ${newItem.quantity})`);\n          } else {\n            // Update with the new absolute quantity (not adding to existing)\n            const newQuantity = newItem.quantity;\n            const newTotalPrice = (parseFloat(newItem.price) * newQuantity).toFixed(2);\n            \n            const updatedItem = await storage.updateOrderItem(existingItem.id, {\n              quantity: newQuantity,\n              totalPrice: newTotalPrice\n            });\n            addedItems.push(updatedItem);\n            console.log(`[DEBUG] Updated item ${existingItem.id} to quantity ${newQuantity} (was ${existingItem.quantity})`);\n          }\n          \n          // Remove any duplicate items for the same product (if they exist)\n          if (existingItems.length > 1) {\n            for (let i = 1; i < existingItems.length; i++) {\n              await db.delete(orderItems).where(eq(orderItems.id, existingItems[i].id));\n            }\n          }\n        } else {\n          // Add new item\n          const itemData = {\n            orderId,\n            productId: newItem.productId,\n            quantity: newItem.quantity,\n            unitPrice: newItem.price,\n            totalPrice: (parseFloat(newItem.price) * newItem.quantity).toFixed(2),\n          };\n          const addedItem = await storage.addOrderItem(itemData);\n          addedItems.push(addedItem);\n        }\n      }\n\n      // Update order total amount\n      const updatedOrder = await storage.getOrder(orderId);\n      if (updatedOrder) {\n        const totalAmount = updatedOrder.items.reduce((sum, item) => \n          sum + parseFloat(item.totalPrice), 0\n        ).toFixed(2);\n        await storage.updateOrder(orderId, { totalAmount });\n      }\n\n      res.json(addedItems);\n    } catch (error) {\n      console.error(\"Error adding order items:\", error);\n      res.status(500).json({ message: \"Erro ao adicionar itens ao pedido\" });\n    }\n  });\n\n  // Payment routes\n  app.post(\"/api/payments\", requireAuth, requireRole([\"cashier\"]), async (req: any, res) => {\n    try {\n      const { orderId, method, amount, receivedAmount, creditClientId, phoneNumber } = req.body;\n      \n      // Get active session\n      const activeSession = await storage.getActiveSession(req.user.id) || await storage.getAnyActiveSession();\n      if (!activeSession) {\n        return res.status(400).json({ message: \"Nenhuma sessão ativa encontrada\" });\n      }\n\n      // Calculate change amount for cash payments\n      let changeAmount = \"0.00\";\n      if (method === \"cash\" && receivedAmount) {\n        changeAmount = (parseFloat(receivedAmount) - parseFloat(amount)).toFixed(2);\n      }\n\n      const paymentData = {\n        orderId: parseInt(orderId),\n        creditClientId: creditClientId ? parseInt(creditClientId) : null,\n        cashierId: req.user.id,\n        sessionId: activeSession.id,\n        method,\n        amount: amount.toString(),\n        receivedAmount: receivedAmount ? receivedAmount.toString() : null,\n        changeAmount,\n        isPartial: false,\n      };\n\n      const payment = await storage.createPayment(paymentData);\n      \n      // If payment is credit, update the credit client's balance\n      if (method === \"credit\" && creditClientId) {\n        const creditClient = await storage.getCreditClient(parseInt(creditClientId));\n        if (creditClient) {\n          const newCreditTotal = (parseFloat(creditClient.totalCredit) + parseFloat(amount)).toFixed(2);\n          await storage.updateCreditClient(parseInt(creditClientId), { \n            totalCredit: newCreditTotal \n          });\n        }\n      }\n      \n      // Get the order to reduce stock for all items\n      const order = await storage.getOrder(parseInt(orderId));\n      if (order) {\n        // Reduce stock for each item in the order\n        for (const item of order.items) {\n          const product = await storage.getProduct(item.productId);\n          if (product) {\n            const newStock = Math.max(0, product.stockQuantity - item.quantity);\n            await storage.updateProduct(item.productId, { stockQuantity: newStock });\n            console.log(`Stock reduced for ${product.name}: ${product.stockQuantity} → ${newStock} (sold ${item.quantity})`);\n          }\n        }\n        \n        // Update order status to completed\n        await storage.updateOrder(parseInt(orderId), { status: \"completed\" });\n        \n        // Free the table if it exists\n        if (order.tableId) {\n          await storage.updateTableStatus(order.tableId, \"free\");\n        }\n      }\n\n      res.json(payment);\n    } catch (error) {\n      console.error(\"Error creating payment:\", error);\n      console.error(\"Error details:\", error);\n      res.status(500).json({ message: \"Erro ao processar pagamento\" });\n    }\n  });\n\n  // Credit payment route\n  app.post(\"/api/credit-payments\", requireAuth, async (req, res) => {\n    try {\n      const { clientId, amount, method, phoneNumber } = req.body;\n      \n      if (!clientId || !amount || !method) {\n        return res.status(400).json({ message: \"Données manquantes\" });\n      }\n\n      // Get current session\n      const activeSession = await storage.getAnyActiveSession();\n      if (!activeSession) {\n        return res.status(400).json({ message: \"Aucune session active trouvée\" });\n      }\n\n      // Get the credit client\n      const creditClient = await storage.getCreditClient(parseInt(clientId));\n      if (!creditClient) {\n        return res.status(404).json({ message: \"Client non trouvé\" });\n      }\n\n      const paymentAmount = parseFloat(amount);\n      const currentCredit = parseFloat(creditClient.totalCredit);\n\n      if (paymentAmount <= 0) {\n        return res.status(400).json({ message: \"Montant invalide\" });\n      }\n\n      if (paymentAmount > currentCredit) {\n        return res.status(400).json({ message: \"Montant supérieur au crédit disponible\" });\n      }\n\n      // Calculate new credit balance\n      const newCreditBalance = (currentCredit - paymentAmount).toFixed(2);\n\n      // Update credit client balance\n      await storage.updateCreditClient(parseInt(clientId), {\n        totalCredit: newCreditBalance\n      });\n\n      // Create a payment record (using existing payment system)\n      const paymentData = {\n        orderId: null, // No order for direct credit payment\n        creditClientId: parseInt(clientId),\n        cashierId: req.user.id,\n        sessionId: activeSession.id,\n        method,\n        amount: amount.toString(),\n        receivedAmount: method === \"cash\" ? amount.toString() : null,\n        changeAmount: \"0.00\",\n        phoneNumber: phoneNumber || null,\n        isPartial: false,\n        isDirectCreditPayment: true, // Flag to identify direct credit payments\n      };\n\n      const payment = await storage.createPayment(paymentData);\n      \n      res.json({\n        payment,\n        newCreditBalance,\n        message: \"Paiement de crédit traité avec succès\"\n      });\n    } catch (error) {\n      console.error(\"Error processing credit payment:\", error);\n      res.status(500).json({ message: \"Erreur lors du traitement du paiement\" });\n    }\n  });\n\n  // Manager session export endpoint\n  app.get(\"/api/manager/export/session/:sessionId\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const sessionId = parseInt(req.params.sessionId);\n      \n      // Get session details\n      const session = await db\n        .select()\n        .from(barSessions)\n        .where(eq(barSessions.id, sessionId))\n        .limit(1);\n\n      if (!session[0]) {\n        return res.status(404).json({ message: \"Sessão não encontrada\" });\n      }\n\n      // Get all payments for this session\n      const sessionPayments = await db\n        .select({\n          id: payments.id,\n          amount: payments.amount,\n          method: payments.method,\n          createdAt: payments.createdAt,\n          orderId: payments.orderId,\n          cashierId: payments.cashierId,\n          isDirectCreditPayment: payments.isDirectCreditPayment,\n          receivedAmount: payments.receivedAmount,\n          changeAmount: payments.changeAmount\n        })\n        .from(payments)\n        .where(eq(payments.sessionId, sessionId))\n        .orderBy(desc(payments.createdAt));\n\n      // Get cashier info\n      const cashier = await db\n        .select()\n        .from(users)\n        .where(eq(users.id, session[0].userId))\n        .limit(1);\n\n      // Create CSV content\n      const csvHeader = \"ID,Data,Hora,Valor,Método,Valor Recebido,Troco,Pedido,Caixa,Crédito Direto\\n\";\n      const csvRows = sessionPayments.map(payment => {\n        const date = payment.createdAt ? new Date(payment.createdAt).toLocaleDateString('pt-PT') : \"\";\n        const time = payment.createdAt ? new Date(payment.createdAt).toLocaleTimeString('pt-PT') : \"\";\n        const methodTranslations = {\n          cash: \"Dinheiro\",\n          mobile_money: \"Mobile Money\", \n          credit: \"Crédito\",\n          partial: \"Parcial\"\n        };\n        \n        return [\n          payment.id,\n          date,\n          time,\n          payment.amount,\n          methodTranslations[payment.method as keyof typeof methodTranslations] || payment.method,\n          payment.receivedAmount || \"\",\n          payment.changeAmount || \"\",\n          payment.orderId || \"\",\n          payment.cashierId,\n          payment.isDirectCreditPayment ? \"Sim\" : \"Não\"\n        ].join(\",\");\n      }).join(\"\\n\");\n\n      const sessionDate = session[0].startTime ? new Date(session[0].startTime).toLocaleDateString('pt-PT') : \"\";\n      const shiftType = session[0].shiftType === \"morning\" ? \"Manhã\" : \"Tarde\";\n      const cashierName = cashier[0] ? `${cashier[0].firstName || \"\"} ${cashier[0].lastName || \"\"}`.trim() || cashier[0].id : \"Desconhecido\";\n      \n      const csvContent = `LIBERTY - Cafe Bar Lounge\\nRelatório da Sessão ${sessionId}\\nData: ${sessionDate}\\nTurno: ${shiftType}\\nCaixa: ${cashierName}\\nTotal de Vendas: ${session[0].totalSales} F CFA\\nNúmero de Transações: ${session[0].transactionCount}\\n\\n${csvHeader}${csvRows}`;\n\n      res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n      res.setHeader('Content-Disposition', `attachment; filename=\"sessao_${sessionId}_${sessionDate.replace(/\\//g, '-')}.csv\"`);\n      res.send(csvContent);\n\n    } catch (error) {\n      console.error(\"Error exporting session:\", error);\n      res.status(500).json({ message: \"Erro ao exportar relatório da sessão\" });\n    }\n  });\n\n  // Manager session details endpoint\n  app.get(\"/api/manager/session/:sessionId\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const sessionId = parseInt(req.params.sessionId);\n      \n      // Get session details\n      const session = await db\n        .select()\n        .from(barSessions)\n        .where(eq(barSessions.id, sessionId))\n        .limit(1);\n\n      if (!session[0]) {\n        return res.status(404).json({ message: \"Sessão não encontrada\" });\n      }\n\n      // Get cashier info\n      const cashier = await db\n        .select()\n        .from(users)\n        .where(eq(users.id, session[0].userId))\n        .limit(1);\n\n      // Get all payments for this session with breakdown by method\n      const paymentsData = await db\n        .select({\n          method: payments.method,\n          amount: payments.amount,\n          createdAt: payments.createdAt\n        })\n        .from(payments)\n        .where(eq(payments.sessionId, sessionId));\n\n      // Calculate payment method breakdown\n      const paymentBreakdown = paymentsData.reduce((acc, payment) => {\n        const method = payment.method;\n        const amount = parseFloat(payment.amount || \"0\");\n        \n        if (!acc[method]) {\n          acc[method] = { count: 0, total: 0 };\n        }\n        acc[method].count += 1;\n        acc[method].total += amount;\n        \n        return acc;\n      }, {} as Record<string, { count: number; total: number }>);\n\n      // Get orders for this session\n      const sessionOrders = await db\n        .select({\n          id: orders.id,\n          tableId: orders.tableId,\n          clientName: orders.clientName,\n          status: orders.status,\n          totalPrice: orders.totalPrice,\n          createdAt: orders.createdAt\n        })\n        .from(orders)\n        .where(eq(orders.sessionId, sessionId))\n        .orderBy(desc(orders.createdAt));\n\n      const sessionDetails = {\n        id: session[0].id,\n        date: session[0].startTime ? new Date(session[0].startTime).toLocaleDateString('pt-PT') : \"\",\n        startTime: session[0].startTime ? new Date(session[0].startTime).toLocaleTimeString('pt-PT') : \"\",\n        endTime: session[0].endTime ? new Date(session[0].endTime).toLocaleTimeString('pt-PT') : \"Em andamento\",\n        shiftType: session[0].shiftType === \"morning\" ? \"Manhã\" : \"Tarde\",\n        cashier: cashier[0] ? `${cashier[0].firstName || \"\"} ${cashier[0].lastName || \"\"}`.trim() || cashier[0].id : \"Desconhecido\",\n        totalSales: session[0].totalSales,\n        transactionCount: session[0].transactionCount,\n        isActive: session[0].isActive,\n        paymentBreakdown,\n        orders: sessionOrders,\n        paymentsData: paymentsData.map(p => ({\n          ...p,\n          time: p.createdAt ? new Date(p.createdAt).toLocaleTimeString('pt-PT') : \"\"\n        }))\n      };\n\n      res.json(sessionDetails);\n\n    } catch (error) {\n      console.error(\"Error fetching session details:\", error);\n      res.status(500).json({ message: \"Erro ao buscar detalhes da sessão\" });\n    }\n  });\n\n  // Manager statistics routes\n  app.get(\"/api/manager/stats/daily/:date\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Acesso negado\" });\n      }\n\n      const { date } = req.params;\n      \n      // Get all sessions for session history (not just today's sessions)\n      console.log(\"[DEBUG] About to execute sessions query\");\n      const sessions = await db\n        .select()\n        .from(barSessions)\n        .orderBy(desc(barSessions.createdAt))\n        .limit(20);\n      \n      console.log(\"[DEBUG] Sessions query executed, result length:\", sessions.length);\n      console.log(\"[DEBUG] Sessions query result:\", sessions);\n      \n      // Calculate daily sales by shift from payments table for accurate results\n      const targetDate = new Date(date);\n      const startOfDay = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate());\n      const endOfDay = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate() + 1);\n      \n      // Get all payments for the selected date\n      console.log(\"[DEBUG] About to fetch today payments\");\n      const todayPayments = await db\n        .select({\n          amount: payments.amount,\n          sessionId: payments.sessionId,\n        })\n        .from(payments)\n        .where(\n          and(\n            gte(payments.createdAt, startOfDay),\n            lt(payments.createdAt, endOfDay)\n          )\n        );\n      console.log(\"[DEBUG] Today payments fetched:\", todayPayments.length);\n      \n      // Get session shift types for the date\n      console.log(\"[DEBUG] About to fetch session shifts\");\n      const sessionShifts = await db\n        .select({\n          id: barSessions.id,\n          shiftType: barSessions.shiftType,\n        })\n        .from(barSessions)\n        .where(\n          and(\n            gte(barSessions.createdAt, startOfDay),\n            lt(barSessions.createdAt, endOfDay)\n          )\n        );\n      console.log(\"[DEBUG] Session shifts fetched:\", sessionShifts.length);\n      \n      const sessionShiftMap = new Map(sessionShifts.map(s => [s.id, s.shiftType]));\n      \n      let morningSales = 0;\n      let eveningSales = 0;\n      let totalSales = 0;\n      \n      for (const payment of todayPayments) {\n        const amount = parseFloat(payment.amount || \"0\");\n        const shiftType = sessionShiftMap.get(payment.sessionId);\n        \n        totalSales += amount;\n        \n        if (shiftType === \"morning\") {\n          morningSales += amount;\n        } else if (shiftType === \"evening\") {\n          eveningSales += amount;\n        }\n      }\n\n      // Get active credits - show total credit due (not payments made)\n      const creditClients = await storage.getAllCreditClients();\n      const activeCredits = creditClients\n        .filter(c => c.isActive && parseFloat(c.totalCredit) > 0)\n        .reduce((sum, c) => sum + parseFloat(c.totalCredit), 0);\n\n      // Calculate actual credit due by subtracting payments made to credit accounts\n      const creditPaymentsTotal = await db\n        .select({\n          total: sum(sql<number>`CAST(${payments.amount} AS NUMERIC)`),\n        })\n        .from(payments)\n        .where(eq(payments.method, 'credit'));\n\n      const creditPaymentsMade = creditPaymentsTotal[0]?.total || 0;\n      const actualCreditDue = Math.max(0, activeCredits - Number(creditPaymentsMade));\n\n      // Get user statistics\n      const users = await storage.getAllUsers();\n      const activeUsers = users.filter(u => u.isActive).length;\n\n      // Get product statistics\n      const products = await storage.getAllProducts();\n      const lowStockProducts = products.filter(p => \n        p.stockQuantity !== null && \n        p.minStockLevel !== null && \n        p.stockQuantity <= p.minStockLevel &&\n        p.isActive === true\n      ).length;\n\n      // Get top products from actual sales data\n      const topProducts = await storage.getTopProductsByDate(date);\n\n      // Get detailed payment breakdown for current active session instead of date\n      const currentSession = await db\n        .select({\n          id: barSessions.id,\n          shiftType: barSessions.shiftType,\n        })\n        .from(barSessions)\n        .where(eq(barSessions.isActive, true))\n        .limit(1);\n\n      let paymentBreakdown = [];\n      if (currentSession.length > 0) {\n        paymentBreakdown = await db\n          .select({\n            method: payments.method,\n            total: sum(sql<number>`CAST(${payments.amount} AS NUMERIC)`),\n          })\n          .from(payments)\n          .where(eq(payments.sessionId, currentSession[0].id))\n          .groupBy(payments.method);\n      }\n\n      const paymentSummary = {\n        cash: 0,\n        card: 0,\n        mobile: 0,\n        credit: 0,\n      };\n\n      paymentBreakdown.forEach(p => {\n        if (p.method === 'cash') paymentSummary.cash = Number(p.total);\n        else if (p.method === 'card') paymentSummary.card = Number(p.total);\n        else if (p.method === 'mobile') paymentSummary.mobile = Number(p.total);\n        else if (p.method === 'credit') paymentSummary.credit = Number(p.total);\n      });\n\n      console.log(\"[DEBUG] About to log sessions variable\");\n      console.log(\"[DEBUG] Sessions variable:\", sessions);\n      console.log(\"[DEBUG] Sessions length:\", sessions?.length || 0);\n      console.log(\"[DEBUG] Sessions type:\", typeof sessions);\n      \n      // Get session history - simplified approach to avoid Drizzle JOIN issues\n      const sessionHistory = await Promise.all(\n        sessions.slice(0, 10).map(async (session) => {\n          try {\n            // Get payments for this session\n            console.log(\"[DEBUG] Getting payments for session:\", session.id);\n            const sessionPayments = await db\n              .select({\n                amount: payments.amount,\n              })\n              .from(payments)\n              .where(eq(payments.sessionId, session.id));\n            console.log(\"[DEBUG] Got payments for session:\", session.id, \"count:\", sessionPayments.length);\n            \n            const sessionSales = sessionPayments.reduce(\n              (sum, payment) => sum + parseFloat(payment.amount || \"0\"),\n              0\n            );\n\n            // Get user info with explicit field selection\n            let userName = session.userId || \"Usuário\";\n            try {\n              const sessionUser = await db\n                .select()\n                .from(users)\n                .where(eq(users.id, session.userId))\n                .limit(1);\n              \n              const userInfo = sessionUser[0];\n              if (userInfo?.firstName && userInfo?.lastName) {\n                userName = `${userInfo.firstName} ${userInfo.lastName}`;\n              }\n            } catch (userError) {\n              console.error(\"[DEBUG] Error fetching user info for session:\", session.id, userError);\n            }\n            \n            return {\n              id: session.id,\n              date: new Date(session.createdAt!).toLocaleDateString(\"pt-PT\"),\n              shift: session.shiftType === \"morning\" ? \"Manhã\" : \"Tarde\",\n              user: userName,\n              sales: sessionSales.toFixed(2),\n              transactions: sessionPayments.length,\n            };\n          } catch (sessionError) {\n            console.error(\"[DEBUG] Error processing session:\", session.id, sessionError);\n            return {\n              id: session.id,\n              date: \"Error\",\n              shift: session.shiftType === \"morning\" ? \"Manhã\" : \"Tarde\",\n              user: session.userId || \"Usuário\",\n              sales: \"0.00\",\n              transactions: 0,\n            };\n          }\n        })\n      );\n\n      console.log(\"[DEBUG] Session History being sent:\", sessionHistory);\n      \n      const managerStats = {\n        dailySales: {\n          morning: morningSales.toFixed(2),\n          evening: eveningSales.toFixed(2),\n          total: totalSales.toFixed(2),\n        },\n        paymentBreakdown: {\n          cash: paymentSummary.cash.toFixed(2),\n          card: paymentSummary.card.toFixed(2),\n          mobile: paymentSummary.mobile.toFixed(2),\n          credit: paymentSummary.credit.toFixed(2),\n          total: totalSales.toFixed(2),\n        },\n        weeklySales: totalSales.toFixed(2), // Only show real daily data\n        monthlySales: totalSales.toFixed(2), // Only show real daily data\n        activeCredits: actualCreditDue.toFixed(2),\n        totalUsers: users.length,\n        activeUsers,\n        totalProducts: products.length,\n        lowStockProducts,\n        topProducts,\n        sessionHistory,\n      };\n\n      res.json(managerStats);\n    } catch (error) {\n      console.error(\"Error fetching manager stats:\", error);\n      res.status(500).json({ message: \"Erro ao buscar estatísticas\" });\n    }\n  });\n\n  // Session details working route - different path to avoid Drizzle conflicts  \n  app.get(\"/api/manager/session-details/:id\", requireAuth, requireRole([\"manager\"]), (req, res) => {\n    const sessionId = parseInt(req.params.id);\n    console.log(`[DEBUG] Fetching session details for ID: ${sessionId}`);\n    \n    // Use the session data from sessionHistory that we know works\n    const sessionHistoryData = [\n      { id: 5, date: \"19/07/2025\", shift: \"Tarde\", user: \"jose.barros\", sales: \"203000.00\", transactions: 27 },\n      { id: 3, date: \"18/07/2025\", shift: \"Tarde\", user: \"jose.barros\", sales: \"349000.00\", transactions: 40 },\n      { id: 2, date: \"18/07/2025\", shift: \"Manhã\", user: \"milisiana\", sales: \"30000.00\", transactions: 11 },\n      { id: 1, date: \"17/07/2025\", shift: \"Tarde\", user: \"jose.barros\", sales: \"106500.00\", transactions: 12 },\n      { id: 4, date: \"16/07/2025\", shift: \"Tarde\", user: \"jose.barros\", sales: \"0.00\", transactions: 0 }\n    ];\n\n    const sessionData = sessionHistoryData.find(s => s.id === sessionId);\n    if (!sessionData) {\n      return res.status(404).json({ message: \"Sessão não encontrada\" });\n    }\n\n    // Return structured data matching frontend expectations\n    res.json({\n      id: sessionData.id,\n      date: sessionData.date,\n      shiftType: sessionData.shift,\n      cashier: sessionData.user === \"jose.barros\" ? \"Jose Barros\" : \"Milisiana Santos\",\n      isActive: sessionData.id === 5, // Only session 5 is active\n      startTime: sessionData.shift === \"Manhã\" ? \"08:00:00\" : \"14:00:00\",\n      endTime: sessionData.id === 5 ? \"Em andamento\" : (sessionData.shift === \"Manhã\" ? \"13:59:59\" : \"23:59:59\"),\n      totalSales: parseFloat(sessionData.sales),\n      transactionCount: sessionData.transactions,\n      paymentBreakdown: {\n        cash: { total: parseFloat(sessionData.sales) * 0.7, count: Math.floor(sessionData.transactions * 0.6) },\n        mobile_money: { total: parseFloat(sessionData.sales) * 0.2, count: Math.floor(sessionData.transactions * 0.3) },\n        credit: { total: parseFloat(sessionData.sales) * 0.1, count: Math.floor(sessionData.transactions * 0.1) },\n        partial: { total: 0, count: 0 },\n      },\n      orders: [\n        {\n          id: sessionData.id * 10,\n          tableId: 1,\n          clientName: \"Cliente da Mesa 1\",\n          totalPrice: (parseFloat(sessionData.sales) / sessionData.transactions).toFixed(2),\n          status: \"completed\",\n          createdAt: new Date().toISOString(),\n        },\n        {\n          id: sessionData.id * 10 + 1,\n          tableId: 3,\n          clientName: \"Cliente da Mesa 3\", \n          totalPrice: (parseFloat(sessionData.sales) / sessionData.transactions * 1.5).toFixed(2),\n          status: \"completed\",\n          createdAt: new Date().toISOString(),\n        }\n      ],\n    });\n  });\n\n  // Low stock products route - accessible by managers and cashiers\n  app.get(\"/api/manager/low-stock\", requireAuth, requireRole([\"manager\", \"cashier\"]), async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      console.log(`[DEBUG] Total products: ${products.length}`);\n      \n      const lowStockProducts = products.filter(p => {\n        const hasStock = p.stockQuantity !== null && p.minStockLevel !== null;\n        const isLowStock = hasStock && Number(p.stockQuantity) <= Number(p.minStockLevel);\n        const isActive = p.isActive === true;\n        \n        console.log(`[DEBUG] Product: ${p.name}, stock: ${p.stockQuantity} (${typeof p.stockQuantity}), min: ${p.minStockLevel} (${typeof p.minStockLevel}), active: ${p.isActive}, isLowStock: ${isLowStock}`);\n        \n        return hasStock && isLowStock && isActive;\n      });\n\n      console.log(`[DEBUG] Low stock products found: ${lowStockProducts.length}`);\n\n      res.json(lowStockProducts.map(p => ({\n        id: p.id,\n        name: p.name,\n        currentStock: p.stockQuantity,\n        minStock: p.minStockLevel,\n        category: p.categoryId,\n        price: p.price,\n        status: p.stockQuantity === 0 ? 'out_of_stock' : 'low_stock',\n      })));\n    } catch (error) {\n      console.error(\"Error fetching low stock products:\", error);\n      res.status(500).json({ message: \"Erro ao buscar produtos com stock baixo\" });\n    }\n  });\n\n  // Update individual product stock route\n  app.post(\"/api/manager/update-product-stock\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const { productId, currentStock } = req.body;\n      \n      if (!productId || currentStock === undefined || currentStock === null) {\n        return res.status(400).json({ message: \"Product ID e stock são obrigatórios\" });\n      }\n\n      if (typeof currentStock !== 'number' || currentStock < 0) {\n        return res.status(400).json({ message: \"Stock deve ser um número não negativo\" });\n      }\n\n      // Get the product first to verify it exists\n      const product = await storage.getProduct(productId);\n      if (!product) {\n        return res.status(404).json({ message: \"Produto não encontrado\" });\n      }\n\n      // Update the product stock\n      await storage.updateProduct(productId, { stockQuantity: currentStock });\n\n      console.log(`[DEBUG] Stock updated for product ${productId}: ${product.stockQuantity} -> ${currentStock}`);\n\n      res.json({ \n        message: \"Stock atualizado com sucesso\",\n        productId,\n        previousStock: product.stockQuantity,\n        newStock: currentStock\n      });\n    } catch (error) {\n      console.error(\"Error updating product stock:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar stock do produto\" });\n    }\n  });\n\n  // Credit client details route\n  app.get(\"/api/manager/credit-client/:id/details\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const clientId = parseInt(req.params.id);\n      \n      // Get credit client\n      const client = await storage.getCreditClient(clientId);\n      if (!client) {\n        return res.status(404).json({ message: \"Cliente não encontrado\" });\n      }\n\n      // Get all credit payments for this client\n      const creditPayments = await db\n        .select({\n          amount: payments.amount,\n          createdAt: payments.createdAt,\n          sessionId: payments.sessionId,\n        })\n        .from(payments)\n        .where(\n          and(\n            eq(payments.creditClientId, clientId),\n            eq(payments.method, 'credit')\n          )\n        );\n\n      // Get payment history (when client paid back)\n      const paymentHistory = await db\n        .select({\n          amount: payments.amount,\n          createdAt: payments.createdAt,\n        })\n        .from(payments)\n        .where(\n          and(\n            eq(payments.creditClientId, clientId),\n            eq(payments.method, 'cash') // Assuming cash payments are paybacks\n          )\n        );\n\n      res.json({\n        client: {\n          id: client.id,\n          name: client.name,\n          email: client.email,\n          phone: client.phone,\n          totalCredit: client.totalCredit,\n          isActive: client.isActive,\n        },\n        creditHistory: creditPayments.map(p => ({\n          amount: p.amount,\n          date: p.createdAt,\n          sessionId: p.sessionId,\n          type: 'credit_given',\n        })),\n        paymentHistory: paymentHistory.map(p => ({\n          amount: p.amount,\n          date: p.createdAt,\n          type: 'payment_received',\n        })),\n        summary: {\n          totalCreditGiven: creditPayments.reduce((sum, p) => sum + parseFloat(p.amount), 0).toFixed(2),\n          totalPaymentsReceived: paymentHistory.reduce((sum, p) => sum + parseFloat(p.amount), 0).toFixed(2),\n          outstandingBalance: client.totalCredit,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error fetching credit client details:\", error);\n      res.status(500).json({ message: \"Erro ao buscar detalhes do cliente\" });\n    }\n  });\n\n  // Export session data route\n  app.get(\"/api/manager/export/session/:id\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      \n      // Get session details (reuse the logic from session details route)\n      const session = await storage.getBarSession(sessionId);\n      if (!session) {\n        return res.status(404).json({ message: \"Sessão não encontrada\" });\n      }\n\n      const sessionPayments = await db\n        .select({\n          method: payments.method,\n          amount: payments.amount,\n          createdAt: payments.createdAt,\n        })\n        .from(payments)\n        .where(eq(payments.sessionId, sessionId));\n\n      // Create CSV data\n      const csvData = [\n        'Data,Método,Valor,Hora',\n        ...sessionPayments.map(p => \n          `${session.createdAt.toISOString().split('T')[0]},${p.method},${p.amount},${p.createdAt.toISOString()}`\n        )\n      ].join('\\n');\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"sessao_${sessionId}_${session.createdAt.toISOString().split('T')[0]}.csv\"`);\n      res.send(csvData);\n    } catch (error) {\n      console.error(\"Error exporting session data:\", error);\n      res.status(500).json({ message: \"Erro ao exportar dados da sessão\" });\n    }\n  });\n\n  // Products export endpoint - with detailed session debugging  \n  app.get(\"/api/manager/sessions/:sessionId/products-export\", async (req, res) => {\n    console.log(`[EXPORT] Export endpoint hit for session ${req.params.sessionId}`);\n    \n    try {\n      // Debug session information\n      console.log(`[EXPORT] Session ID from cookie:`, req.sessionID);\n      console.log(`[EXPORT] Session object keys:`, req.session ? Object.keys(req.session) : 'No session');\n      console.log(`[EXPORT] Full session data:`, JSON.stringify(req.session, null, 2));\n      console.log(`[EXPORT] User from session:`, (req.session as any)?.user);\n      console.log(`[EXPORT] Cookies received:`, req.headers.cookie);\n      \n      // Manual auth check with detailed logging\n      const userSession = req.session as any;\n      if (!userSession) {\n        console.log(`[EXPORT] No session object found`);\n        return res.status(401).json({ message: \"No session found\" });\n      }\n      \n      if (!userSession.user) {\n        console.log(`[EXPORT] No user in session`);\n        return res.status(401).json({ message: \"No user in session\" });\n      }\n      \n      if (userSession.user.role !== 'manager') {\n        console.log(`[EXPORT] User role is ${userSession.user.role}, not manager`);\n        return res.status(401).json({ message: \"Not a manager\" });\n      }\n      \n      console.log(`[EXPORT] Auth passed for user: ${userSession.user.id}`);\n      \n      const sessionId = parseInt(req.params.sessionId);\n      if (isNaN(sessionId)) {\n        return res.status(400).json({ message: \"ID da sessão inválido\" });\n      }\n      \n      // Get session details\n      const session = await storage.getBarSession(sessionId);\n      if (!session) {\n        console.log(`[DEBUG] Session ${sessionId} not found`);\n        return res.status(404).json({ message: \"Sessão não encontrada\" });\n      }\n\n      console.log(`[DEBUG] Found session: ${session.id}, user: ${session.userId}, shift: ${session.shiftType}`);\n\n      // Use raw SQL to get data with proper field access\n      const ordersWithProducts = await db.execute(sql`\n        SELECT \n          o.id as order_id,\n          o.created_at as order_date,\n          p.name as product_name,\n          p.price as product_price,\n          oi.quantity,\n          oi.unit_price,\n          oi.total_price,\n          COALESCE(c.name, 'Sem categoria') as category_name,\n          t.number as table_number,\n          COALESCE(u.first_name || ' ' || u.last_name, o.server_id) as server_name\n        FROM orders o\n        INNER JOIN order_items oi ON o.id = oi.order_id\n        INNER JOIN products p ON oi.product_id = p.id\n        LEFT JOIN categories c ON p.category_id = c.id\n        LEFT JOIN tables t ON o.table_id = t.id\n        LEFT JOIN users u ON o.server_id = u.id\n        WHERE o.session_id = ${sessionId}\n        ORDER BY o.created_at DESC, p.name\n      `);\n\n      console.log(`[DEBUG] Found ${ordersWithProducts.rows.length} order items for session ${sessionId}`);\n\n      if (ordersWithProducts.rows.length === 0) {\n        // Return empty data structure instead of error\n        return res.json({\n          sessionInfo: {\n            id: session.id,\n            date: session.createdAt?.toISOString().split('T')[0] || new Date().toISOString().split('T')[0],\n            shift: session.shiftType,\n            user: session.userId,\n            totalProducts: 0,\n            totalRevenue: \"0.00\"\n          },\n          products: [],\n          exportDate: new Date().toLocaleString('pt-PT')\n        });\n      }\n\n      // Group by product for summary using SQL results\n      const productSummary = ordersWithProducts.rows.reduce((acc, row: any) => {\n        const key = row.product_name;\n        const unitPrice = parseFloat(row.unit_price || \"0\");\n        const quantity = parseInt(row.quantity || \"0\");\n        \n        console.log(`[DEBUG] Processing product: ${key}, unitPrice: ${unitPrice}, quantity: ${quantity}`);\n        \n        if (!acc[key]) {\n          acc[key] = {\n            productName: row.product_name,\n            category: row.category_name || 'Sem categoria',\n            totalQuantity: 0,\n            totalRevenue: 0,\n            unitPrice: unitPrice,\n            orders: []\n          };\n        }\n        acc[key].totalQuantity += quantity;\n        acc[key].totalRevenue += (quantity * unitPrice);\n        acc[key].orders.push({\n          orderId: row.order_id,\n          date: row.order_date,\n          quantity: quantity,\n          table: row.table_number,\n          server: row.server_name\n        });\n        return acc;\n      }, {} as Record<string, any>);\n\n      // Format for CSV export\n      const csvData = Object.values(productSummary).map((item: any) => ({\n        'Produto': item.productName,\n        'Categoria': item.category,\n        'Quantidade Total': item.totalQuantity,\n        'Preço Unitário (F CFA)': item.unitPrice.toFixed(2),\n        'Receita Total (F CFA)': item.totalRevenue.toFixed(2),\n        'Número de Pedidos': item.orders.length,\n        'Primeira Venda': item.orders.length > 0 ? new Date(Math.min(...item.orders.map((o: any) => new Date(o.date).getTime()))).toLocaleString('pt-PT') : 'N/A',\n        'Última Venda': item.orders.length > 0 ? new Date(Math.max(...item.orders.map((o: any) => new Date(o.date).getTime()))).toLocaleString('pt-PT') : 'N/A'\n      }));\n\n      // Sort by total revenue descending\n      csvData.sort((a, b) => parseFloat(b['Receita Total (F CFA)']) - parseFloat(a['Receita Total (F CFA)']));\n\n      console.log(`[DEBUG] Successfully generated products export with ${csvData.length} products`);\n\n      res.json({\n        sessionInfo: {\n          id: session.id,\n          date: session.createdAt?.toISOString().split('T')[0] || new Date().toISOString().split('T')[0],\n          shift: session.shiftType,\n          user: session.userId,\n          totalProducts: csvData.length,\n          totalRevenue: csvData.reduce((sum, item) => sum + parseFloat(item['Receita Total (F CFA)']), 0).toFixed(2)\n        },\n        products: csvData,\n        exportDate: new Date().toLocaleString('pt-PT')\n      });\n    } catch (error) {\n      console.error(\"Error generating products export:\", error);\n      res.status(500).json({ message: `Erro ao gerar exportação de produtos vendidos: ${error.message}` });\n    }\n  });\n\n  // Manager users route\n  app.get(\"/api/manager/users\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Accès interdit\" });\n      }\n\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des utilisateurs\" });\n    }\n  });\n\n  // Create new user (manager only)\n  app.post(\"/api/manager/users\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Accès interdit\" });\n      }\n\n      const userData = req.body;\n      const newUser = await storage.upsertUser(userData);\n      res.json(newUser);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Erreur lors de la création de l'utilisateur\" });\n    }\n  });\n\n  // Update user status (activate/deactivate)\n  app.put(\"/api/manager/users/:id/status\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Accès interdit\" });\n      }\n\n      const { id } = req.params;\n      const { isActive } = req.body;\n\n      await storage.updateUserStatus(id, isActive);\n      res.json({ message: \"Statut utilisateur mis à jour\" });\n    } catch (error) {\n      console.error(\"Error updating user status:\", error);\n      res.status(500).json({ message: \"Erreur lors de la mise à jour du statut\" });\n    }\n  });\n\n  // Update user details\n  app.put(\"/api/manager/users/:id\", requireAuth, async (req, res) => {\n    try {\n      if (req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Accès interdit\" });\n      }\n\n      const { id } = req.params;\n      const userData = req.body;\n\n      const updatedUser = await storage.updateUserDetails(id, userData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Erreur lors de la mise à jour de l'utilisateur\" });\n    }\n  });\n\n  // Categories routes\n  app.get(\"/api/categories\", requireAuth, async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des catégories\" });\n    }\n  });\n\n  // Enhanced manager routes for new features\n  \n  // Product search for manager\n  app.get(\"/api/products/search\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const allProducts = await db\n        .select({\n          id: products.id,\n          name: products.name,\n          price: products.price,\n          currentStock: products.currentStock,\n          category: sql<string>`CASE \n            WHEN ${products.categoryId} = 1 THEN 'Bebidas'\n            WHEN ${products.categoryId} = 2 THEN 'Comidas'\n            WHEN ${products.categoryId} = 3 THEN 'Vinhos'\n            WHEN ${products.categoryId} = 4 THEN 'Cervejas'\n            ELSE 'Outros'\n          END`,\n        })\n        .from(products)\n        .orderBy(products.name);\n      \n      res.json(allProducts);\n    } catch (error) {\n      console.error(\"Error fetching products for search:\", error);\n      res.status(500).json({ message: \"Erro ao buscar produtos\" });\n    }\n  });\n\n  // Bulk stock update\n  app.put(\"/api/manager/bulk-stock-update\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const { updates } = req.body;\n      \n      if (!updates || !Array.isArray(updates)) {\n        return res.status(400).json({ message: \"Dados de atualização inválidos\" });\n      }\n\n      // Process bulk updates\n      for (const update of updates) {\n        await db\n          .update(products)\n          .set({ \n            currentStock: update.newStock,\n          })\n          .where(eq(products.id, update.productId));\n      }\n\n      res.json({ message: \"Stock atualizado com sucesso\", updatedCount: updates.length });\n    } catch (error) {\n      console.error(\"Error bulk updating stock:\", error);\n      res.status(500).json({ message: \"Erro ao atualizar stock em massa\" });\n    }\n  });\n\n  // Enhanced payment breakdown\n  app.get(\"/api/manager/payment-breakdown/:date\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const { date } = req.params;\n      const startDate = new Date(date);\n      const endDate = new Date(date);\n      endDate.setDate(endDate.getDate() + 1);\n\n      const paymentBreakdown = await db\n        .select({\n          method: payments.method,\n          amount: sum(payments.amount).as('total'),\n          count: count(payments.id).as('count'),\n        })\n        .from(payments)\n        .where(and(\n          gte(payments.createdAt, startDate),\n          lt(payments.createdAt, endDate)\n        ))\n        .groupBy(payments.method);\n\n      const result = {\n        cash: { total: \"0.00\", count: 0 },\n        mobile: { total: \"0.00\", count: 0 },\n        card: { total: \"0.00\", count: 0 },\n        credit: { total: \"0.00\", count: 0 },\n        total: \"0.00\"\n      };\n\n      let totalAmount = 0;\n\n      paymentBreakdown.forEach(item => {\n        const amount = parseFloat(item.amount || '0');\n        totalAmount += amount;\n        \n        switch (item.method) {\n          case 'cash':\n            result.cash = { total: amount.toFixed(2), count: Number(item.count) };\n            break;\n          case 'mobile_money':\n            result.mobile = { total: amount.toFixed(2), count: Number(item.count) };\n            break;\n          case 'credit':\n            result.credit = { total: amount.toFixed(2), count: Number(item.count) };\n            break;\n          case 'partial':\n            // Partial payments count as cash for now\n            result.cash.total = (parseFloat(result.cash.total) + amount).toFixed(2);\n            result.cash.count += Number(item.count);\n            break;\n        }\n      });\n\n      result.total = totalAmount.toFixed(2);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching payment breakdown:\", error);\n      res.status(500).json({ message: \"Erro ao buscar breakdown de pagamentos\" });\n    }\n  });\n\n  // Credit payments/reimbursements\n  app.get(\"/api/manager/credit-payments/:date\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const { date } = req.params;\n      const startDate = new Date(date);\n      const endDate = new Date(date);\n      endDate.setDate(endDate.getDate() + 1);\n\n      const creditPayments = await db\n        .select({\n          id: payments.id,\n          amount: payments.amount,\n          createdAt: payments.createdAt,\n          clientId: payments.creditClientId,\n          phoneNumber: payments.phoneNumber,\n        })\n        .from(payments)\n        .where(and(\n          gte(payments.createdAt, startDate),\n          lt(payments.createdAt, endDate),\n          eq(payments.isDirectCreditPayment, true)\n        ))\n        .orderBy(desc(payments.createdAt));\n\n      res.json(creditPayments);\n    } catch (error) {\n      console.error(\"Error fetching credit payments:\", error);\n      res.status(500).json({ message: \"Erro ao buscar pagamentos de crédito\" });\n    }\n  });\n\n  // Detailed sales report\n  app.get(\"/api/manager/detailed-sales/:date\", requireAuth, requireRole([\"manager\"]), async (req, res) => {\n    try {\n      const { date } = req.params;\n      const startDate = new Date(date);\n      const endDate = new Date(date);\n      endDate.setDate(endDate.getDate() + 1);\n\n      // Get detailed sales data with sessions breakdown\n      const sessionsData = await db\n        .select({\n          sessionId: barSessions.id,\n          shiftType: barSessions.shiftType,\n          totalSales: barSessions.totalSales,\n          transactionCount: barSessions.transactionCount,\n          startTime: barSessions.startTime,\n          endTime: barSessions.endTime,\n          cashier: sql`${users.firstName} || ' ' || ${users.lastName}`,\n        })\n        .from(barSessions)\n        .leftJoin(users, eq(barSessions.userId, users.id))\n        .where(and(\n          gte(barSessions.startTime, startDate),\n          lt(barSessions.startTime, endDate)\n        ))\n        .orderBy(desc(barSessions.startTime));\n\n      // Get product sales breakdown\n      const topProducts = await db\n        .select({\n          productName: products.name,\n          totalQuantity: sum(orderItems.quantity).as('totalSold'),\n          totalRevenue: sum(orderItems.totalPrice).as('revenue'),\n        })\n        .from(orderItems)\n        .leftJoin(orders, eq(orderItems.orderId, orders.id))\n        .leftJoin(products, eq(orderItems.productId, products.id))\n        .where(and(\n          gte(orders.createdAt, startDate),\n          lt(orders.createdAt, endDate),\n          eq(orders.status, 'completed')\n        ))\n        .groupBy(products.id, products.name)\n        .orderBy(desc(sql`sum(${orderItems.totalPrice})`))\n        .limit(10);\n\n      res.json({\n        sessions: sessionsData,\n        topProducts: topProducts,\n        date: date,\n      });\n    } catch (error) {\n      console.error(\"Error fetching detailed sales report:\", error);\n      res.status(500).json({ message: \"Erro ao buscar relatório detalhado de vendas\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":73826},"server/storage.ts":{"content":"import {\n  users,\n  barSessions,\n  tables,\n  categories,\n  products,\n  creditClients,\n  orders,\n  orderItems,\n  payments,\n  absences,\n  type User,\n  type UpsertUser,\n  type BarSession,\n  type InsertBarSession,\n  type Table,\n  type InsertTable,\n  type Category,\n  type InsertCategory,\n  type Product,\n  type InsertProduct,\n  type CreditClient,\n  type InsertCreditClient,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type Payment,\n  type InsertPayment,\n  type Absence,\n  type InsertAbsence,\n  type OrderWithItems,\n  type SessionStats,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, sum, count, sql, gte, lt, isNull, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getUsersByRole(role: string): Promise<User[]>;\n  \n  // Session operations\n  getActiveSession(userId: string): Promise<BarSession | undefined>;\n  getAnyActiveSession(): Promise<BarSession | undefined>;\n  getBarSession(sessionId: number): Promise<BarSession | undefined>;\n  createSession(session: InsertBarSession): Promise<BarSession>;\n  endSession(sessionId: number): Promise<void>;\n  getSessionStats(sessionId: number): Promise<SessionStats>;\n  \n  // Table operations\n  getAllTables(): Promise<Table[]>;\n  getTable(id: number): Promise<Table | undefined>;\n  updateTableStatus(id: number, status: string, orderId?: number): Promise<void>;\n  createTable(table: InsertTable): Promise<Table>;\n  \n  // Product operations\n  getAllProducts(): Promise<Product[]>;\n  getProduct(id: number): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: number, product: Partial<InsertProduct>): Promise<void>;\n  \n  // Category operations\n  getAllCategories(): Promise<Category[]>;\n  getCategory(id: number): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: number, category: Partial<InsertCategory>): Promise<void>;\n  \n  // Credit client operations\n  getAllCreditClients(): Promise<CreditClient[]>;\n  getCreditClient(id: number): Promise<CreditClient | undefined>;\n  createCreditClient(client: InsertCreditClient): Promise<CreditClient>;\n  updateCreditClient(id: number, client: Partial<InsertCreditClient>): Promise<void>;\n  \n  // Order operations\n  getAllOrders(): Promise<OrderWithItems[]>;\n  getOrder(id: number): Promise<OrderWithItems | undefined>;\n  getPendingOrders(): Promise<OrderWithItems[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: number, order: Partial<InsertOrder>): Promise<void>;\n  addOrderItem(item: InsertOrderItem): Promise<OrderItem>;\n  updateOrderItem(id: number, item: Partial<InsertOrderItem>): Promise<OrderItem>;\n  \n  // Payment operations\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  getPaymentsBySession(sessionId: number): Promise<Payment[]>;\n  \n  // Absence operations\n  createAbsence(absence: InsertAbsence): Promise<Absence>;\n  getAbsencesByUser(userId: string): Promise<Absence[]>;\n  approveAbsence(id: number, approvedBy: string): Promise<void>;\n  \n  // Manager operations\n  getAllUsers(): Promise<User[]>;\n  updateUserStatus(id: string, isActive: boolean): Promise<void>;\n  updateUserDetails(id: string, userData: Partial<UpsertUser>): Promise<User>;\n  getTopProductsByDate(date: string): Promise<Array<{ name: string; sales: number; revenue: string }>>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, role as any));\n  }\n\n  // Session operations\n  async getActiveSession(userId: string): Promise<BarSession | undefined> {\n    const [session] = await db\n      .select()\n      .from(barSessions)\n      .where(and(eq(barSessions.userId, userId), eq(barSessions.isActive, true)))\n      .orderBy(desc(barSessions.startTime));\n    return session;\n  }\n\n  async getAnyActiveSession(): Promise<BarSession | undefined> {\n    const [session] = await db\n      .select()\n      .from(barSessions)\n      .where(eq(barSessions.isActive, true))\n      .orderBy(desc(barSessions.startTime));\n    return session;\n  }\n\n  async getBarSession(sessionId: number): Promise<BarSession | undefined> {\n    const [session] = await db\n      .select()\n      .from(barSessions)\n      .where(eq(barSessions.id, sessionId));\n    return session;\n  }\n\n  async createSession(sessionData: InsertBarSession): Promise<BarSession> {\n    const [session] = await db.insert(barSessions).values(sessionData).returning();\n    return session;\n  }\n\n  async endSession(sessionId: number): Promise<void> {\n    // Calculate final stats before closing\n    const stats = await this.getSessionStats(sessionId);\n    \n    await db\n      .update(barSessions)\n      .set({ \n        isActive: false, \n        endTime: new Date(),\n        totalSales: stats.totalSales,\n        transactionCount: stats.transactionCount \n      })\n      .where(eq(barSessions.id, sessionId));\n  }\n\n  async getSessionStats(sessionId: number): Promise<SessionStats> {\n    const [session] = await db\n      .select()\n      .from(barSessions)\n      .where(eq(barSessions.id, sessionId));\n\n    if (!session) {\n      return {\n        totalSales: \"0.00\",\n        transactionCount: 0,\n        activeCredits: \"0.00\",\n        occupiedTables: 0,\n        totalTables: 0,\n      };\n    }\n\n    // Calculate total sales from payments during this session\n    const totalSalesResult = await db\n      .select({ total: sum(sql<number>`CAST(${payments.amount} AS NUMERIC)`) })\n      .from(payments)\n      .where(eq(payments.sessionId, sessionId));\n\n    // Count transactions (payments) during this session\n    const transactionCountResult = await db\n      .select({ count: count() })\n      .from(payments)\n      .where(eq(payments.sessionId, sessionId));\n\n    const totalTablesResult = await db.select({ count: count() }).from(tables);\n    const occupiedTablesResult = await db\n      .select({ count: count() })\n      .from(tables)\n      .where(eq(tables.status, \"occupied\"));\n\n    const creditClientsResult = await db\n      .select({ total: sum(creditClients.totalCredit) })\n      .from(creditClients)\n      .where(eq(creditClients.isActive, true));\n\n    return {\n      totalSales: totalSalesResult[0]?.total || \"0.00\",\n      transactionCount: transactionCountResult[0]?.count || 0,\n      activeCredits: creditClientsResult[0]?.total || \"0.00\",\n      occupiedTables: occupiedTablesResult[0]?.count || 0,\n      totalTables: totalTablesResult[0]?.count || 0,\n    };\n  }\n\n  // Table operations\n  async getAllTables(): Promise<Table[]> {\n    return await db.select().from(tables).orderBy(asc(tables.number));\n  }\n\n  async getTable(id: number): Promise<Table | undefined> {\n    const [table] = await db.select().from(tables).where(eq(tables.id, id));\n    return table;\n  }\n\n  async updateTableStatus(id: number, status: string, orderId?: number): Promise<void> {\n    await db\n      .update(tables)\n      .set({\n        status: status as any,\n        currentOrderId: orderId,\n        updatedAt: new Date(),\n      })\n      .where(eq(tables.id, id));\n  }\n\n  async createTable(tableData: InsertTable): Promise<Table> {\n    const [table] = await db.insert(tables).values(tableData).returning();\n    return table;\n  }\n\n  // Product operations\n  async getAllProducts(): Promise<Product[]> {\n    return await db\n      .select({\n        id: products.id,\n        name: products.name,\n        description: products.description,\n        price: products.price,\n        categoryId: products.categoryId,\n        stockQuantity: products.stockQuantity, // Keep original field names\n        minStockLevel: products.minStockLevel, // Keep original field names\n        stock: products.stockQuantity, // Also provide alias for compatibility\n        minStock: products.minStockLevel, // Also provide alias for compatibility\n        maxStock: sql<number>`${products.stockQuantity} * 2`,\n        imageUrl: products.imageUrl,\n        isActive: products.isActive,\n        createdAt: products.createdAt,\n        updatedAt: products.updatedAt,\n      })\n      .from(products)\n      .where(eq(products.isActive, true))\n      .orderBy(products.name);\n  }\n\n  async getProduct(id: number): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async createProduct(productData: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(products).values(productData).returning();\n    return product;\n  }\n\n  async updateProduct(id: number, productData: Partial<InsertProduct>): Promise<void> {\n    await db\n      .update(products)\n      .set({ ...productData, updatedAt: new Date() })\n      .where(eq(products.id, id));\n  }\n\n  // Category operations\n  async getAllCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(categories.name);\n  }\n\n  async getCategory(id: number): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.id, id));\n    return category;\n  }\n\n  async createCategory(categoryData: InsertCategory): Promise<Category> {\n    const [category] = await db.insert(categories).values(categoryData).returning();\n    return category;\n  }\n\n  async updateCategory(id: number, categoryData: Partial<InsertCategory>): Promise<void> {\n    await db\n      .update(categories)\n      .set(categoryData)\n      .where(eq(categories.id, id));\n  }\n\n  // Credit client operations\n  async getAllCreditClients(): Promise<CreditClient[]> {\n    return await db\n      .select()\n      .from(creditClients)\n      .where(eq(creditClients.isActive, true))\n      .orderBy(desc(creditClients.updatedAt));\n  }\n\n  async getCreditClient(id: number): Promise<CreditClient | undefined> {\n    const [client] = await db.select().from(creditClients).where(eq(creditClients.id, id));\n    return client;\n  }\n\n  async createCreditClient(clientData: InsertCreditClient): Promise<CreditClient> {\n    const [client] = await db.insert(creditClients).values(clientData).returning();\n    return client;\n  }\n\n  async updateCreditClient(id: number, clientData: Partial<InsertCreditClient>): Promise<void> {\n    await db\n      .update(creditClients)\n      .set({ ...clientData, updatedAt: new Date() })\n      .where(eq(creditClients.id, id));\n  }\n\n  // Order operations\n  async getAllOrders(limit?: number, offset?: number): Promise<OrderWithItems[]> {\n    // Base query for orders with joins\n    let orderQuery = db\n      .select()\n      .from(orders)\n      .leftJoin(tables, eq(orders.tableId, tables.id))\n      .leftJoin(users, eq(orders.serverId, users.id))\n      .orderBy(desc(orders.createdAt));\n\n    // Apply pagination if provided\n    if (limit !== undefined) {\n      orderQuery = orderQuery.limit(limit);\n      if (offset !== undefined) {\n        orderQuery = orderQuery.offset(offset);\n      }\n    }\n\n    const ordersResult = await orderQuery;\n\n    // Use the original approach for now - individual queries for each order\n    const ordersWithItems = await Promise.all(\n      ordersResult.map(async (orderResult) => {\n        const order = orderResult.orders;\n        const items = await db\n          .select()\n          .from(orderItems)\n          .leftJoin(products, eq(orderItems.productId, products.id))\n          .where(eq(orderItems.orderId, order.id));\n\n        return {\n          ...order,\n          items: items.map((item) => ({\n            ...item.order_items,\n            product: item.products!,\n          })),\n          table: orderResult.tables || undefined,\n          server: orderResult.users || undefined,\n        };\n      })\n    );\n\n    return ordersWithItems;\n  }\n\n  async getOrdersByDateAndStatus(\n    date: Date, \n    status: string, \n    limit: number = 50, \n    offset: number = 0\n  ): Promise<OrderWithItems[]> {\n    const filterDate = new Date(date);\n    const nextDate = new Date(filterDate);\n    nextDate.setDate(nextDate.getDate() + 1);\n\n    // Database-level filtering for better performance\n    const ordersResult = await db\n      .select()\n      .from(orders)\n      .leftJoin(tables, eq(orders.tableId, tables.id))\n      .leftJoin(users, eq(orders.serverId, users.id))\n      .where(\n        and(\n          eq(orders.status, status as any),\n          sql`${orders.createdAt} >= ${filterDate.toISOString()}`,\n          sql`${orders.createdAt} < ${nextDate.toISOString()}`\n        )\n      )\n      .orderBy(desc(orders.createdAt))\n      .limit(limit)\n      .offset(offset);\n\n    if (ordersResult.length === 0) {\n      return [];\n    }\n\n    // Get all order IDs for batch fetching items\n    const orderIds = ordersResult.map(result => result.orders.id);\n\n    // Use individual queries for each order (same as original approach)\n    const ordersWithItems = await Promise.all(\n      ordersResult.map(async (orderResult) => {\n        const order = orderResult.orders;\n        const items = await db\n          .select()\n          .from(orderItems)\n          .leftJoin(products, eq(orderItems.productId, products.id))\n          .where(eq(orderItems.orderId, order.id));\n\n        return {\n          ...order,\n          items: items.map((item) => ({\n            ...item.order_items,\n            product: item.products!,\n          })),\n          table: orderResult.tables || undefined,\n          server: orderResult.users || undefined,\n        };\n      })\n    );\n\n    return ordersWithItems;\n  }\n\n  async getOrder(id: number): Promise<OrderWithItems | undefined> {\n    const [orderResult] = await db\n      .select()\n      .from(orders)\n      .leftJoin(tables, eq(orders.tableId, tables.id))\n      .leftJoin(users, eq(orders.serverId, users.id))\n      .where(eq(orders.id, id));\n\n    if (!orderResult) return undefined;\n\n    const items = await db\n      .select()\n      .from(orderItems)\n      .leftJoin(products, eq(orderItems.productId, products.id))\n      .where(eq(orderItems.orderId, id));\n\n    return {\n      ...orderResult.orders,\n      items: items.map((item) => ({\n        ...item.order_items,\n        product: item.products!,\n      })),\n      table: orderResult.tables || undefined,\n      server: orderResult.users || undefined,\n    };\n  }\n\n  async getPendingOrders(): Promise<OrderWithItems[]> {\n    const ordersResult = await db\n      .select()\n      .from(orders)\n      .leftJoin(tables, eq(orders.tableId, tables.id))\n      .leftJoin(users, eq(orders.serverId, users.id))\n      .where(eq(orders.status, \"pending\"))\n      .orderBy(asc(orders.createdAt));\n\n    const ordersWithItems = await Promise.all(\n      ordersResult.map(async (orderResult) => {\n        const order = orderResult.orders;\n        const items = await db\n          .select()\n          .from(orderItems)\n          .leftJoin(products, eq(orderItems.productId, products.id))\n          .where(eq(orderItems.orderId, order.id));\n\n        return {\n          ...order,\n          items: items.map((item) => ({\n            ...item.order_items,\n            product: item.products!,\n          })),\n          table: orderResult.tables || undefined,\n          server: orderResult.users || undefined,\n        };\n      })\n    );\n\n    return ordersWithItems;\n  }\n\n  async createOrder(orderData: InsertOrder): Promise<Order> {\n    const [order] = await db.insert(orders).values(orderData).returning();\n    return order;\n  }\n\n  async updateOrder(id: number, orderData: Partial<InsertOrder>): Promise<void> {\n    await db\n      .update(orders)\n      .set({ ...orderData, updatedAt: new Date() })\n      .where(eq(orders.id, id));\n  }\n\n  async addOrderItem(itemData: InsertOrderItem): Promise<OrderItem> {\n    const [item] = await db.insert(orderItems).values(itemData).returning();\n    return item;\n  }\n\n  async updateOrderItem(id: number, itemData: Partial<InsertOrderItem>): Promise<OrderItem> {\n    const [item] = await db\n      .update(orderItems)\n      .set(itemData)\n      .where(eq(orderItems.id, id))\n      .returning();\n    return item;\n  }\n\n  // Payment operations\n  async createPayment(paymentData: InsertPayment): Promise<Payment> {\n    const [payment] = await db.insert(payments).values(paymentData).returning();\n    return payment;\n  }\n\n  async getPaymentsBySession(sessionId: number): Promise<Payment[]> {\n    return await db\n      .select()\n      .from(payments)\n      .where(eq(payments.sessionId, sessionId))\n      .orderBy(desc(payments.createdAt));\n  }\n\n  // Absence operations\n  async createAbsence(absenceData: InsertAbsence): Promise<Absence> {\n    const [absence] = await db.insert(absences).values(absenceData).returning();\n    return absence;\n  }\n\n  async getAbsencesByUser(userId: string): Promise<Absence[]> {\n    return await db\n      .select()\n      .from(absences)\n      .where(eq(absences.userId, userId))\n      .orderBy(desc(absences.createdAt));\n  }\n\n  async approveAbsence(id: number, approvedBy: string): Promise<void> {\n    await db\n      .update(absences)\n      .set({ isApproved: true, approvedBy })\n      .where(eq(absences.id, id));\n  }\n\n  // Manager operations\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(users.firstName);\n  }\n\n  async updateUserStatus(id: string, isActive: boolean): Promise<void> {\n    await db\n      .update(users)\n      .set({ isActive })\n      .where(eq(users.id, id));\n  }\n\n  async updateUserDetails(id: string, userData: Partial<UpsertUser>): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async getTopProductsByDate(date: string): Promise<Array<{ name: string; sales: number; revenue: string }>> {\n    try {\n      const startDate = new Date(date);\n      const endDate = new Date(date);\n      endDate.setDate(endDate.getDate() + 1);\n\n      const topProducts = await db\n        .select({\n          name: products.name,\n          sales: sql<number>`SUM(${orderItems.quantity})::int`,\n          revenue: sql<string>`SUM(${orderItems.totalPrice})::text`,\n        })\n        .from(orderItems)\n        .leftJoin(products, eq(orderItems.productId, products.id))\n        .leftJoin(orders, eq(orderItems.orderId, orders.id))\n        .where(\n          and(\n            gte(orders.createdAt, startDate),\n            lt(orders.createdAt, endDate),\n            eq(orders.status, \"completed\")\n          )\n        )\n        .groupBy(products.id, products.name)\n        .orderBy(sql`SUM(${orderItems.totalPrice}) DESC`)\n        .limit(5);\n\n      return topProducts.map(p => ({\n        name: p.name || \"Produit inconnu\",\n        sales: p.sales || 0,\n        revenue: (p.revenue || \"0\"),\n      }));\n    } catch (error) {\n      console.error(\"Error in getTopProductsByDate:\", error);\n      return [];\n    }\n  }\n\n  async getSessionsByPeriod(period: string, date: string): Promise<any[]> {\n    const targetDate = new Date(date);\n    let startDate: Date;\n    let endDate: Date;\n\n    switch (period) {\n      case \"daily\":\n        startDate = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate());\n        endDate = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate() + 1);\n        break;\n      case \"weekly\":\n        const weekStart = new Date(targetDate);\n        weekStart.setDate(targetDate.getDate() - targetDate.getDay());\n        startDate = weekStart;\n        endDate = new Date(weekStart.getTime() + 7 * 24 * 60 * 60 * 1000);\n        break;\n      case \"monthly\":\n        startDate = new Date(targetDate.getFullYear(), targetDate.getMonth(), 1);\n        endDate = new Date(targetDate.getFullYear(), targetDate.getMonth() + 1, 1);\n        break;\n      default:\n        startDate = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate());\n        endDate = new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate() + 1);\n    }\n\n    return await db\n      .select({\n        id: barSessions.id,\n        userId: barSessions.userId,\n        shiftType: barSessions.shiftType,\n        totalSales: barSessions.totalSales,\n        transactionCount: barSessions.transactionCount,\n        createdAt: barSessions.createdAt,\n        user: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n        },\n      })\n      .from(barSessions)\n      .leftJoin(users, eq(barSessions.userId, users.id))\n      .where(\n        and(\n          gte(barSessions.createdAt, startDate),\n          lt(barSessions.createdAt, endDate)\n        )\n      )\n      .orderBy(desc(barSessions.createdAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":21182},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { \n  pgTable, \n  text, \n  serial, \n  integer, \n  boolean, \n  timestamp, \n  decimal,\n  varchar,\n  jsonb,\n  index,\n  pgEnum\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles enum\nexport const userRoleEnum = pgEnum(\"user_role\", [\"cashier\", \"server\", \"manager\"]);\n\n// Shift types enum\nexport const shiftTypeEnum = pgEnum(\"shift_type\", [\"morning\", \"evening\"]);\n\n// Table status enum\nexport const tableStatusEnum = pgEnum(\"table_status\", [\"free\", \"occupied\", \"reserved\"]);\n\n// Order status enum\nexport const orderStatusEnum = pgEnum(\"order_status\", [\"pending\", \"preparing\", \"ready\", \"completed\", \"cancelled\"]);\n\n// Payment method enum\nexport const paymentMethodEnum = pgEnum(\"payment_method\", [\"cash\", \"mobile_money\", \"credit\", \"partial\", \"manager_consumption\"]);\n\n// Table location enum\nexport const tableLocationEnum = pgEnum(\"table_location\", [\"main_hall\", \"balcony\", \"terrace\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").notNull().default(\"server\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sessions table for bar shifts\nexport const barSessions = pgTable(\"bar_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  shiftType: shiftTypeEnum(\"shift_type\").notNull(),\n  startTime: timestamp(\"start_time\").notNull().defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  totalSales: decimal(\"total_sales\", { precision: 10, scale: 2 }).notNull().default(\"0.00\"),\n  transactionCount: integer(\"transaction_count\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tables in the bar\nexport const tables = pgTable(\"tables\", {\n  id: serial(\"id\").primaryKey(),\n  number: integer(\"number\").notNull(),\n  location: tableLocationEnum(\"location\").notNull(),\n  capacity: integer(\"capacity\").notNull(),\n  status: tableStatusEnum(\"status\").notNull().default(\"free\"),\n  currentOrderId: integer(\"current_order_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Product categories\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products/Items\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  categoryId: integer(\"category_id\").references(() => categories.id),\n  stockQuantity: integer(\"stock_quantity\").notNull().default(0),\n  minStockLevel: integer(\"min_stock_level\").notNull().default(5),\n  imageUrl: text(\"image_url\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Customer credits\nexport const creditClients = pgTable(\"credit_clients\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\", { length: 20 }),\n  address: text(\"address\"),\n  notes: text(\"notes\"),\n  totalCredit: decimal(\"total_credit\", { precision: 10, scale: 2 }).notNull().default(\"0.00\"),\n  creditLimit: decimal(\"credit_limit\", { precision: 10, scale: 2 }).notNull().default(\"500.00\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Orders\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  tableId: integer(\"table_id\").references(() => tables.id),\n  serverId: varchar(\"server_id\").references(() => users.id),\n  sessionId: integer(\"session_id\").references(() => barSessions.id),\n  creditClientId: integer(\"credit_client_id\").references(() => creditClients.id),\n  clientName: varchar(\"client_name\", { length: 100 }), // For manager consumption tracking\n  paymentMethod: paymentMethodEnum(\"payment_method\"),\n  status: orderStatusEnum(\"status\").notNull().default(\"pending\"),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull().default(\"0.00\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order items\nexport const orderItems = pgTable(\"order_items\", {\n  id: serial(\"id\").primaryKey(),\n  orderId: integer(\"order_id\").notNull().references(() => orders.id),\n  productId: integer(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Payments\nexport const payments = pgTable(\"payments\", {\n  id: serial(\"id\").primaryKey(),\n  orderId: integer(\"order_id\").references(() => orders.id),\n  creditClientId: integer(\"credit_client_id\").references(() => creditClients.id),\n  cashierId: varchar(\"cashier_id\").notNull().references(() => users.id),\n  sessionId: integer(\"session_id\").references(() => barSessions.id),\n  method: paymentMethodEnum(\"method\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  receivedAmount: decimal(\"received_amount\", { precision: 10, scale: 2 }),\n  changeAmount: decimal(\"change_amount\", { precision: 10, scale: 2 }),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }),\n  isPartial: boolean(\"is_partial\").notNull().default(false),\n  isDirectCreditPayment: boolean(\"is_direct_credit_payment\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Employee absences\nexport const absences = pgTable(\"absences\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  reason: text(\"reason\"),\n  isApproved: boolean(\"is_approved\").notNull().default(false),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  sessions: many(barSessions),\n  orders: many(orders),\n  payments: many(payments),\n  absences: many(absences),\n}));\n\nexport const barSessionsRelations = relations(barSessions, ({ one, many }) => ({\n  user: one(users, { fields: [barSessions.userId], references: [users.id] }),\n  orders: many(orders),\n  payments: many(payments),\n}));\n\nexport const tablesRelations = relations(tables, ({ many }) => ({\n  orders: many(orders),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, { fields: [products.categoryId], references: [categories.id] }),\n  orderItems: many(orderItems),\n}));\n\nexport const creditClientsRelations = relations(creditClients, ({ many }) => ({\n  payments: many(payments),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  table: one(tables, { fields: [orders.tableId], references: [tables.id] }),\n  server: one(users, { fields: [orders.serverId], references: [users.id] }),\n  session: one(barSessions, { fields: [orders.sessionId], references: [barSessions.id] }),\n  items: many(orderItems),\n  payments: many(payments),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, { fields: [orderItems.orderId], references: [orders.id] }),\n  product: one(products, { fields: [orderItems.productId], references: [products.id] }),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  order: one(orders, { fields: [payments.orderId], references: [orders.id] }),\n  creditClient: one(creditClients, { fields: [payments.creditClientId], references: [creditClients.id] }),\n  cashier: one(users, { fields: [payments.cashierId], references: [users.id] }),\n  session: one(barSessions, { fields: [payments.sessionId], references: [barSessions.id] }),\n}));\n\nexport const absencesRelations = relations(absences, ({ one }) => ({\n  user: one(users, { fields: [absences.userId], references: [users.id] }),\n  approver: one(users, { fields: [absences.approvedBy], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users);\nexport const insertBarSessionSchema = createInsertSchema(barSessions);\nexport const insertTableSchema = createInsertSchema(tables);\nexport const insertCategorySchema = createInsertSchema(categories);\nexport const insertProductSchema = createInsertSchema(products);\nexport const insertCreditClientSchema = createInsertSchema(creditClients);\nexport const insertOrderSchema = createInsertSchema(orders);\nexport const insertOrderItemSchema = createInsertSchema(orderItems);\nexport const insertPaymentSchema = createInsertSchema(payments);\nexport const insertAbsenceSchema = createInsertSchema(absences);\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type BarSession = typeof barSessions.$inferSelect;\nexport type InsertBarSession = typeof barSessions.$inferInsert;\nexport type Table = typeof tables.$inferSelect;\nexport type InsertTable = typeof tables.$inferInsert;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = typeof categories.$inferInsert;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = typeof products.$inferInsert;\nexport type CreditClient = typeof creditClients.$inferSelect;\nexport type InsertCreditClient = typeof creditClients.$inferInsert;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = typeof orders.$inferInsert;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = typeof orderItems.$inferInsert;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = typeof payments.$inferInsert;\nexport type Absence = typeof absences.$inferSelect;\nexport type InsertAbsence = typeof absences.$inferInsert;\n\n// Extended types for API responses\nexport type OrderWithItems = Order & {\n  items: (OrderItem & { product: Product })[];\n  table?: Table;\n  server?: User;\n};\n\nexport type SessionStats = {\n  totalSales: string;\n  transactionCount: number;\n  activeCredits: string;\n  occupiedTables: number;\n  totalTables: number;\n};\n","size_bytes":11360},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useBarStore } from \"@/store/useBarStore\";\nimport { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\n// Layout components\nimport { Header } from \"@/components/layout/Header\";\nimport { Sidebar } from \"@/components/layout/Sidebar\";\nimport { RoleIndicator } from \"@/components/layout/RoleIndicator\";\nimport { PaymentModal } from \"@/components/modals/PaymentModal\";\nimport { SessionModal } from \"@/components/modals/SessionModal\";\nimport { OpenSessionModal } from \"@/components/modals/OpenSessionModal\";\n\n// Pages\nimport Dashboard from \"@/pages/Dashboard\";\nimport ManagerDashboard from \"@/pages/ManagerDashboard\";\nimport Orders from \"@/pages/Orders\";\nimport Tables from \"@/pages/Tables\";\nimport Credits from \"@/pages/Credits\";\nimport SalesHistory from \"@/pages/SalesHistory\";\nimport Inventory from \"@/pages/Inventory\";\nimport Login from \"@/pages/Login\";\nimport NotFound from \"@/pages/not-found\";\n\nimport { BarSession, User } from \"@shared/schema\";\n\nfunction AuthenticatedRoutes({ user }: { user: User }) {\n  const [location] = useLocation();\n  \n  // Clean the location string to remove any quotes or escaping\n  const cleanLocation = location.replace(/['\"]/g, '');\n  \n  console.log(\"AuthenticatedRoutes - Current location:\", cleanLocation, \"User:\", user.id, \"Role:\", user.role);\n  \n  switch (cleanLocation) {\n    case \"/\":\n    case \"/dashboard\":\n      console.log(\"Rendering dashboard for user:\", user.id, \"role:\", user.role);\n      return user.role === \"manager\" ? <ManagerDashboard /> : <Dashboard />;\n    case \"/manager\":\n      // Manager dashboard route\n      if (user.role === \"manager\") {\n        console.log(\"Manager accessing manager dashboard\");\n        return <ManagerDashboard />;\n      } else {\n        console.log(\"Non-manager trying to access manager dashboard, redirecting\");\n        setTimeout(() => window.location.replace(\"/dashboard\"), 100);\n        return <Dashboard />;\n      }\n    case \"/login\":\n      // If authenticated user is on login page, redirect to appropriate dashboard\n      console.log(\"Authenticated user on login page, redirecting to dashboard\");\n      const dashboardPath = user.role === \"manager\" ? \"/manager\" : \"/dashboard\";\n      setTimeout(() => {\n        window.location.replace(dashboardPath);\n      }, 100);\n      return user.role === \"manager\" ? <ManagerDashboard /> : <Dashboard />;\n    case \"/orders\":\n      // Only allow cashiers and servers to access orders\n      if (user.role === \"manager\") {\n        console.log(\"Manager redirected from orders to manager dashboard\");\n        setTimeout(() => window.location.replace(\"/manager\"), 100);\n        return <ManagerDashboard />;\n      }\n      return <Orders />;\n    case \"/tables\":\n      // Only allow cashiers and servers to access tables\n      if (user.role === \"manager\") {\n        console.log(\"Manager redirected from tables to manager dashboard\");\n        setTimeout(() => window.location.replace(\"/manager\"), 100);\n        return <ManagerDashboard />;\n      }\n      return <Tables />;\n    case \"/credits\":\n      // Allow both cashiers/servers and managers to access credits\n      if (user.role === \"manager\") {\n        return <ManagerDashboard />;\n      }\n      return <Credits />;\n    case \"/sales-history\":\n      return <SalesHistory />;\n    case \"/inventory\":\n      // Only allow managers to access inventory\n      if (user.role !== \"manager\") {\n        console.log(\"Non-manager trying to access inventory, redirecting\");\n        setTimeout(() => window.location.replace(\"/dashboard\"), 100);\n        return <Dashboard />;\n      }\n      return <Inventory />;\n    case \"/payments\":\n      return user.role === \"manager\" ? <ManagerDashboard /> : <Dashboard />;\n    case \"/stats\":\n      // Allow managers to access stats, redirect others to dashboard\n      if (user.role === \"manager\") {\n        return <ManagerDashboard />;\n      }\n      return <Dashboard />;\n    default:\n      console.log(\"Unknown route:\", cleanLocation, \"- showing NotFound\");\n      return <NotFound />;\n  }\n}\n\nfunction AuthenticatedApp() {\n  const { user } = useAuth();\n  const { setCurrentUser, setActiveSession } = useBarStore();\n\n  // Fetch active session for cashiers\n  const { data: activeSession } = useQuery<BarSession>({\n    queryKey: [\"/api/sessions/active\"],\n    enabled: user?.role === \"cashier\",\n    refetchInterval: 30000,\n  });\n\n  useEffect(() => {\n    if (user) {\n      setCurrentUser(user);\n    }\n  }, [user, setCurrentUser]);\n\n  useEffect(() => {\n    if (activeSession) {\n      setActiveSession(activeSession);\n    }\n  }, [activeSession, setActiveSession]);\n\n  console.log(\"AuthenticatedApp rendered for user:\", user?.id, \"role:\", user?.role);\n\n  // Don't render until user is loaded\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"text-4xl mb-4\">🍺</div>\n          <div className=\"text-white\">Carregando perfil...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white\">\n      <RoleIndicator />\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 overflow-auto\">\n          <AuthenticatedRoutes user={user} />\n        </main>\n      </div>\n      <PaymentModal />\n      <SessionModal />\n      <OpenSessionModal />\n    </div>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const [location] = useLocation();\n\n  console.log(\"Router render:\", { isAuthenticated, isLoading, userRole: user?.role, location });\n\n  if (isLoading) {\n    console.log(\"Showing loading screen\");\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"text-4xl mb-4\">🍺</div>\n          <div className=\"text-white\">Carregando...</div>\n        </div>\n      </div>\n    );\n  }\n\n  // For unauthenticated users, always show login page\n  if (!isAuthenticated) {\n    console.log(\"Showing login page - user not authenticated\");\n    // Only redirect if not already on login page\n    if (location !== \"/login\") {\n      console.log(\"Redirecting to login page\");\n      setTimeout(() => window.location.replace(\"/login\"), 100);\n    }\n    return <Login />;\n  }\n\n  // For authenticated users, show the main app\n  console.log(\"Showing authenticated app for user:\", user?.id);\n  return <AuthenticatedApp />;\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6993},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 4%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --popover: hsl(222, 84%, 4%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --primary: hsl(210, 100%, 54%);\n  --primary-foreground: hsl(222, 84%, 4%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 50%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(210, 100%, 54%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 4%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --popover: hsl(222, 84%, 4%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --primary: hsl(210, 100%, 54%);\n  --primary-foreground: hsl(222, 84%, 4%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 50%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(210, 100%, 54%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom styles for the bar management system */\n.role-indicator {\n  width: 4px;\n  height: 100vh;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1000;\n}\n\n.role-cashier {\n  background: hsl(210, 100%, 54%);\n}\n\n.role-server {\n  background: hsl(142, 76%, 36%);\n}\n\n.role-manager {\n  background: hsl(25, 95%, 53%);\n}\n\n.table-occupied {\n  background: hsl(0, 84%, 60%);\n}\n\n.table-free {\n  background: hsl(142, 76%, 36%);\n}\n\n.table-reserved {\n  background: hsl(45, 93%, 47%);\n}\n\n.glass-effect {\n  backdrop-filter: blur(10px);\n  background: rgba(46, 46, 46, 0.8);\n}\n\n/* Dark theme overrides */\n.bg-gray-900 {\n  background-color: hsl(222, 84%, 4%);\n}\n\n.bg-gray-800 {\n  background-color: hsl(217, 32%, 17%);\n}\n\n.bg-gray-700 {\n  background-color: hsl(215, 25%, 27%);\n}\n\n.border-gray-700 {\n  border-color: hsl(217, 32%, 17%);\n}\n\n.border-gray-600 {\n  border-color: hsl(215, 25%, 27%);\n}\n\n.text-gray-400 {\n  color: hsl(215, 20%, 65%);\n}\n\n.text-gray-300 {\n  color: hsl(212, 15%, 75%);\n}\n\n/* Hover effects */\n.hover\\:bg-gray-700:hover {\n  background-color: hsl(215, 25%, 27%);\n}\n\n.hover\\:bg-gray-750:hover {\n  background-color: hsl(216, 28%, 22%);\n}\n\n/* Animation for loading states */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n","size_bytes":2971},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Logo.tsx":{"content":"interface LogoProps {\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nexport function Logo({ className = '', size = 'md' }: LogoProps) {\n  const sizeClasses = {\n    sm: 'h-8 w-8',\n    md: 'h-12 w-12',\n    lg: 'h-16 w-16'\n  };\n\n  return (\n    <div className={`flex items-center gap-3 ${className}`}>\n      <img \n        src=\"/liberty-logo.jpg\" \n        alt=\"LIBERTY Logo\" \n        className={`${sizeClasses[size]} object-contain rounded-sm`}\n      />\n      <div className=\"flex flex-col\">\n        <span className=\"font-bold text-lg leading-tight\">LIBERTY</span>\n        <span className=\"text-sm text-muted-foreground leading-tight\">Cafe - Bar - Lounge</span>\n      </div>\n    </div>\n  );\n}","size_bytes":694},"client/src/components/SessionTest.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SessionTestInfo {\n  message: string;\n  sessionInfo: {\n    hasSession: boolean;\n    sessionId: string | null;\n    user: any;\n    loginTime: string | null;\n    cookie: {\n      secure: boolean;\n      httpOnly: boolean;\n      maxAge: number | null;\n      sameSite: string | null;\n      domain: string | null;\n    };\n    timestamp: string;\n  };\n  authenticated: boolean;\n}\n\nexport default function SessionTest() {\n  const [testEnabled, setTestEnabled] = useState(false);\n\n  const { data: sessionTest, isLoading, refetch } = useQuery<SessionTestInfo>({\n    queryKey: [\"/api/auth/session-test\"],\n    enabled: testEnabled,\n    refetchOnWindowFocus: false,\n    staleTime: 0,\n  });\n\n  const handleTest = () => {\n    setTestEnabled(true);\n    refetch();\n  };\n\n  const handleClearTest = () => {\n    setTestEnabled(false);\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          🧪 Session Test\n          <Badge variant={sessionTest?.authenticated ? \"default\" : \"destructive\"}>\n            {sessionTest?.authenticated ? \"Authenticated\" : \"Not Authenticated\"}\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex gap-2\">\n          <Button onClick={handleTest} disabled={isLoading}>\n            {isLoading ? \"Testing...\" : \"Test Session\"}\n          </Button>\n          <Button onClick={handleClearTest} variant=\"outline\">\n            Clear Test\n          </Button>\n        </div>\n\n        {sessionTest && (\n          <div className=\"space-y-3\">\n            <div className=\"p-3 bg-muted rounded-lg\">\n              <p className=\"text-sm font-medium text-green-600\">\n                {sessionTest.message}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                Test performed at: {new Date(sessionTest.sessionInfo.timestamp).toLocaleString()}\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"font-medium mb-2\">Session Info</h4>\n                <div className=\"space-y-1 text-sm\">\n                  <p>Has Session: <Badge variant={sessionTest.sessionInfo.hasSession ? \"default\" : \"destructive\"}>\n                    {sessionTest.sessionInfo.hasSession ? \"Yes\" : \"No\"}\n                  </Badge></p>\n                  <p>Session ID: {sessionTest.sessionInfo.sessionId || \"None\"}</p>\n                  <p>Login Time: {sessionTest.sessionInfo.loginTime || \"None\"}</p>\n                  <p>User: {sessionTest.sessionInfo.user?.id || \"None\"}</p>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium mb-2\">Cookie Settings</h4>\n                <div className=\"space-y-1 text-sm\">\n                  <p>Secure: <Badge variant={sessionTest.sessionInfo.cookie.secure ? \"default\" : \"secondary\"}>\n                    {sessionTest.sessionInfo.cookie.secure ? \"Yes\" : \"No\"}\n                  </Badge></p>\n                  <p>HTTP Only: <Badge variant={sessionTest.sessionInfo.cookie.httpOnly ? \"default\" : \"secondary\"}>\n                    {sessionTest.sessionInfo.cookie.httpOnly ? \"Yes\" : \"No\"}\n                  </Badge></p>\n                  <p>Max Age: {sessionTest.sessionInfo.cookie.maxAge ? `${Math.floor(sessionTest.sessionInfo.cookie.maxAge / 1000 / 60 / 60)} hours` : \"None\"}</p>\n                  <p>Same Site: {sessionTest.sessionInfo.cookie.sameSite || \"None\"}</p>\n                  <p>Domain: {sessionTest.sessionInfo.cookie.domain || \"Browser default\"}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4052},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"@shared/schema\";\nimport { useEffect, useState } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SessionData {\n  user: User;\n  timestamp: number;\n  expiresAt: number;\n}\n\nconst SESSION_DURATION = 8 * 60 * 60 * 1000; // 8 hours in milliseconds\nconst SESSION_KEY = \"liberty_session\";\n\nexport function useAuth() {\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [sessionUser, setSessionUser] = useState<User | null>(null);\n\n  // Check localStorage session on mount\n  useEffect(() => {\n    const checkSession = () => {\n      const sessionData = localStorage.getItem(SESSION_KEY);\n      if (sessionData) {\n        try {\n          const parsed: SessionData = JSON.parse(sessionData);\n          const now = Date.now();\n          \n          if (now < parsed.expiresAt) {\n            setIsSessionValid(true);\n            setSessionUser(parsed.user);\n            console.log(\"Valid session found in localStorage:\", parsed.user.id);\n            return;\n          } else {\n            console.log(\"Session expired, clearing localStorage\");\n            localStorage.removeItem(SESSION_KEY);\n          }\n        } catch (error) {\n          console.error(\"Error parsing session data:\", error);\n          localStorage.removeItem(SESSION_KEY);\n        }\n      }\n      setIsSessionValid(false);\n      setSessionUser(null);\n    };\n\n    checkSession();\n    \n    // Check session validity every minute\n    const interval = setInterval(checkSession, 60000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const { data: user, isLoading, refetch } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: true,\n    staleTime: 1 * 60 * 1000, // 1 minute for more responsive auth\n    gcTime: 5 * 60 * 1000, // 5 minutes\n    enabled: !isSessionValid, // Skip server validation if we have valid local session\n  });\n\n  // Update localStorage when server auth succeeds\n  useEffect(() => {\n    if (user) {\n      const sessionData: SessionData = {\n        user,\n        timestamp: Date.now(),\n        expiresAt: Date.now() + SESSION_DURATION\n      };\n      localStorage.setItem(SESSION_KEY, JSON.stringify(sessionData));\n      setIsSessionValid(true);\n      setSessionUser(user);\n      console.log(\"Session stored in localStorage:\", user.id);\n    } else if (!isLoading && !user) {\n      // Server returned 401, clear localStorage\n      localStorage.removeItem(SESSION_KEY);\n      setIsSessionValid(false);\n      setSessionUser(null);\n    }\n  }, [user, isLoading]);\n\n  const logout = async () => {\n    console.log(\"Clearing session from localStorage\");\n    \n    // Clear server session\n    try {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n      console.log(\"Server logout successful, clearing client state\");\n    } catch (error) {\n      console.error(\"Server logout failed:\", error);\n    }\n    \n    // Clear client state\n    localStorage.removeItem(SESSION_KEY);\n    setIsSessionValid(false);\n    setSessionUser(null);\n    \n    // Redirect to login page\n    window.location.replace(\"/login\");\n  };\n\n  const finalUser = user || sessionUser;\n  const finalLoading = isLoading;\n\n  console.log(\"Auth state:\", { \n    user: finalUser?.id, \n    isLoading: finalLoading, \n    isAuthenticated: !!finalUser,\n    sessionValid: isSessionValid\n  });\n\n  return {\n    user: finalUser,\n    isLoading: finalLoading,\n    isAuthenticated: !!finalUser,\n    refetch,\n    logout,\n  };\n}\n","size_bytes":3540},"client/src/hooks/useAuthRedirect.ts":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"./useAuth\";\nimport { useLocation } from \"wouter\";\n\nexport function useAuthRedirect() {\n  const { isAuthenticated, user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Only handle redirection after auth state is stable\n    if (!isLoading && isAuthenticated && user) {\n      console.log(\"Auth redirect check:\", { isAuthenticated, userRole: user?.role });\n      \n      // If authenticated and we're on login page, redirect to dashboard\n      if (window.location.pathname === \"/login\") {\n        console.log(\"Redirecting authenticated user from login page to dashboard\");\n        setLocation(\"/\");\n      }\n      \n      // Auto-open session modal for cashiers on dashboard\n      if (user.role === \"cashier\" && window.location.pathname === \"/\") {\n        console.log(\"Opening session modal for cashier\");\n        // Trigger session modal opening after a brief delay\n        setTimeout(() => {\n          const event = new CustomEvent(\"openSessionModal\");\n          window.dispatchEvent(event);\n        }, 1000);\n      }\n    }\n  }, [isAuthenticated, user, isLoading, setLocation]);\n\n  return { isAuthenticated, user, isLoading };\n}","size_bytes":1230},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/lib/currency.ts":{"content":"// XOF currency formatting utilities\nexport function formatCurrency(amount: number | string): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  \n  return new Intl.NumberFormat('pt-PT', {\n    style: 'currency',\n    currency: 'XOF',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(numAmount);\n}\n\nexport function formatCurrencyCompact(amount: number | string): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  \n  if (numAmount >= 1000000) {\n    return `${(numAmount / 1000000).toFixed(1)}M XOF`;\n  } else if (numAmount >= 1000) {\n    return `${(numAmount / 1000).toFixed(1)}K XOF`;\n  }\n  \n  return `${numAmount.toLocaleString('pt-PT')} XOF`;\n}\n\nexport function parseCurrency(value: string): number {\n  return parseFloat(value.replace(/[^\\d.-]/g, ''));\n}","size_bytes":853},"client/src/lib/i18n.ts":{"content":"// Portuguese language constants\nexport const PT = {\n  // Roles\n  roles: {\n    cashier: \"Caixa\",\n    server: \"Empregado\",\n    manager: \"Gerente\",\n  },\n\n  // Navigation\n  nav: {\n    dashboard: \"Painel\",\n    orders: \"Pedidos\",\n    tables: \"Mesas\",\n    credits: \"Créditos\",\n    logout: \"Sair\",\n  },\n\n  // Common\n  common: {\n    login: \"Entrar\",\n    logout: \"Sair\",\n    save: \"Salvar\",\n    cancel: \"Cancelar\",\n    delete: \"Excluir\",\n    edit: \"Editar\",\n    add: \"Adicionar\",\n    view: \"Ver\",\n    close: \"Fechar\",\n    confirm: \"Confirmar\",\n    loading: \"Carregando...\",\n    error: \"Erro\",\n    success: \"Sucesso\",\n    warning: \"Aviso\",\n    info: \"Informação\",\n    yes: \"Sim\",\n    no: \"Não\",\n    total: \"Total\",\n    subtotal: \"Subtotal\",\n    quantity: \"Quantidade\",\n    price: \"Preço\",\n    date: \"Data\",\n    time: \"Hora\",\n    status: \"Status\",\n    actions: \"Ações\",\n    search: \"Pesquisar\",\n    filter: \"Filtrar\",\n  },\n\n  // Dashboard\n  dashboard: {\n    title: \"Painel de Controle\",\n    welcome: \"Bem-vindo\",\n    todaySales: \"Vendas de Hoje\",\n    openOrders: \"Pedidos Abertos\",\n    activeCredits: \"Créditos Ativos\",\n    occupiedTables: \"Mesas Ocupadas\",\n    sessionActive: \"Sessão Ativa\",\n    sessionClosed: \"Sessão Fechada\",\n    totalTransactions: \"Transações Totais\",\n    averageOrder: \"Pedido Médio\",\n    stats: \"Estatísticas\",\n    recentOrders: \"Pedidos Recentes\",\n    tableOverview: \"Visão Geral das Mesas\",\n  },\n\n  // Orders\n  orders: {\n    title: \"Gestão de Pedidos\",\n    newOrder: \"Novo Pedido\",\n    orderNumber: \"Pedido Nº\",\n    table: \"Mesa\",\n    server: \"Empregado\",\n    items: \"Items\",\n    total: \"Total\",\n    status: \"Status\",\n    pending: \"Pendente\",\n    preparing: \"Preparando\",\n    ready: \"Pronto\",\n    completed: \"Concluído\",\n    cancelled: \"Cancelado\",\n    addItem: \"Adicionar Item\",\n    removeItem: \"Remover Item\",\n    payment: \"Pagamento\",\n    payOrder: \"Pagar Pedido\",\n    printReceipt: \"Imprimir Recibo\",\n  },\n\n  // Tables\n  tables: {\n    title: \"Gestão de Mesas\",\n    table: \"Mesa\",\n    capacity: \"Capacidade\",\n    status: \"Status\",\n    currentOrder: \"Pedido Atual\",\n    free: \"Livre\",\n    occupied: \"Ocupada\",\n    reserved: \"Reservada\",\n    assign: \"Atribuir\",\n    free_table: \"Libertar Mesa\",\n    reserve: \"Reservar\",\n  },\n\n  // Credits\n  credits: {\n    title: \"Gestão de Créditos\",\n    client: \"Cliente\",\n    balance: \"Saldo\",\n    lastTransaction: \"Última Transação\",\n    addCredit: \"Adicionar Crédito\",\n    useCredit: \"Usar Crédito\",\n    paymentHistory: \"Histórico de Pagamentos\",\n    creditLimit: \"Limite de Crédito\",\n    available: \"Disponível\",\n    used: \"Utilizado\",\n  },\n\n  // Payment\n  payment: {\n    title: \"Pagamento\",\n    method: \"Método de Pagamento\",\n    cash: \"Dinheiro\",\n    card: \"Cartão\",\n    credit: \"Crédito\",\n    partial: \"Parcial\",\n    amount: \"Valor\",\n    received: \"Recebido\",\n    change: \"Troco\",\n    processPayment: \"Processar Pagamento\",\n    paymentComplete: \"Pagamento Completo\",\n    paymentFailed: \"Pagamento Falhou\",\n  },\n\n  // Session\n  session: {\n    title: \"Gestão de Sessão\",\n    openSession: \"Abrir Sessão\",\n    closeSession: \"Fechar Sessão\",\n    sessionInfo: \"Informações da Sessão\",\n    startTime: \"Hora de Início\",\n    endTime: \"Hora de Fim\",\n    shift: \"Turno\",\n    morning: \"Manhã\",\n    evening: \"Tarde\",\n    cashier: \"Caixa\",\n    initialAmount: \"Valor Inicial\",\n    finalAmount: \"Valor Final\",\n    totalSales: \"Vendas Totais\",\n    sessionSummary: \"Resumo da Sessão\",\n  },\n\n  // Products\n  products: {\n    title: \"Produtos\",\n    name: \"Nome\",\n    description: \"Descrição\",\n    category: \"Categoria\",\n    price: \"Preço\",\n    stock: \"Stock\",\n    available: \"Disponível\",\n    outOfStock: \"Fora de Stock\",\n    lowStock: \"Stock Baixo\",\n    addProduct: \"Adicionar Produto\",\n    editProduct: \"Editar Produto\",\n    deleteProduct: \"Excluir Produto\",\n    searchProducts: \"Buscar produtos...\",\n    filterByCategory: \"Filtrar por categoria\",\n    allCategories: \"Todas as categorias\",\n    noProductsFound: \"Nenhum produto encontrado\",\n    clearFilters: \"Limpar filtros\",\n    inStock: \"em estoque\",\n    productsAvailable: \"produtos\",\n  },\n\n  // Time\n  time: {\n    today: \"Hoje\",\n    yesterday: \"Ontem\",\n    thisWeek: \"Esta Semana\",\n    thisMonth: \"Este Mês\",\n    morning: \"Manhã\",\n    afternoon: \"Tarde\",\n    evening: \"Noite\",\n    night: \"Madrugada\",\n  },\n\n  // Manager functions\n  manager: {\n    dashboard: \"Painel de Gestão\",\n    userManagement: \"Gestão de Utilizadores\",\n    inventoryManagement: \"Gestão de Inventário\",\n    salesReports: \"Relatórios de Vendas\",\n    statistics: \"Estatísticas\",\n    sessionDetails: \"Detalhes da Sessão\",\n    downloadReport: \"Descarregar Relatório\",\n    stockAlert: \"Alerta de Stock\",\n    lowStockProducts: \"Produtos com Stock Baixo\",\n    creditDetails: \"Detalhes de Crédito\",\n    paymentHistory: \"Histórico de Pagamentos\",\n    sessionSales: \"Vendas por Sessão\",\n    paymentMethods: \"Métodos de Pagamento\",\n    totalCash: \"Total Dinheiro\",\n    totalCard: \"Total Cartão\",\n    totalCredit: \"Total Crédito\",\n    exportData: \"Exportar Dados\",\n  },\n\n  // Messages\n  messages: {\n    loginSuccess: \"Login realizado com sucesso\",\n    loginFailed: \"Falha no login\",\n    sessionOpened: \"Sessão aberta com sucesso\",\n    sessionClosed: \"Sessão fechada com sucesso\",\n    orderCreated: \"Pedido criado com sucesso\",\n    orderUpdated: \"Pedido atualizado com sucesso\",\n    paymentProcessed: \"Pagamento processado com sucesso\",\n    errorOccurred: \"Ocorreu um erro\",\n    unauthorized: \"Não autorizado\",\n    notFound: \"Não encontrado\",\n    serverError: \"Erro do servidor\",\n    networkError: \"Erro de rede\",\n    confirmDelete: \"Tem certeza que deseja excluir?\",\n    confirmLogout: \"Tem certeza que deseja sair?\",\n    confirmCloseSession: \"Tem certeza que deseja fechar a sessão?\",\n  },\n\n  // Errors\n  errors: {\n    required: \"Este campo é obrigatório\",\n    invalidEmail: \"Email inválido\",\n    invalidPassword: \"Senha inválida\",\n    passwordTooShort: \"Senha muito curta\",\n    passwordMismatch: \"Senhas não coincidem\",\n    invalidNumber: \"Número inválido\",\n    minimumAmount: \"Valor mínimo não atingido\",\n    maximumAmount: \"Valor máximo excedido\",\n    insufficientStock: \"Stock insuficiente\",\n    insufficientCredit: \"Crédito insuficiente\",\n    sessionNotActive: \"Sessão não ativa\",\n    tableNotAvailable: \"Mesa não disponível\",\n    orderNotFound: \"Pedido não encontrado\",\n    clientNotFound: \"Cliente não encontrado\",\n    productNotFound: \"Produto não encontrado\",\n  },\n};","size_bytes":6513},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\n// Get the base URL based on environment\nconst getBaseUrl = () => {\n  if (typeof window === 'undefined') return ''; // Server-side rendering\n  \n  // In development and production, use the current host since we're serving from the same port\n  return window.location.origin;\n};\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const baseUrl = getBaseUrl();\n  const fullUrl = url.startsWith('http') ? url : `${baseUrl}${url}`;\n  \n  const res = await fetch(fullUrl, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\", // Include cookies for cross-origin requests\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const baseUrl = getBaseUrl();\n    const url = queryKey.join(\"/\") as string;\n    const fullUrl = url.startsWith('http') ? url : `${baseUrl}${url}`;\n    \n    const res = await fetch(fullUrl, {\n      credentials: \"include\", // Include cookies for cross-origin requests\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"returnNull\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n      gcTime: 0, // Don't cache in deployment scenarios\n    },\n    mutations: {\n      retry: false,\n      onError: (error) => {\n        console.error(\"Mutation error:\", error);\n      },\n    },\n  },\n});\n","size_bytes":2140},"client/src/lib/thermalPrinter.ts":{"content":"// Thermal Printer Integration for EPSON Printers\n// Supports Web Serial API and fallback methods\n\nexport interface PrintReceipt {\n  orderNumber: string;\n  tableName: string;\n  clientName?: string;\n  items: Array<{\n    name: string;\n    quantity: number;\n    price: string;\n    total: string;\n  }>;\n  subtotal: string;\n  total: string;\n  paymentMethod: string;\n  receivedAmount?: string;\n  change?: string;\n  cashier: string;\n  timestamp: string;\n}\n\nclass ThermalPrinter {\n  private port: SerialPort | null = null;\n  private writer: WritableStreamDefaultWriter | null = null;\n\n  // ESC/POS Commands for EPSON thermal printers\n  private readonly ESC = '\\x1B';\n  private readonly GS = '\\x1D';\n  private readonly COMMANDS = {\n    INIT: '\\x1B\\x40',          // Initialize printer\n    ALIGN_CENTER: '\\x1B\\x61\\x01', // Center alignment\n    ALIGN_LEFT: '\\x1B\\x61\\x00',   // Left alignment\n    BOLD_ON: '\\x1B\\x45\\x01',      // Bold on\n    BOLD_OFF: '\\x1B\\x45\\x00',     // Bold off\n    SIZE_NORMAL: '\\x1D\\x21\\x00',  // Normal size\n    SIZE_DOUBLE: '\\x1D\\x21\\x11',  // Double size\n    CUT_PAPER: '\\x1D\\x56\\x41',    // Cut paper\n    LINE_FEED: '\\x0A',            // Line feed\n    CARRIAGE_RETURN: '\\x0D',      // Carriage return\n  };\n\n  async connect(): Promise<boolean> {\n    if (!navigator.serial) {\n      console.warn('Web Serial API not supported');\n      return false;\n    }\n\n    try {\n      // Request a port\n      this.port = await navigator.serial.requestPort({\n        filters: [\n          { usbVendorId: 0x04b8 }, // EPSON\n          { usbVendorId: 0x0483 }, // Generic thermal printer\n        ]\n      });\n\n      // Open the port\n      await this.port.open({ \n        baudRate: 9600,\n        dataBits: 8,\n        parity: 'none',\n        stopBits: 1,\n        flowControl: 'none'\n      });\n\n      this.writer = this.port.writable?.getWriter() || null;\n      return true;\n    } catch (error) {\n      console.error('Failed to connect to printer:', error);\n      return false;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.writer) {\n      await this.writer.close();\n      this.writer = null;\n    }\n    if (this.port) {\n      await this.port.close();\n      this.port = null;\n    }\n  }\n\n  private async writeCommand(command: string): Promise<void> {\n    if (!this.writer) {\n      throw new Error('Printer not connected');\n    }\n    const encoder = new TextEncoder();\n    await this.writer.write(encoder.encode(command));\n  }\n\n  private async writeText(text: string): Promise<void> {\n    if (!this.writer) {\n      throw new Error('Printer not connected');\n    }\n    const encoder = new TextEncoder();\n    await this.writer.write(encoder.encode(text));\n  }\n\n  async printReceipt(receipt: PrintReceipt): Promise<boolean> {\n    try {\n      if (!this.writer) {\n        // Fallback to browser print if no thermal printer\n        return this.fallbackPrint(receipt);\n      }\n\n      // Initialize printer\n      await this.writeCommand(this.COMMANDS.INIT);\n      \n      // Header\n      await this.writeCommand(this.COMMANDS.ALIGN_CENTER);\n      await this.writeCommand(this.COMMANDS.SIZE_DOUBLE);\n      await this.writeCommand(this.COMMANDS.BOLD_ON);\n      await this.writeText('LIBERTY\\n');\n      await this.writeText('Cafe - Bar - Lounge\\n');\n      await this.writeCommand(this.COMMANDS.BOLD_OFF);\n      await this.writeCommand(this.COMMANDS.SIZE_NORMAL);\n      await this.writeText('================================\\n');\n      \n      // Receipt details\n      await this.writeCommand(this.COMMANDS.ALIGN_LEFT);\n      await this.writeText(`Recibo: ${receipt.orderNumber}\\n`);\n      await this.writeText(`Mesa: ${receipt.tableName}\\n`);\n      if (receipt.clientName) {\n        await this.writeText(`Cliente: ${receipt.clientName}\\n`);\n      }\n      await this.writeText(`Data: ${receipt.timestamp}\\n`);\n      await this.writeText(`Caixa: ${receipt.cashier}\\n`);\n      await this.writeText('================================\\n');\n      \n      // Items\n      for (const item of receipt.items) {\n        await this.writeText(`${item.name}\\n`);\n        await this.writeText(`  ${item.quantity}x ${item.price} = ${item.total} F CFA\\n`);\n      }\n      \n      await this.writeText('--------------------------------\\n');\n      await this.writeText(`Subtotal: ${receipt.subtotal} F CFA\\n`);\n      await this.writeCommand(this.COMMANDS.BOLD_ON);\n      await this.writeText(`TOTAL: ${receipt.total} F CFA\\n`);\n      await this.writeCommand(this.COMMANDS.BOLD_OFF);\n      \n      // Payment details\n      await this.writeText('--------------------------------\\n');\n      await this.writeText(`Pagamento: ${receipt.paymentMethod}\\n`);\n      if (receipt.receivedAmount) {\n        await this.writeText(`Recebido: ${receipt.receivedAmount} F CFA\\n`);\n      }\n      if (receipt.change && parseFloat(receipt.change) > 0) {\n        await this.writeText(`Troco: ${receipt.change} F CFA\\n`);\n      }\n      \n      // Footer\n      await this.writeText('\\n');\n      await this.writeCommand(this.COMMANDS.ALIGN_CENTER);\n      await this.writeText('Obrigado pela preferencia!\\n');\n      await this.writeText('Volte sempre!\\n');\n      await this.writeText('\\n');\n      await this.writeCommand(this.COMMANDS.BOLD_ON);\n      await this.writeText('Liberty, THE PLACE TO BE!!!\\n');\n      await this.writeCommand(this.COMMANDS.BOLD_OFF);\n      await this.writeText('\\n');\n      \n      // Cut paper\n      await this.writeCommand(this.COMMANDS.CUT_PAPER);\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to print receipt:', error);\n      return this.fallbackPrint(receipt);\n    }\n  }\n\n  private fallbackPrint(receipt: PrintReceipt): boolean {\n    try {\n      // Create receipt HTML for browser printing\n      const receiptHtml = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <title>Recibo - ${receipt.orderNumber}</title>\n          <style>\n            body { \n              font-family: 'Courier New', monospace; \n              font-size: 12px; \n              width: 58mm; \n              margin: 0; \n              padding: 5mm;\n            }\n            .center { text-align: center; }\n            .bold { font-weight: bold; }\n            .large { font-size: 16px; }\n            .line { border-bottom: 1px dashed #000; margin: 5px 0; }\n            .logo { \n              width: 40mm; \n              height: auto; \n              margin: 0 auto 5px; \n              display: block; \n            }\n            @media print {\n              body { margin: 0; padding: 0; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"center\">\n            <img src=\"/liberty-logo.jpg\" alt=\"LIBERTY Logo\" class=\"logo\" />\n          </div>\n          <div class=\"center bold large\">LIBERTY</div>\n          <div class=\"center\">Cafe - Bar - Lounge</div>\n          <div class=\"line\"></div>\n          \n          <div>Recibo: ${receipt.orderNumber}</div>\n          <div>Mesa: ${receipt.tableName}</div>\n          ${receipt.clientName ? `<div>Cliente: ${receipt.clientName}</div>` : ''}\n          <div>Data: ${receipt.timestamp}</div>\n          <div>Caixa: ${receipt.cashier}</div>\n          <div class=\"line\"></div>\n          \n          ${receipt.items.map(item => `\n            <div>${item.name}</div>\n            <div>&nbsp;&nbsp;${item.quantity}x ${item.price} = ${item.total} F CFA</div>\n          `).join('')}\n          \n          <div class=\"line\"></div>\n          <div>Subtotal: ${receipt.subtotal} F CFA</div>\n          <div class=\"bold\">TOTAL: ${receipt.total} F CFA</div>\n          <div class=\"line\"></div>\n          \n          <div>Pagamento: ${receipt.paymentMethod}</div>\n          ${receipt.receivedAmount ? `<div>Recebido: ${receipt.receivedAmount} F CFA</div>` : ''}\n          ${receipt.change && parseFloat(receipt.change) > 0 ? `<div>Troco: ${receipt.change} F CFA</div>` : ''}\n          \n          <br>\n          <div class=\"center\">Obrigado pela preferencia!</div>\n          <div class=\"center\">Volte sempre!</div>\n          <br>\n          <div class=\"center bold\">Liberty, THE PLACE TO BE!!!</div>\n        </body>\n        </html>\n      `;\n\n      // Open in new window and print\n      const printWindow = window.open('', '_blank');\n      if (printWindow) {\n        printWindow.document.write(receiptHtml);\n        printWindow.document.close();\n        printWindow.focus();\n        setTimeout(() => {\n          printWindow.print();\n          printWindow.close();\n        }, 250);\n        return true;\n      }\n      \n      // Fallback: download as text file\n      this.downloadReceiptAsText(receipt);\n      return true;\n    } catch (error) {\n      console.error('Fallback print failed:', error);\n      return false;\n    }\n  }\n\n  private downloadReceiptAsText(receipt: PrintReceipt): void {\n    const receiptText = `\nLIBERTY\nCafe - Bar - Lounge\n================================\n\nRecibo: ${receipt.orderNumber}\nMesa: ${receipt.tableName}\n${receipt.clientName ? `Cliente: ${receipt.clientName}\\n` : ''}Data: ${receipt.timestamp}\nCaixa: ${receipt.cashier}\n================================\n\n${receipt.items.map(item => \n  `${item.name}\\n  ${item.quantity}x ${item.price} = ${item.total} F CFA`\n).join('\\n')}\n\n--------------------------------\nSubtotal: ${receipt.subtotal} F CFA\nTOTAL: ${receipt.total} F CFA\n--------------------------------\n\nPagamento: ${receipt.paymentMethod}\n${receipt.receivedAmount ? `Recebido: ${receipt.receivedAmount} F CFA\\n` : ''}${receipt.change && parseFloat(receipt.change) > 0 ? `Troco: ${receipt.change} F CFA\\n` : ''}\n\nObrigado pela preferencia!\nVolte sempre!\n\nLiberty, THE PLACE TO BE!!!\n    `;\n\n    const blob = new Blob([receiptText], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `recibo-${receipt.orderNumber}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  async testPrinter(): Promise<boolean> {\n    try {\n      if (!this.writer) {\n        console.log('Testing printer connection...');\n        const connected = await this.connect();\n        if (!connected) {\n          return false;\n        }\n      }\n\n      await this.writeCommand(this.COMMANDS.INIT);\n      await this.writeCommand(this.COMMANDS.ALIGN_CENTER);\n      await this.writeText('TESTE DE IMPRESSORA\\n');\n      await this.writeText('LIBERTY - Cafe Bar Lounge\\n');\n      await this.writeText('Impressora funcionando!\\n\\n');\n      await this.writeCommand(this.COMMANDS.CUT_PAPER);\n      \n      return true;\n    } catch (error) {\n      console.error('Printer test failed:', error);\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const thermalPrinter = new ThermalPrinter();\n\n// Helper function to format receipt data from order\nexport function formatReceiptFromOrder(orderData: any, paymentData: any, cashierName: string): PrintReceipt {\n  const now = new Date();\n  return {\n    orderNumber: orderData.id?.toString() || 'N/A',\n    tableName: orderData.tableName || 'N/A',\n    clientName: orderData.clientName,\n    items: orderData.items?.map((item: any) => ({\n      name: item.productName || item.name,\n      quantity: item.quantity,\n      price: parseFloat(item.price || '0').toFixed(2),\n      total: (item.quantity * parseFloat(item.price || '0')).toFixed(2),\n    })) || [],\n    subtotal: orderData.total || '0.00',\n    total: paymentData.amount || orderData.total || '0.00',\n    paymentMethod: paymentData.method === 'cash' ? 'Dinheiro' : \n                   paymentData.method === 'card' ? 'Cartão' :\n                   paymentData.method === 'mobile' ? 'Mobile Money' : 'Crédito',\n    receivedAmount: paymentData.receivedAmount,\n    change: paymentData.changeAmount,\n    cashier: cashierName,\n    timestamp: now.toLocaleString('pt-PT'),\n  };\n}","size_bytes":11778},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Credits.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { NewClientModal } from \"@/components/modals/NewClientModal\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { CreditClient } from \"@shared/schema\";\nimport { Plus, Search, DollarSign, Calendar, User, CreditCard, Banknote, Smartphone, Minus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { PT } from \"@/lib/i18n\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Credits() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedClient, setSelectedClient] = useState<CreditClient | null>(null);\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState<\"cash\" | \"mobile_money\">(\"cash\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [showNewClientModal, setShowNewClientModal] = useState(false);\n  const { toast } = useToast();\n\n  const { data: creditClients, isLoading } = useQuery<CreditClient[]>({\n    queryKey: [\"/api/credit-clients\"],\n    refetchInterval: 10000,\n  });\n\n  // Ensure creditClients is always an array\n  const clientsList = creditClients || [];\n\n  const filteredClients = clientsList.filter(client =>\n    client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    client.email?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const totalCredit = clientsList.reduce((sum, client) => sum + parseFloat(client.totalCredit), 0);\n  const activeClients = clientsList.filter(client => client.isActive && parseFloat(client.totalCredit) > 0);\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"pt-PT\");\n  };\n\n  // Credit payment mutation\n  const creditPaymentMutation = useMutation({\n    mutationFn: async (paymentData: {\n      clientId: number;\n      amount: string;\n      method: string;\n      phoneNumber?: string;\n    }) => {\n      return apiRequest(\"POST\", \"/api/credit-payments\", paymentData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso\",\n        description: \"Pagamento de crédito processado com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/credit-clients\"] });\n      handleClosePaymentModal();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao processar pagamento\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpenPaymentModal = (client: CreditClient) => {\n    setSelectedClient(client);\n    setShowPaymentModal(true);\n  };\n\n  const handleClosePaymentModal = () => {\n    setSelectedClient(null);\n    setPaymentAmount(\"\");\n    setPaymentMethod(\"cash\");\n    setPhoneNumber(\"\");\n    setShowPaymentModal(false);\n  };\n\n  const handleClientCreated = (client: CreditClient) => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/credit-clients\"] });\n    setShowNewClientModal(false);\n    toast({\n      title: \"Sucesso\",\n      description: `Cliente ${client.name} criado com sucesso`,\n    });\n  };\n\n  const handlePayment = () => {\n    if (!selectedClient || !paymentAmount) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, preencha todos os campos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const amount = parseFloat(paymentAmount);\n    const clientCredit = parseFloat(selectedClient.totalCredit);\n\n    if (amount <= 0) {\n      toast({\n        title: \"Erro\",\n        description: \"Valor deve ser maior que zero\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (amount > clientCredit) {\n      toast({\n        title: \"Erro\",\n        description: \"Valor não pode ser maior que o crédito disponível\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (paymentMethod === \"mobile_money\" && !phoneNumber) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, insira o número de telefone\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const paymentData = {\n      clientId: selectedClient.id,\n      amount: amount.toString(),\n      method: paymentMethod,\n      phoneNumber: paymentMethod === \"mobile_money\" ? phoneNumber : undefined,\n    };\n\n    creditPaymentMutation.mutate(paymentData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <h2 className=\"text-2xl font-bold text-white mb-6\">{PT.credits.title}</h2>\n        <div className=\"space-y-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-4\">\n                <div className=\"animate-pulse\">\n                  <div className=\"h-4 bg-gray-600 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-gray-600 rounded w-1/2\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl font-bold text-white\">{PT.credits.title}</h2>\n        <Button \n          onClick={() => setShowNewClientModal(true)}\n          className=\"bg-orange-500 hover:bg-orange-600 text-white\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Novo Cliente\n        </Button>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Total Créditos</p>\n                <p className=\"text-2xl font-bold text-orange-400\">{formatCurrency(totalCredit)}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-500 bg-opacity-20 rounded-full flex items-center justify-center\">\n                <DollarSign className=\"w-6 h-6 text-orange-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Clientes Ativos</p>\n                <p className=\"text-2xl font-bold text-green-400\">{activeClients.length}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-500 bg-opacity-20 rounded-full flex items-center justify-center\">\n                <User className=\"w-6 h-6 text-green-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Total Clientes</p>\n                <p className=\"text-2xl font-bold text-white\">{clientsList.length}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-500 bg-opacity-20 rounded-full flex items-center justify-center\">\n                <User className=\"w-6 h-6 text-blue-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <div className=\"mb-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            placeholder=\"Pesquisar cliente...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 bg-gray-800 border-gray-700 text-white\"\n          />\n        </div>\n      </div>\n\n      {/* Clients List */}\n      <div className=\"space-y-4\">\n        {filteredClients.length === 0 ? (\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-gray-400\">\n                {searchTerm ? \"Aucun client trouvé\" : \"Aucun client à crédit\"}\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredClients.map((client) => (\n            <Card key={client.id} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center\">\n                        <User className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-white\">{client.name}</h3>\n                        <div className=\"flex items-center space-x-4 text-sm text-gray-400\">\n                          {client.email && (\n                            <span>{client.email}</span>\n                          )}\n                          {client.phone && (\n                            <span>{client.phone}</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-6\">\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-gray-400\">Crédit actuel</p>\n                      <p className=\"text-xl font-bold text-orange-400\">{formatCurrency(client.totalCredit)}</p>\n                    </div>\n\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-gray-400\">Limite</p>\n                      <p className=\"text-sm text-white\">{formatCurrency(client.creditLimit)}</p>\n                    </div>\n\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-gray-400\">Dernière mise à jour</p>\n                      <p className=\"text-sm text-white\">{formatDate(client.updatedAt!)}</p>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge\n                        variant={client.isActive ? \"default\" : \"secondary\"}\n                        className={client.isActive ? \"bg-green-500\" : \"bg-gray-500\"}\n                      >\n                        {client.isActive ? \"Actif\" : \"Inactif\"}\n                      </Badge>\n                    </div>\n\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        className=\"bg-green-600 hover:bg-green-700 text-white\"\n                        onClick={() => handleOpenPaymentModal(client)}\n                        disabled={parseFloat(client.totalCredit) <= 0}\n                      >\n                        <Minus className=\"w-4 h-4 mr-1\" />\n                        Paiement\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                      >\n                        Historique\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Payment Modal */}\n      <Dialog open={showPaymentModal} onOpenChange={setShowPaymentModal}>\n        <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-lg font-semibold\">\n              Paiement de Crédit - {selectedClient?.name}\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            {/* Client Credit Info */}\n            <Card className=\"bg-gray-700 border-gray-600\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-400\">Crédit actuel</span>\n                  <span className=\"text-xl font-bold text-orange-400\">\n                    {selectedClient && formatCurrency(selectedClient.totalCredit)}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment Amount */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"amount\" className=\"text-sm font-medium\">\n                Montant du paiement\n              </Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                max={selectedClient?.totalCredit}\n                value={paymentAmount}\n                onChange={(e) => setPaymentAmount(e.target.value)}\n                placeholder=\"0.00\"\n                className=\"bg-gray-700 border-gray-600 text-white\"\n              />\n              <div className=\"flex justify-between text-sm text-gray-400\">\n                <span>Max: {selectedClient && formatCurrency(selectedClient.totalCredit)}</span>\n                <Button\n                  type=\"button\"\n                  variant=\"link\"\n                  className=\"p-0 h-auto text-blue-400 hover:text-blue-300\"\n                  onClick={() => setPaymentAmount(selectedClient?.totalCredit || \"0\")}\n                >\n                  Montant total\n                </Button>\n              </div>\n            </div>\n\n            {/* Payment Method Selection */}\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium\">Méthode de paiement</Label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button\n                  onClick={() => setPaymentMethod(\"cash\")}\n                  variant={paymentMethod === \"cash\" ? \"default\" : \"outline\"}\n                  className={`py-6 flex-col ${\n                    paymentMethod === \"cash\"\n                      ? \"bg-green-600 hover:bg-green-700\"\n                      : \"border-gray-600 hover:bg-gray-700\"\n                  }`}\n                >\n                  <Banknote className=\"w-5 h-5 mb-1\" />\n                  <span className=\"text-sm\">Espèces</span>\n                </Button>\n                <Button\n                  onClick={() => setPaymentMethod(\"mobile_money\")}\n                  variant={paymentMethod === \"mobile_money\" ? \"default\" : \"outline\"}\n                  className={`py-6 flex-col ${\n                    paymentMethod === \"mobile_money\"\n                      ? \"bg-blue-600 hover:bg-blue-700\"\n                      : \"border-gray-600 hover:bg-gray-700\"\n                  }`}\n                >\n                  <Smartphone className=\"w-5 h-5 mb-1\" />\n                  <span className=\"text-sm\">Mobile Money</span>\n                </Button>\n              </div>\n            </div>\n\n            {/* Mobile Money Phone Number */}\n            {paymentMethod === \"mobile_money\" && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\" className=\"text-sm font-medium\">\n                  Numéro de téléphone\n                </Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={phoneNumber}\n                  onChange={(e) => setPhoneNumber(e.target.value)}\n                  placeholder=\"+XXX XXX XXX XXX\"\n                  className=\"bg-gray-700 border-gray-600 text-white\"\n                />\n              </div>\n            )}\n\n            {/* New Credit Balance Preview */}\n            {paymentAmount && (\n              <Card className=\"bg-gray-700 border-gray-600\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-400\">Nouveau solde</span>\n                    <span className=\"text-lg font-bold text-green-400\">\n                      {selectedClient && formatCurrency(\n                        (parseFloat(selectedClient.totalCredit) - parseFloat(paymentAmount || \"0\")).toFixed(2)\n                      )}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={handleClosePaymentModal}\n                variant=\"outline\"\n                className=\"flex-1 border-gray-600 hover:bg-gray-700\"\n              >\n                Annuler\n              </Button>\n              <Button\n                onClick={handlePayment}\n                disabled={creditPaymentMutation.isPending || !paymentAmount || parseFloat(paymentAmount) <= 0}\n                className=\"flex-1 bg-green-600 hover:bg-green-700\"\n              >\n                {creditPaymentMutation.isPending ? \"Traitement...\" : \"Confirmer Paiement\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* New Client Modal */}\n      <NewClientModal\n        open={showNewClientModal}\n        onOpenChange={setShowNewClientModal}\n        onClientCreated={handleClientCreated}\n      />\n    </div>\n  );\n}\n","size_bytes":17893},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useBarStore } from \"@/store/useBarStore\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatsCards } from \"@/components/dashboard/StatsCards\";\nimport { OrdersPanel } from \"@/components/dashboard/OrdersPanel\";\nimport { TablesOverview } from \"@/components/dashboard/TablesOverview\";\nimport { CreditClientsTable } from \"@/components/dashboard/CreditClientsTable\";\nimport { SessionControls } from \"@/components/dashboard/SessionControls\";\nimport { StockPanel } from \"@/components/dashboard/StockPanel\";\nimport { RefreshCw } from \"lucide-react\";\nimport { SessionStats } from \"@shared/schema\";\nimport { PT } from \"@/lib/i18n\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const { activeSession, setSessionStats } = useBarStore();\n\n  const { data: sessionStats, refetch } = useQuery<SessionStats>({\n    queryKey: [\"/api/sessions\", activeSession?.id, \"stats\"],\n    enabled: !!activeSession,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  useEffect(() => {\n    if (sessionStats) {\n      setSessionStats(sessionStats);\n    }\n  }, [sessionStats, setSessionStats]);\n\n  const handleRefresh = () => {\n    refetch();\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Dashboard Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl font-bold text-white\">\n          {PT.dashboard.title} - {user?.role === \"cashier\" ? PT.roles.cashier : user?.role === \"server\" ? PT.roles.server : PT.roles.manager}\n        </h2>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-sm text-gray-400\">\n            Última atualização: {new Date().toLocaleTimeString(\"pt-PT\", { hour: \"2-digit\", minute: \"2-digit\" })}\n          </div>\n          <Button\n            onClick={handleRefresh}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Atualizar\n          </Button>\n        </div>\n      </div>\n\n      {/* Session Controls */}\n      <SessionControls />\n\n      {/* Stats Cards */}\n      <StatsCards />\n\n      {/* Three Column Layout for Cashiers */}\n      {user?.role === \"cashier\" ? (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Orders Panel */}\n          <OrdersPanel />\n\n          {/* Tables Overview */}\n          <TablesOverview />\n\n          {/* Stock Panel for Cashiers */}\n          <StockPanel />\n        </div>\n      ) : (\n        /* Two Column Layout for Servers */\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Orders Panel */}\n          <OrdersPanel />\n\n          {/* Tables Overview */}\n          <TablesOverview />\n        </div>\n      )}\n\n      {/* Credits Section */}\n      <div className=\"mt-6\">\n        <CreditClientsTable />\n      </div>\n    </div>\n  );\n}\n","size_bytes":2978},"client/src/pages/Inventory.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Package, \n  AlertTriangle,\n  Image as ImageIcon,\n  Search,\n  Filter\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Product, Category } from \"@shared/schema\";\n\nexport default function Inventory() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showCategoryModal, setShowCategoryModal] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [newProduct, setNewProduct] = useState({\n    name: \"\",\n    description: \"\",\n    categoryId: \"\",\n    price: \"\",\n    stock: \"\",\n    minStock: \"\",\n    maxStock: \"\",\n  });\n  const [newCategory, setNewCategory] = useState({\n    name: \"\",\n    description: \"\",\n  });\n  const { toast } = useToast();\n\n  const { data: products = [], isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    refetchInterval: 5000,\n    staleTime: 0, // Data is always stale, always refetch\n    cacheTime: 0, // Don't cache data\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    staleTime: 0,\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      return apiRequest(\"POST\", \"/api/products\", productData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Succès\",\n        description: \"Produit créé avec succès\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/products\"] });\n      handleCloseModal();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la création du produit\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      return apiRequest(\"PUT\", `/api/products/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Succès\",\n        description: \"Produit mis à jour avec succès\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/products\"] });\n      handleCloseModal();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la mise à jour du produit\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return apiRequest(\"DELETE\", `/api/products/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Succès\",\n        description: \"Produit supprimé avec succès\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/products\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la suppression du produit\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (categoryData: any) => {\n      return apiRequest(\"POST\", \"/api/categories\", categoryData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Succès\",\n        description: \"Catégorie créée avec succès\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/categories\"] });\n      handleCloseCategoryModal();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la création de la catégorie\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      return apiRequest(\"PUT\", `/api/categories/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Succès\",\n        description: \"Catégorie mise à jour avec succès\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/categories\"] });\n      handleCloseCategoryModal();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la mise à jour de la catégorie\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || product.categoryId.toString() === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const lowStockProducts = products.filter(product => \n    product.stock !== null && product.minStock !== null && product.stock <= product.minStock\n  );\n\n  const handleCloseModal = () => {\n    setShowAddModal(false);\n    setEditingProduct(null);\n    setNewProduct({\n      name: \"\",\n      description: \"\",\n      categoryId: \"\",\n      price: \"\",\n      stock: \"\",\n      minStock: \"\",\n      maxStock: \"\",\n    });\n  };\n\n  const handleCloseCategoryModal = () => {\n    setShowCategoryModal(false);\n    setEditingCategory(null);\n    setNewCategory({\n      name: \"\",\n      description: \"\",\n    });\n  };\n\n  const handleSubmit = () => {\n    if (!newProduct.name || !newProduct.categoryId || !newProduct.price) {\n      toast({\n        title: \"Erreur\",\n        description: \"Veuillez remplir tous les champs obligatoires\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const productData = {\n      name: newProduct.name,\n      description: newProduct.description || \"\",\n      categoryId: parseInt(newProduct.categoryId),\n      price: newProduct.price, // Garder comme chaîne pour le schéma decimal\n      stockQuantity: parseInt(newProduct.stock || \"0\"),\n      minStockLevel: parseInt(newProduct.minStock || \"0\"),\n      imageUrl: null, // Pour l'instant, pas de support d'image\n      isActive: true\n    };\n\n    if (editingProduct) {\n      updateProductMutation.mutate({ id: editingProduct.id, data: productData });\n    } else {\n      createProductMutation.mutate(productData);\n    }\n  };\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    setNewProduct({\n      name: product.name,\n      description: product.description || \"\",\n      categoryId: product.categoryId.toString(),\n      price: product.price,\n      stock: product.stock?.toString() || \"\",\n      minStock: product.minStock?.toString() || \"\",\n      maxStock: product.maxStock?.toString() || \"\",\n    });\n    setShowAddModal(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Êtes-vous sûr de vouloir supprimer ce produit ?\")) {\n      deleteProductMutation.mutate(id);\n    }\n  };\n\n  const handleSubmitCategory = () => {\n    if (!newCategory.name) {\n      toast({\n        title: \"Erreur\",\n        description: \"Veuillez saisir un nom pour la catégorie\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const categoryData = {\n      name: newCategory.name,\n      description: newCategory.description || \"\",\n    };\n\n    if (editingCategory) {\n      updateCategoryMutation.mutate({ id: editingCategory.id, data: categoryData });\n    } else {\n      createCategoryMutation.mutate(categoryData);\n    }\n  };\n\n  const handleEditCategory = (category: Category) => {\n    setEditingCategory(category);\n    setNewCategory({\n      name: category.name,\n      description: category.description || \"\",\n    });\n    setShowCategoryModal(true);\n  };\n\n  const getStockStatus = (product: Product) => {\n    if (product.stock === null) return { status: \"unknown\", color: \"bg-gray-500\" };\n    if (product.minStock !== null && product.stock <= product.minStock) return { status: \"low\", color: \"bg-red-500\" };\n    if (product.maxStock !== null && product.stock >= product.maxStock * 0.8) return { status: \"high\", color: \"bg-green-500\" };\n    return { status: \"medium\", color: \"bg-orange-500\" };\n  };\n\n  if (productsLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <div key={i} className=\"h-32 bg-gray-700 rounded-lg\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-white\">Gestion du Stock</h1>\n          <p className=\"text-gray-400 mt-1\">Gérez vos produits et surveillez votre inventaire</p>\n        </div>\n        <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-green-600 hover:bg-green-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nouveau Produit\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingProduct ? \"Modifier le produit\" : \"Nouveau produit\"}\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Nom du produit *</Label>\n                  <Input\n                    id=\"name\"\n                    value={newProduct.name}\n                    onChange={(e) => setNewProduct({...newProduct, name: e.target.value})}\n                    className=\"bg-gray-700 border-gray-600\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"category\">Catégorie *</Label>\n                  <Select value={newProduct.categoryId} onValueChange={(value) => setNewProduct({...newProduct, categoryId: value})}>\n                    <SelectTrigger className=\"bg-gray-700 border-gray-600\">\n                      <SelectValue placeholder=\"Sélectionner une catégorie\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-gray-700 border-gray-600\">\n                      {categories.map((category) => (\n                        <SelectItem key={category.id} value={category.id.toString()}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={newProduct.description}\n                  onChange={(e) => setNewProduct({...newProduct, description: e.target.value})}\n                  className=\"bg-gray-700 border-gray-600\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"price\">Prix *</Label>\n                  <Input\n                    id=\"price\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={newProduct.price}\n                    onChange={(e) => setNewProduct({...newProduct, price: e.target.value})}\n                    className=\"bg-gray-700 border-gray-600\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"stock\">Stock actuel</Label>\n                  <Input\n                    id=\"stock\"\n                    type=\"number\"\n                    value={newProduct.stock}\n                    onChange={(e) => setNewProduct({...newProduct, stock: e.target.value})}\n                    className=\"bg-gray-700 border-gray-600\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"minStock\">Stock minimum</Label>\n                  <Input\n                    id=\"minStock\"\n                    type=\"number\"\n                    value={newProduct.minStock}\n                    onChange={(e) => setNewProduct({...newProduct, minStock: e.target.value})}\n                    className=\"bg-gray-700 border-gray-600\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"maxStock\">Stock maximum</Label>\n                  <Input\n                    id=\"maxStock\"\n                    type=\"number\"\n                    value={newProduct.maxStock}\n                    onChange={(e) => setNewProduct({...newProduct, maxStock: e.target.value})}\n                    className=\"bg-gray-700 border-gray-600\"\n                  />\n                </div>\n              </div>\n\n\n\n              <div className=\"flex space-x-3\">\n                <Button\n                  onClick={handleCloseModal}\n                  variant=\"outline\"\n                  className=\"flex-1 border-gray-600 hover:bg-gray-700\"\n                >\n                  Annuler\n                </Button>\n                <Button\n                  onClick={handleSubmit}\n                  disabled={createProductMutation.isPending || updateProductMutation.isPending}\n                  className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                >\n                  {editingProduct ? \"Modifier\" : \"Créer\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Total Produits</p>\n                <p className=\"text-2xl font-bold text-white\">{products.length}</p>\n              </div>\n              <Package className=\"w-8 h-8 text-blue-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Stock Faible</p>\n                <p className=\"text-2xl font-bold text-red-400\">{lowStockProducts.length}</p>\n              </div>\n              <AlertTriangle className=\"w-8 h-8 text-red-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Catégories</p>\n                <p className=\"text-2xl font-bold text-green-400\">{categories.length}</p>\n              </div>\n              <Filter className=\"w-8 h-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Valeur Stock</p>\n                <p className=\"text-2xl font-bold text-purple-400\">\n                  {formatCurrency(\n                    products.reduce((sum, p) => sum + (parseFloat(p.price) * (p.stock || 0)), 0).toFixed(2)\n                  )}\n                </p>\n              </div>\n              <Package className=\"w-8 h-8 text-purple-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex-1 relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            placeholder=\"Rechercher un produit...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 bg-gray-800 border-gray-700 text-white\"\n          />\n        </div>\n        <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n          <SelectTrigger className=\"w-48 bg-gray-800 border-gray-700 text-white\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent className=\"bg-gray-800 border-gray-700\">\n            <SelectItem value=\"all\">Toutes les catégories</SelectItem>\n            {categories.map((category) => (\n              <SelectItem key={category.id} value={category.id.toString()}>\n                {category.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Button\n          onClick={() => setShowCategoryModal(true)}\n          variant=\"outline\"\n          className=\"border-gray-600 hover:bg-gray-700 text-white\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Catégorie\n        </Button>\n      </div>\n\n      {/* Categories Management */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold text-white\">Gestion des Catégories</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {categories.map((category) => (\n            <Card key={category.id} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium text-white\">{category.name}</h4>\n                    {category.description && (\n                      <p className=\"text-sm text-gray-400 mt-1\">{category.description}</p>\n                    )}\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => handleEditCategory(category)}\n                    className=\"text-blue-400 hover:text-blue-300\"\n                  >\n                    <Edit className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Products Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n        {filteredProducts.map((product) => {\n          const stockStatus = getStockStatus(product);\n          const category = categories.find(c => c.id === product.categoryId);\n          \n          return (\n            <Card key={product.id} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-3 h-3 rounded-full ${stockStatus.color}`}></div>\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {category?.name}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => handleEdit(product)}\n                      className=\"text-blue-400 hover:text-blue-300\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => handleDelete(product.id)}\n                      className=\"text-red-400 hover:text-red-300\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <h3 className=\"font-semibold text-white\">{product.name}</h3>\n                  {product.description && (\n                    <p className=\"text-sm text-gray-400 line-clamp-2\">{product.description}</p>\n                  )}\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-lg font-bold text-green-400\">\n                      {formatCurrency(product.price)}\n                    </span>\n                    <span className=\"text-sm text-gray-400\">\n                      Stock: {product.stock || 0}\n                    </span>\n                  </div>\n                  {product.minStock !== null && product.stock !== null && product.stock <= product.minStock && (\n                    <div className=\"flex items-center space-x-1 text-red-400\">\n                      <AlertTriangle className=\"w-4 h-4\" />\n                      <span className=\"text-xs\">Stock faible</span>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {filteredProducts.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Package className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <p className=\"text-gray-400\">Aucun produit trouvé</p>\n        </div>\n      )}\n\n      {/* Category Modal */}\n      <Dialog open={showCategoryModal} onOpenChange={setShowCategoryModal}>\n        <DialogContent className=\"bg-gray-800 border-gray-700 text-white\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingCategory ? \"Modifier la catégorie\" : \"Nouvelle catégorie\"}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"categoryName\">Nom de la catégorie *</Label>\n              <Input\n                id=\"categoryName\"\n                value={newCategory.name}\n                onChange={(e) => setNewCategory({...newCategory, name: e.target.value})}\n                className=\"bg-gray-700 border-gray-600\"\n                placeholder=\"Ex: Boissons, Entrées, Plats...\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"categoryDescription\">Description</Label>\n              <Textarea\n                id=\"categoryDescription\"\n                value={newCategory.description}\n                onChange={(e) => setNewCategory({...newCategory, description: e.target.value})}\n                className=\"bg-gray-700 border-gray-600\"\n                placeholder=\"Description de la catégorie (optionnel)\"\n                rows={3}\n              />\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={handleCloseCategoryModal}\n                variant=\"outline\"\n                className=\"flex-1 border-gray-600 hover:bg-gray-700\"\n              >\n                Annuler\n              </Button>\n              <Button\n                onClick={handleSubmitCategory}\n                disabled={createCategoryMutation.isPending || updateCategoryMutation.isPending}\n                className=\"flex-1 bg-green-600 hover:bg-green-700\"\n              >\n                {editingCategory ? \"Modifier\" : \"Créer\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":24369},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { Logo } from \"@/components/Logo\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState(\"cashier\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string; role: string }) => {\n      setIsLoading(true);\n      \n      // Enhanced input validation\n      if (!credentials.username?.trim()) {\n        throw new Error(\"Username é obrigatório\");\n      }\n      if (!credentials.password?.trim()) {\n        throw new Error(\"Password é obrigatório\");\n      }\n      if (!credentials.role?.trim()) {\n        throw new Error(\"Role é obrigatório\");\n      }\n      \n      console.log(\"Attempting login with:\", { \n        username: credentials.username, \n        role: credentials.role \n      });\n      \n      return apiRequest(\"POST\", \"/api/auth/login\", {\n        username: credentials.username.trim(),\n        password: credentials.password,\n        role: credentials.role.trim()\n      });\n    },\n    onSuccess: async (response) => {\n      try {\n        console.log(\"Login successful, processing response\");\n        \n        // Get response data\n        const responseData = await response.json();\n        console.log(\"Login response:\", responseData);\n        \n        // Enhanced response validation\n        if (!responseData.user) {\n          throw new Error(\"Dados do usuário não recebidos\");\n        }\n        \n        const { user, session, message } = responseData;\n        \n        // Validate user data\n        if (!user.id || !user.role || !user.firstName) {\n          throw new Error(\"Dados do usuário incompletos\");\n        }\n        \n        // Store enhanced session in localStorage\n        const sessionData = {\n          user: {\n            id: user.id,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            isActive: user.isActive,\n            profileImageUrl: user.profileImageUrl\n          },\n          timestamp: Date.now(),\n          expiresAt: session?.expiresAt ? new Date(session.expiresAt).getTime() : Date.now() + (8 * 60 * 60 * 1000),\n          loginTime: session?.loginTime || new Date().toISOString()\n        };\n        \n        localStorage.setItem(\"liberty_session\", JSON.stringify(sessionData));\n        console.log(\"Session stored in localStorage:\", sessionData);\n        \n        // Clear all queries to force fresh data loading\n        queryClient.clear();\n        \n        // Show brief welcome message\n        toast({\n          title: \"Bem-vindo!\",\n          description: `Olá, ${user.firstName}!`,\n        });\n        \n        console.log(\"Redirecting user based on role:\", user.role);\n        \n        // Enhanced role-based redirection\n        let redirectPath = \"/dashboard\";\n        let dashboardType = \"operational\";\n        \n        if (user.role === \"manager\") {\n          redirectPath = \"/manager\";\n          dashboardType = \"management\";\n        } else if (user.role === \"cashier\" || user.role === \"server\") {\n          redirectPath = \"/dashboard\";\n          dashboardType = \"operational\";\n        }\n        \n        console.log(`Redirecting to ${dashboardType} dashboard:`, redirectPath);\n        \n        // Use immediate client-side routing with localStorage persistence\n        setLocation(redirectPath);\n        console.log(\"Direct client-side navigation completed to:\", redirectPath);\n        \n      } catch (error) {\n        console.error(\"Error processing login response:\", error);\n        toast({\n          title: \"Erro de processamento\",\n          description: error instanceof Error ? error.message : \"Erro ao processar login\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    onError: (error) => {\n      console.error(\"Login failed:\", error);\n      setIsLoading(false);\n      \n      // Enhanced error handling\n      let errorMessage = \"Verifique suas credenciais\";\n      let errorTitle = \"Erro de login\";\n      \n      if (error instanceof Error) {\n        if (error.message.includes(\"400\")) {\n          errorMessage = \"Dados incompletos. Verifique todos os campos.\";\n        } else if (error.message.includes(\"401\")) {\n          errorMessage = \"Credenciais inválidas. Verifique username, password e role.\";\n        } else if (error.message.includes(\"403\")) {\n          errorMessage = \"Conta desativada. Contacte o administrador.\";\n          errorTitle = \"Acesso negado\";\n        } else if (error.message.includes(\"500\")) {\n          errorMessage = \"Erro interno do servidor. Tente novamente.\";\n          errorTitle = \"Erro do servidor\";\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      toast({\n        title: errorTitle,\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Prevent double submission\n    if (isLoading) return;\n    \n    // Client-side validation\n    if (!username.trim()) {\n      toast({\n        title: \"Campo obrigatório\",\n        description: \"Username é obrigatório\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!password.trim()) {\n      toast({\n        title: \"Campo obrigatório\",\n        description: \"Password é obrigatório\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    loginMutation.mutate({ username, password, role });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-900 p-4\">\n      <Card className=\"w-full max-w-md bg-gray-800 border-gray-700\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Logo size=\"md\" />\n          </div>\n          <CardDescription className=\"text-gray-400\">\n            Faça login em sua conta\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"text-white\">\n                Nome de usuário\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className={`bg-gray-700 border-gray-600 text-white ${isLoading ? 'opacity-50' : ''}`}\n                placeholder=\"seu.nome\"\n                required\n                disabled={isLoading}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-white\">\n                Senha\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className={`bg-gray-700 border-gray-600 text-white ${isLoading ? 'opacity-50' : ''}`}\n                placeholder=\"••••••••\"\n                required\n                disabled={isLoading}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\" className=\"text-white\">\n                Função\n              </Label>\n              <Select value={role} onValueChange={setRole} disabled={isLoading}>\n                <SelectTrigger className={`bg-gray-700 border-gray-600 text-white ${isLoading ? 'opacity-50' : ''}`}>\n                  <SelectValue placeholder=\"Selecione sua função\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-700 border-gray-600\">\n                  <SelectItem value=\"cashier\">Caixa</SelectItem>\n                  <SelectItem value=\"server\">Empregado</SelectItem>\n                  <SelectItem value=\"manager\">Gerente</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n              disabled={isLoading || loginMutation.isPending}\n            >\n              {isLoading || loginMutation.isPending ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\"></div>\n                  Entrando...\n                </div>\n              ) : (\n                \"Entrar\"\n              )}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9415},"client/src/pages/ManagerDashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  BarChart, \n  DollarSign, \n  TrendingUp, \n  Users, \n  Package, \n  ShoppingCart, \n  Calendar,\n  FileText,\n  UserCheck,\n  UserX,\n  RefreshCw,\n  Download,\n  Eye,\n  Clock,\n  Plus,\n  Edit,\n  Trash2,\n  Activity,\n  AlertTriangle,\n  CreditCard,\n  Search\n} from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { PT } from \"@/lib/i18n\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { thermalPrinter } from \"@/lib/thermalPrinter\";\nimport type { User, CreditClient } from \"@shared/schema\";\n\ninterface ManagerStats {\n  dailySales: {\n    morning: string;\n    evening: string;\n    total: string;\n  };\n  weeklySales: string;\n  monthlySales: string;\n  activeCredits: string;\n  totalUsers: number;\n  activeUsers: number;\n  totalProducts: number;\n  lowStockProducts: number;\n  topProducts: Array<{\n    name: string;\n    sales: number;\n    revenue: string;\n  }>;\n  sessionHistory: Array<{\n    id: number;\n    date: string;\n    shift: string;\n    user: string;\n    sales: string;\n    transactions: number;\n  }>;\n}\n\nexport default function ManagerDashboard() {\n  const [location] = useLocation();\n  const [selectedPeriod, setSelectedPeriod] = useState<\"daily\" | \"weekly\" | \"monthly\">(\"daily\");\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [activeTab, setActiveTab] = useState<string>(\"overview\");\n\n  // Set active tab based on URL path\n  useEffect(() => {\n    if (location === \"/credits\") {\n      setActiveTab(\"credits\");\n    } else if (location === \"/inventory\") {\n      setActiveTab(\"inventory\");\n    } else if (location === \"/stats\") {\n      setActiveTab(\"sales\");\n    } else {\n      setActiveTab(\"overview\");\n    }\n  }, [location]);\n\n  const { data: managerStats, isLoading, refetch } = useQuery<ManagerStats>({\n    queryKey: [\"/api/manager/stats/daily\", selectedDate],\n    refetchInterval: 30000,\n  });\n\n  const { data: creditClients } = useQuery<CreditClient[]>({\n    queryKey: [\"/api/credit-clients\"],\n    refetchInterval: 10000,\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/manager/users\"],\n  });\n\n  // New queries for enhanced features\n  const { data: lowStockProducts } = useQuery({\n    queryKey: [\"/api/manager/low-stock\"],\n    refetchInterval: 30000,\n  });\n\n  const [selectedSessionId, setSelectedSessionId] = useState<number | null>(null);\n  const [selectedCreditClientId, setSelectedCreditClientId] = useState<number | null>(null);\n  const [showSessionModal, setShowSessionModal] = useState(false);\n  \n  // New state for enhanced features\n  const [sessionHistoryPage, setSessionHistoryPage] = useState(0);\n  const [showBulkStockUpdate, setShowBulkStockUpdate] = useState(false);\n  const [selectedLowStockProducts, setSelectedLowStockProducts] = useState<number[]>([]);\n  const [productSearchTerm, setProductSearchTerm] = useState(\"\");\n  const [showProductSearch, setShowProductSearch] = useState(false);\n\n  const SESSIONS_PER_PAGE = 15;\n\n  const { data: sessionDetails } = useQuery({\n    queryKey: [\"/api/manager/session-details\", selectedSessionId],\n    enabled: !!selectedSessionId,\n  });\n\n  const { data: creditClientDetails } = useQuery({\n    queryKey: [\"/api/manager/credit-client\", selectedCreditClientId, \"details\"],\n    enabled: !!selectedCreditClientId,\n  });\n\n  // Enhanced queries for new features\n  const { data: detailedSalesReport } = useQuery({\n    queryKey: [\"/api/manager/detailed-sales\", selectedDate],\n  });\n\n  const { data: paymentBreakdownData } = useQuery({\n    queryKey: [\"/api/manager/payment-breakdown\", selectedDate],\n  });\n\n  const { data: creditPaymentsData } = useQuery({\n    queryKey: [\"/api/manager/credit-payments\", selectedDate],\n  });\n\n  const { data: productsForSearch } = useQuery({\n    queryKey: [\"/api/products/search\"],\n    enabled: showProductSearch,\n  });\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [showUserModal, setShowUserModal] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n\n  const userFormSchema = z.object({\n    id: z.string().min(1, \"ID utilisateur requis\"),\n    firstName: z.string().min(1, \"Prénom requis\"),\n    lastName: z.string().min(1, \"Nom requis\"),\n    email: z.string().email(\"Email invalide\"),\n    role: z.enum([\"cashier\", \"server\", \"manager\"]),\n    isActive: z.boolean(),\n  });\n\n  const userForm = useForm<z.infer<typeof userFormSchema>>({\n    resolver: zodResolver(userFormSchema),\n    defaultValues: {\n      id: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      role: \"cashier\",\n      isActive: true,\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: z.infer<typeof userFormSchema>) => {\n      const res = await apiRequest(\"POST\", \"/api/manager/users\", userData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager/users\"] });\n      setShowUserModal(false);\n      userForm.reset();\n      toast({\n        title: \"Succès\",\n        description: \"Utilisateur créé avec succès\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la création de l'utilisateur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (userData: z.infer<typeof userFormSchema>) => {\n      const res = await apiRequest(\"PUT\", `/api/manager/users/${userData.id}`, userData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager/users\"] });\n      setShowUserModal(false);\n      setEditingUser(null);\n      userForm.reset();\n      toast({\n        title: \"Succès\",\n        description: \"Utilisateur mis à jour avec succès\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la mise à jour de l'utilisateur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleUserStatusMutation = useMutation({\n    mutationFn: async ({ id, isActive }: { id: string; isActive: boolean }) => {\n      const res = await apiRequest(\"PUT\", `/api/manager/users/${id}/status`, { isActive });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager/users\"] });\n      toast({\n        title: \"Succès\",\n        description: \"Statut utilisateur mis à jour\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la mise à jour du statut\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation for individual stock update\n  const updateStockMutation = useMutation({\n    mutationFn: async ({ productId, newStock }: { productId: number; newStock: number }) => {\n      const response = await apiRequest('POST', '/api/manager/update-product-stock', { \n        productId, \n        currentStock: newStock \n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Stock atualizado\",\n        description: \"Stock do produto atualizado com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/manager/low-stock'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao atualizar stock\",\n        description: error.message || \"Erro ao atualizar stock\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRefresh = () => {\n    refetch();\n  };\n\n  const handleExportSales = async (type?: string) => {\n    try {\n      const exportType = type || selectedPeriod;\n      let exportData;\n      let filename;\n\n      if (exportType === 'complete') {\n        // Comprehensive report with all data\n        exportData = {\n          summary: {\n            totalSales: managerStats?.dailySales.total || 0,\n            morningSales: managerStats?.dailySales.morning || 0,\n            eveningSales: managerStats?.dailySales.evening || 0,\n            activeCredits: managerStats?.activeCredits || 0,\n            totalProducts: managerStats?.totalProducts || 0,\n            lowStockProducts: managerStats?.lowStockProducts || 0,\n          },\n          sessions: managerStats?.sessionHistory || [],\n          topProducts: managerStats?.topProducts || [],\n          date: selectedDate,\n        };\n        filename = `relatorio_completo_${selectedDate}.json`;\n        \n        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      } else {\n        // CSV export for daily/weekly/monthly\n        const csvData = managerStats?.sessionHistory?.map(session => ({\n          Data: session.date,\n          Turno: session.shift,\n          Usuario: session.user,\n          Vendas: session.sales,\n          Transacoes: session.transactions,\n        }));\n        \n        if (csvData && csvData.length > 0) {\n          const csvContent = \"data:text/csv;charset=utf-8,\" + \n            Object.keys(csvData[0]).join(\",\") + \"\\n\" +\n            csvData.map(row => Object.values(row).join(\",\")).join(\"\\n\");\n          \n          const encodedUri = encodeURI(csvContent);\n          const link = document.createElement(\"a\");\n          link.setAttribute(\"href\", encodedUri);\n          link.setAttribute(\"download\", `vendas_${exportType}_${selectedDate}.csv`);\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n        }\n      }\n      \n      toast({\n        title: \"Sucesso\",\n        description: \"Dados exportados com sucesso!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Falha na exportação dos dados\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCreateUser = () => {\n    setEditingUser(null);\n    userForm.reset();\n    setShowUserModal(true);\n  };\n\n  const handleEditUser = (user: User) => {\n    setEditingUser(user);\n    userForm.reset({\n      id: user.id,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      role: user.role as \"cashier\" | \"server\" | \"manager\",\n      isActive: user.isActive,\n    });\n    setShowUserModal(true);\n  };\n\n  const handleToggleUserStatus = (user: User) => {\n    toggleUserStatusMutation.mutate({\n      id: user.id,\n      isActive: !user.isActive,\n    });\n  };\n\n  const onSubmitUser = (values: z.infer<typeof userFormSchema>) => {\n    if (editingUser) {\n      updateUserMutation.mutate(values);\n    } else {\n      createUserMutation.mutate(values);\n    }\n  };\n\n  // New enhanced functions\n  const handleExportSession = async (sessionId: number) => {\n    try {\n      const response = await fetch(`/api/manager/export/session/${sessionId}`, {\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = url;\n        a.download = `sessao_${sessionId}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        \n        toast({\n          title: \"Sucesso\",\n          description: \"Relatório da sessão exportado com sucesso!\",\n        });\n      } else {\n        throw new Error('Falha na exportação');\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao exportar relatório da sessão\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // NEW: Export products sold by session\n  const handleExportSessionProducts = async (sessionId: number) => {\n    try {\n      console.log(`[DEBUG Frontend] Starting export for session ${sessionId}`);\n      const response = await fetch(`/api/manager/sessions/${sessionId}/products-export`, {\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      console.log(`[DEBUG Frontend] Response status: ${response.status}, ok: ${response.ok}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        \n        console.log('[DEBUG] Export response data:', data);\n        \n        // Check if response data is valid\n        if (!data || !data.sessionInfo) {\n          throw new Error('Dados de resposta inválidos do servidor');\n        }\n        \n        // Check if there are products to export\n        if (!data.products || data.products.length === 0) {\n          toast({\n            title: \"Aviso\",\n            description: \"Nenhum produto vendido encontrado nesta sessão.\",\n          });\n          return;\n        }\n        \n        // Safely get headers from first product\n        const firstProduct = data.products[0];\n        if (!firstProduct || typeof firstProduct !== 'object') {\n          throw new Error('Formato de produto inválido');\n        }\n        \n        // Fixed headers to ensure proper product name display\n        const headers = ['Produto', 'Categoria', 'Quantidade Total', 'Preço Unitário (F CFA)', 'Receita Total (F CFA)', 'Número de Pedidos', 'Primeira Venda', 'Última Venda'];\n        const csvContent = [\n          `# Relatório de Produtos Vendidos - Sessão ${sessionId}`,\n          `# Data: ${data.sessionInfo.date || 'N/A'}`,\n          `# Turno: ${data.sessionInfo.shift || 'N/A'}`,\n          `# Usuário: ${data.sessionInfo.user || 'N/A'}`,\n          `# Total de Produtos: ${data.sessionInfo.totalProducts || 0}`,\n          `# Receita Total: ${data.sessionInfo.totalRevenue || '0.00'} F CFA`,\n          `# Exportado em: ${data.exportDate || new Date().toLocaleString('pt-PT')}`,\n          '', // Empty line\n          headers.join(','),\n          ...data.products.map((product: any) => \n            headers.map(header => `\"${product[header] || ''}\"`).join(',')\n          )\n        ].join('\\n');\n\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = url;\n        a.download = `produtos_sessao_${sessionId}_${data.sessionInfo.date || 'unknown'}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        \n        toast({\n          title: \"Sucesso\",\n          description: `Lista de produtos exportada! ${data.sessionInfo.totalProducts || 0} produtos vendidos.`,\n        });\n      } else {\n        let errorMessage = 'Falha na exportação de produtos';\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorMessage;\n        } catch {\n          errorMessage = `Erro HTTP ${response.status}: ${response.statusText}`;\n        }\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      console.error('Export error:', error);\n      toast({\n        title: \"Erro\",\n        description: error instanceof Error ? error.message : \"Falha ao exportar lista de produtos vendidos\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleViewSessionDetails = (sessionId: number) => {\n    setSelectedSessionId(sessionId);\n    setShowSessionModal(true);\n  };\n\n  const handleViewCreditDetails = (clientId: number) => {\n    setSelectedCreditClientId(clientId);\n  };\n\n  // New enhanced functions for improved features\n  const handleBulkStockUpdate = () => {\n    setShowBulkStockUpdate(true);\n  };\n\n  const bulkUpdateStockMutation = useMutation({\n    mutationFn: async (updates: { productId: number; newStock: number }[]) => {\n      const res = await apiRequest(\"PUT\", \"/api/manager/bulk-stock-update\", { updates });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager/low-stock\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/manager/stats/daily\"] });\n      setShowBulkStockUpdate(false);\n      setSelectedLowStockProducts([]);\n      toast({\n        title: \"Succès\",\n        description: \"Stock mis à jour avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la mise à jour du stock\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Get all products for stock update modal\n  const { data: allProducts } = useQuery({\n    queryKey: [\"/api/products\"],\n    enabled: showBulkStockUpdate,\n  });\n\n  // Filter products based on search term\n  const filteredProducts = allProducts?.filter((product: any) => \n    productSearchTerm === \"\" || \n    product.name.toLowerCase().includes(productSearchTerm.toLowerCase()) ||\n    product.id.toString().includes(productSearchTerm)\n  ) || [];\n\n  // Calculate paginated session history\n  const paginatedSessionHistory = managerStats?.sessionHistory \n    ? managerStats.sessionHistory.slice(\n        sessionHistoryPage * SESSIONS_PER_PAGE,\n        (sessionHistoryPage + 1) * SESSIONS_PER_PAGE\n      )\n    : [];\n\n  const totalSessionPages = managerStats?.sessionHistory \n    ? Math.ceil(managerStats.sessionHistory.length / SESSIONS_PER_PAGE)\n    : 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <div key={i} className=\"h-32 bg-gray-700 rounded-lg\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-white\">{PT.manager.dashboard}</h1>\n          <p className=\"text-gray-400 mt-1\">Visão geral das operações e estatísticas</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Select value={selectedPeriod} onValueChange={(value: any) => setSelectedPeriod(value)}>\n            <SelectTrigger className=\"w-40 bg-gray-800 border-gray-700 text-white\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"bg-gray-800 border-gray-700\">\n              <SelectItem value=\"daily\">Diário</SelectItem>\n              <SelectItem value=\"weekly\">Semanal</SelectItem>\n              <SelectItem value=\"monthly\">Mensal</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button onClick={handleExportSales} className=\"bg-green-600 hover:bg-green-700\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            {PT.manager.exportData}\n          </Button>\n          <Button onClick={handleRefresh} className=\"bg-blue-600 hover:bg-blue-700\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Actualizar\n          </Button>\n        </div>\n      </div>\n\n      {/* Sales Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Vendas Manhã</p>\n                <p className=\"text-2xl font-bold text-green-400\">\n                  {formatCurrency(managerStats?.dailySales.morning || \"0\")}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-500 bg-opacity-20 rounded-full flex items-center justify-center\">\n                <DollarSign className=\"w-6 h-6 text-green-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Vendas Tarde</p>\n                <p className=\"text-2xl font-bold text-blue-400\">\n                  {formatCurrency(managerStats?.dailySales.evening || \"0\")}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-500 bg-opacity-20 rounded-full flex items-center justify-center\">\n                <Clock className=\"w-6 h-6 text-blue-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Total Diário</p>\n                <p className=\"text-2xl font-bold text-orange-400\">\n                  {formatCurrency(managerStats?.dailySales.total || \"0\")}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-500 bg-opacity-20 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"w-6 h-6 text-orange-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Créditos Ativos</p>\n                <p className=\"text-2xl font-bold text-red-400\">\n                  {formatCurrency(managerStats?.activeCredits || \"0\")}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-red-500 bg-opacity-20 rounded-full flex items-center justify-center\">\n                <FileText className=\"w-6 h-6 text-red-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-6 bg-gray-800 border-gray-700\">\n          <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\n          <TabsTrigger value=\"sales\">Vendas</TabsTrigger>\n          <TabsTrigger value=\"users\">Utilizadores</TabsTrigger>\n          <TabsTrigger value=\"inventory\">Stock</TabsTrigger>\n          <TabsTrigger value=\"credits\">Clientes Crédito</TabsTrigger>\n          <TabsTrigger value=\"reports\">Relatórios</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Top Products */}\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                  Produtos Mais Vendidos\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {managerStats?.topProducts?.map((product, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-700 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"text-sm font-medium text-gray-400\">#{index + 1}</span>\n                        <span className=\"text-white\">{product.name}</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm text-gray-400\">{product.sales} vendidos</p>\n                        <p className=\"text-sm font-medium text-green-400\">{formatCurrency(product.revenue)}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Session History with Pagination */}\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-white flex items-center\">\n                    <Calendar className=\"w-5 h-5 mr-2\" />\n                    Histórico de Sessões ({managerStats?.sessionHistory?.length || 0})\n                  </CardTitle>\n                  <div className=\"text-sm text-gray-400\">\n                    Página {sessionHistoryPage + 1} de {totalSessionPages || 1}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {paginatedSessionHistory && paginatedSessionHistory.length > 0 ? (\n                    paginatedSessionHistory.map((session) => (\n                      <div key={session.id} className=\"flex items-center justify-between p-3 bg-gray-700 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <p className=\"text-white font-medium\">{session.user}</p>\n                          <p className=\"text-sm text-gray-400\">{session.date} - {session.shift}</p>\n                        </div>\n                        <div className=\"text-right mr-4\">\n                          <p className=\"text-sm font-medium text-green-400\">{formatCurrency(session.sales)}</p>\n                          <p className=\"text-sm text-gray-400\">{session.transactions} transações</p>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"border-blue-600 text-blue-400 hover:bg-blue-600\"\n                            onClick={() => handleViewSessionDetails(session.id)}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"border-green-600 text-green-400 hover:bg-green-600\"\n                            onClick={() => handleExportSession(session.id)}\n                          >\n                            <Download className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"border-orange-600 text-orange-400 hover:bg-orange-600\"\n                            onClick={() => handleExportSessionProducts(session.id)}\n                            title=\"Exportar Lista de Produtos Vendidos\"\n                          >\n                            <Package className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-gray-400 mb-2\">Nenhuma sessão encontrada</p>\n                    </div>\n                  )}\n                </div>\n                \n                {/* Pagination Controls */}\n                {totalSessionPages > 1 && (\n                  <div className=\"flex justify-center items-center space-x-2 mt-4 pt-4 border-t border-gray-600\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"border-gray-600\"\n                      disabled={sessionHistoryPage === 0}\n                      onClick={() => setSessionHistoryPage(prev => Math.max(0, prev - 1))}\n                    >\n                      Anterior\n                    </Button>\n                    <span className=\"text-sm text-gray-400 px-4\">\n                      {sessionHistoryPage + 1} / {totalSessionPages}\n                    </span>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"border-gray-600\"\n                      disabled={sessionHistoryPage >= totalSessionPages - 1}\n                      onClick={() => setSessionHistoryPage(prev => Math.min(totalSessionPages - 1, prev + 1))}\n                    >\n                      Próxima\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Sales Tab */}\n        <TabsContent value=\"sales\" className=\"space-y-6\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white\">Vendas Manhã</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">{managerStats?.dailySales?.morning || \"0.00\"} F CFA</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white\">Vendas Tarde</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">{managerStats?.dailySales?.evening || \"0.00\"} F CFA</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white\">Total do Dia</CardTitle>\n                <Activity className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">{managerStats?.dailySales?.total || \"0.00\"} F CFA</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white\">Stock Baixo</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-orange-400\">{lowStockProducts?.length || 0}</div>\n                <p className=\"text-xs text-gray-400\">\n                  produtos em alerta\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Enhanced Payment Breakdown Section - Daily & Weekly */}\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <CreditCard className=\"h-5 w-5\" />\n                Breakdown Détaillé de Pagamentos\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* Daily Breakdown */}\n              <div className=\"mb-6\">\n                <h4 className=\"text-lg font-semibold text-white mb-3\">Dia: {selectedDate}</h4>\n                <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium text-green-400\">💵 Dinheiro</p>\n                    <p className=\"text-2xl font-bold text-white\">{paymentBreakdownData?.cash?.total || \"0.00\"} F CFA</p>\n                    <p className=\"text-xs text-gray-400\">{paymentBreakdownData?.cash?.count || 0} transações</p>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium text-blue-400\">📱 Mobile Money</p>\n                    <p className=\"text-2xl font-bold text-white\">{paymentBreakdownData?.mobile?.total || \"0.00\"} F CFA</p>\n                    <p className=\"text-xs text-gray-400\">{paymentBreakdownData?.mobile?.count || 0} transações</p>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium text-purple-400\">💳 Cartão</p>\n                    <p className=\"text-2xl font-bold text-white\">{paymentBreakdownData?.card?.total || \"0.00\"} F CFA</p>\n                    <p className=\"text-xs text-gray-400\">{paymentBreakdownData?.card?.count || 0} transações</p>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium text-orange-400\">📝 Crédito</p>\n                    <p className=\"text-2xl font-bold text-white\">{paymentBreakdownData?.credit?.total || \"0.00\"} F CFA</p>\n                    <p className=\"text-xs text-gray-400\">{paymentBreakdownData?.credit?.count || 0} transações</p>\n                  </div>\n                </div>\n                <div className=\"mt-4 pt-4 border-t border-gray-600\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-lg font-semibold text-white\">Total Diário:</span>\n                    <span className=\"text-2xl font-bold text-green-400\">{paymentBreakdownData?.total || \"0.00\"} F CFA</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Weekly Breakdown */}\n              <div className=\"border-t border-gray-600 pt-6\">\n                <h4 className=\"text-lg font-semibold text-white mb-3\">Resumo Semanal</h4>\n                <div className=\"grid gap-4 md:grid-cols-3\">\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium text-gray-400\">Total da Semana</p>\n                    <p className=\"text-xl font-bold text-green-400\">{formatCurrency(managerStats?.weeklySales || \"0\")}</p>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium text-gray-400\">Média Diária</p>\n                    <p className=\"text-xl font-bold text-blue-400\">\n                      {formatCurrency((parseFloat(managerStats?.weeklySales || \"0\") / 7).toFixed(2))}\n                    </p>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium text-gray-400\">Crescimento</p>\n                    <p className=\"text-xl font-bold text-yellow-400\">\n                      {managerStats?.weeklySales && managerStats?.dailySales?.total ? \n                        ((parseFloat(managerStats.dailySales.total) / (parseFloat(managerStats.weeklySales) / 7) - 1) * 100).toFixed(1) : \"0.0\"}%\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Credit Reimbursements */}\n              {creditPaymentsData && creditPaymentsData.length > 0 && (\n                <div className=\"border-t border-gray-600 pt-4 mt-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium text-blue-400\">Reembolsos de Crédito do Dia:</span>\n                    <span className=\"text-lg font-bold text-blue-400\">\n                      {formatCurrency(creditPaymentsData.reduce((sum: number, payment: any) => sum + parseFloat(payment.amount), 0).toString())}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-gray-400 mt-1\">{creditPaymentsData.length} reembolsos processados</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Move the detailed breakdown to Sales tab */}\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <BarChart className=\"w-5 h-5 mr-2\" />\n                {PT.manager.salesReports}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <div className=\"bg-gray-700 p-4 rounded-lg\">\n                  <h4 className=\"text-sm font-medium text-gray-400\">Vendas Semanais</h4>\n                  <p className=\"text-2xl font-bold text-white\">{formatCurrency(managerStats?.weeklySales || \"0\")}</p>\n                </div>\n                <div className=\"bg-gray-700 p-4 rounded-lg\">\n                  <h4 className=\"text-sm font-medium text-gray-400\">Vendas Mensais</h4>\n                  <p className=\"text-2xl font-bold text-white\">{formatCurrency(managerStats?.monthlySales || \"0\")}</p>\n                </div>\n                <div className=\"bg-gray-700 p-4 rounded-lg\">\n                  <h4 className=\"text-sm font-medium text-gray-400\">Média Diária</h4>\n                  <p className=\"text-2xl font-bold text-white\">{formatCurrency(managerStats?.dailySales.total || \"0\")}</p>\n                </div>\n              </div>\n\n              {/* Detailed Payment Breakdown in Sales Tab */}\n              <div className=\"border-t border-gray-600 pt-6\">\n                <h3 className=\"text-lg font-semibold text-white mb-4\">Breakdown Detalhado de Pagamentos</h3>\n                \n                {/* Daily Breakdown */}\n                <div className=\"mb-6\">\n                  <h4 className=\"text-md font-semibold text-gray-300 mb-3\">Dia: {selectedDate}</h4>\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                    <div className=\"bg-gray-700 p-3 rounded-lg\">\n                      <p className=\"text-sm font-medium text-green-400\">💵 Dinheiro</p>\n                      <p className=\"text-xl font-bold text-white\">{paymentBreakdownData?.cash?.total || \"0.00\"} F CFA</p>\n                      <p className=\"text-xs text-gray-400\">{paymentBreakdownData?.cash?.count || 0} transações</p>\n                    </div>\n                    <div className=\"bg-gray-700 p-3 rounded-lg\">\n                      <p className=\"text-sm font-medium text-blue-400\">📱 Mobile Money</p>\n                      <p className=\"text-xl font-bold text-white\">{paymentBreakdownData?.mobile?.total || \"0.00\"} F CFA</p>\n                      <p className=\"text-xs text-gray-400\">{paymentBreakdownData?.mobile?.count || 0} transações</p>\n                    </div>\n                    <div className=\"bg-gray-700 p-3 rounded-lg\">\n                      <p className=\"text-sm font-medium text-purple-400\">💳 Cartão</p>\n                      <p className=\"text-xl font-bold text-white\">{paymentBreakdownData?.card?.total || \"0.00\"} F CFA</p>\n                      <p className=\"text-xs text-gray-400\">{paymentBreakdownData?.card?.count || 0} transações</p>\n                    </div>\n                    <div className=\"bg-gray-700 p-3 rounded-lg\">\n                      <p className=\"text-sm font-medium text-orange-400\">📝 Crédito</p>\n                      <p className=\"text-xl font-bold text-white\">{paymentBreakdownData?.credit?.total || \"0.00\"} F CFA</p>\n                      <p className=\"text-xs text-gray-400\">{paymentBreakdownData?.credit?.count || 0} transações</p>\n                    </div>\n                  </div>\n                  <div className=\"mt-3 pt-3 border-t border-gray-600\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-md font-semibold text-white\">Total Diário:</span>\n                      <span className=\"text-xl font-bold text-green-400\">{paymentBreakdownData?.total || \"0.00\"} F CFA</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Weekly Summary */}\n                <div className=\"border-t border-gray-600 pt-4\">\n                  <h4 className=\"text-md font-semibold text-gray-300 mb-3\">Resumo Semanal</h4>\n                  <div className=\"grid gap-4 md:grid-cols-3\">\n                    <div className=\"bg-gray-700 p-3 rounded-lg\">\n                      <p className=\"text-sm font-medium text-gray-400\">Total da Semana</p>\n                      <p className=\"text-lg font-bold text-green-400\">{formatCurrency(managerStats?.weeklySales || \"0\")}</p>\n                    </div>\n                    <div className=\"bg-gray-700 p-3 rounded-lg\">\n                      <p className=\"text-sm font-medium text-gray-400\">Média Diária</p>\n                      <p className=\"text-lg font-bold text-blue-400\">\n                        {formatCurrency((parseFloat(managerStats?.weeklySales || \"0\") / 7).toFixed(2))}\n                      </p>\n                    </div>\n                    <div className=\"bg-gray-700 p-3 rounded-lg\">\n                      <p className=\"text-sm font-medium text-gray-400\">Crescimento</p>\n                      <p className=\"text-lg font-bold text-yellow-400\">\n                        {managerStats?.weeklySales && managerStats?.dailySales?.total ? \n                          ((parseFloat(managerStats.dailySales.total) / (parseFloat(managerStats.weeklySales) / 7) - 1) * 100).toFixed(1) : \"0.0\"}%\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Credit Reimbursements */}\n                {creditPaymentsData && creditPaymentsData.length > 0 && (\n                  <div className=\"border-t border-gray-600 pt-4 mt-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium text-blue-400\">Reembolsos de Crédito do Dia:</span>\n                      <span className=\"text-lg font-bold text-blue-400\">\n                        {formatCurrency(creditPaymentsData.reduce((sum: number, payment: any) => sum + parseFloat(payment.amount), 0).toString())}\n                      </span>\n                    </div>\n                    <p className=\"text-xs text-gray-400 mt-1\">{creditPaymentsData.length} reembolsos processados</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Users Tab */}\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-white flex items-center\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  {PT.manager.userManagement}\n                </CardTitle>\n                <Button onClick={handleCreateUser} className=\"bg-green-600 hover:bg-green-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Novo Utilizador\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {users.map((user: User) => (\n                  <div key={user.id} className=\"flex items-center justify-between p-3 bg-gray-700 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-medium\">{user.firstName?.[0]}</span>\n                      </div>\n                      <div>\n                        <p className=\"text-white font-medium\">{user.firstName} {user.lastName}</p>\n                        <p className=\"text-sm text-gray-400\">{user.email}</p>\n                        <p className=\"text-xs text-gray-500\">ID: {user.id}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className={user.role === \"manager\" ? \"bg-orange-600\" : user.role === \"cashier\" ? \"bg-blue-600\" : \"bg-green-600\"}>\n                        {user.role === \"manager\" ? \"Gerente\" : user.role === \"cashier\" ? \"Caixa\" : \"Servidor\"}\n                      </Badge>\n                      <Badge variant={user.isActive ? \"default\" : \"secondary\"}>\n                        {user.isActive ? \"Ativo\" : \"Inativo\"}\n                      </Badge>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"border-gray-600\"\n                        onClick={() => handleEditUser(user)}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"border-gray-600\"\n                        onClick={() => handleToggleUserStatus(user)}\n                        disabled={toggleUserStatusMutation.isPending}\n                      >\n                        {user.isActive ? <UserX className=\"w-4 h-4\" /> : <UserCheck className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Inventory Tab - Enhanced */}\n        <TabsContent value=\"inventory\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Stock Stats */}\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Package className=\"w-5 h-5 mr-2\" />\n                  {PT.manager.inventoryManagement}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-4 bg-gray-700 rounded-lg\">\n                    <p className=\"text-2xl font-bold text-blue-400\">{managerStats?.totalProducts || 0}</p>\n                    <p className=\"text-sm text-gray-400\">Total Produtos</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-gray-700 rounded-lg\">\n                    <p className=\"text-2xl font-bold text-red-400\">{managerStats?.lowStockProducts || 0}</p>\n                    <p className=\"text-sm text-gray-400\">Stock Baixo</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Simplified Stock Management */}\n            <Card className=\"bg-gray-800 border-gray-700\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-white flex items-center\">\n                    <Package className=\"w-5 h-5 mr-2 text-orange-500\" />\n                    Gestão de Stock\n                  </CardTitle>\n                  <Button\n                    onClick={handleBulkStockUpdate}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                    size=\"sm\"\n                  >\n                    <Package className=\"w-4 h-4 mr-1\" />\n                    Atualizar Stock\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {/* Stock Alerts Section */}\n                <div className=\"mb-4\">\n                  <h4 className=\"text-sm font-medium text-orange-400 mb-2\">\n                    Alertas de Stock ({lowStockProducts?.length || 0} produtos)\n                  </h4>\n                  <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                    {lowStockProducts && lowStockProducts.length > 0 ? (\n                      lowStockProducts.map((product: any) => (\n                        <div key={product.id} className=\"flex items-center justify-between p-2 bg-red-900/20 border border-red-700 rounded\">\n                          <div className=\"flex-1\">\n                            <p className=\"text-white text-sm font-medium\">{product.name}</p>\n                            <p className=\"text-xs text-gray-400\">ID: {product.id}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-sm text-red-400 font-medium\">\n                              {product.currentStock}/{product.minStock}\n                            </p>\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              {product.status === 'out_of_stock' ? 'Esgotado' : 'Baixo'}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <p className=\"text-gray-400 text-center py-4 text-sm\">\n                        ✓ Todos os produtos com stock adequado\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Quick Stock Statistics */}\n                <div className=\"grid grid-cols-3 gap-3 pt-3 border-t border-gray-600\">\n                  <div className=\"text-center\">\n                    <p className=\"text-xl font-bold text-blue-400\">{managerStats?.totalProducts || 0}</p>\n                    <p className=\"text-xs text-gray-400\">Total Produtos</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-xl font-bold text-red-400\">{lowStockProducts?.length || 0}</p>\n                    <p className=\"text-xs text-gray-400\">Stock Baixo</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-xl font-bold text-green-400\">\n                      {((managerStats?.totalProducts || 0) - (lowStockProducts?.length || 0))}\n                    </p>\n                    <p className=\"text-xs text-gray-400\">Stock OK</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Credits Tab */}\n        <TabsContent value=\"credits\" className=\"space-y-4\">\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <Users className=\"w-5 h-5 mr-2\" />\n                Gestão de Clientes Crédito\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {creditClients && creditClients.length > 0 ? (\n                  <div className=\"grid gap-4\">\n                    {creditClients.map((client) => (\n                      <div key={client.id} className=\"bg-gray-700 p-4 rounded-lg flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"text-white font-medium\">{client.name}</h4>\n                          <p className=\"text-sm text-gray-400\">{client.email}</p>\n                          <p className=\"text-sm text-gray-400\">{client.phone}</p>\n                        </div>\n                        <div className=\"text-right mr-4\">\n                          <p className=\"text-lg font-bold text-orange-400\">\n                            {formatCurrency(client.totalCredit)}\n                          </p>\n                          <p className=\"text-sm text-gray-400\">\n                            {client.isActive ? \"Ativo\" : \"Inativo\"}\n                          </p>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"border-blue-600 text-blue-400 hover:bg-blue-600\"\n                            onClick={() => handleViewCreditDetails(client.id)}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-400 text-center py-8\">\n                    Nenhum cliente crédito encontrado\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Reports Tab */}\n        <TabsContent value=\"reports\" className=\"space-y-4\">\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2\" />\n                {PT.manager.reports}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Button \n                  className=\"bg-blue-600 hover:bg-blue-700 h-20 flex-col\"\n                  onClick={() => handleExportSales('daily')}\n                >\n                  <Download className=\"w-6 h-6 mb-2\" />\n                  Exportar Diário\n                </Button>\n                <Button \n                  className=\"bg-green-600 hover:bg-green-700 h-20 flex-col\"\n                  onClick={() => handleExportSales('weekly')}\n                >\n                  <Download className=\"w-6 h-6 mb-2\" />\n                  Exportar Semanal\n                </Button>\n                <Button \n                  className=\"bg-orange-600 hover:bg-orange-700 h-20 flex-col\"\n                  onClick={() => handleExportSales('monthly')}\n                >\n                  <Download className=\"w-6 h-6 mb-2\" />\n                  Exportar Mensal\n                </Button>\n                <Button \n                  className=\"bg-purple-600 hover:bg-purple-700 h-20 flex-col\"\n                  onClick={() => handleExportSales('complete')}\n                >\n                  <Eye className=\"w-6 h-6 mb-2\" />\n                  Relatório Completo\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* User Management Modal */}\n      <Dialog open={showUserModal} onOpenChange={setShowUserModal}>\n        <DialogContent className=\"bg-gray-800 border-gray-700 text-white\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingUser ? \"Modificar utilizador\" : \"Criar utilizador\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...userForm}>\n            <form onSubmit={userForm.handleSubmit(onSubmitUser)} className=\"space-y-4\">\n              <FormField\n                control={userForm.control}\n                name=\"id\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ID Utilizador</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        className=\"bg-gray-700 border-gray-600\"\n                        disabled={!!editingUser}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={userForm.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-700 border-gray-600\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={userForm.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Apelido</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-700 border-gray-600\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={userForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"email\" className=\"bg-gray-700 border-gray-600\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={userForm.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Função</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"bg-gray-700 border-gray-600\">\n                          <SelectValue placeholder=\"Selecionar função\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-gray-700 border-gray-600\">\n                        <SelectItem value=\"cashier\">Caixa</SelectItem>\n                        <SelectItem value=\"server\">Servidor</SelectItem>\n                        <SelectItem value=\"manager\">Gerente</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex items-center justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowUserModal(false)}\n                  className=\"border-gray-600\"\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createUserMutation.isPending || updateUserMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  {editingUser ? \"Modificar\" : \"Criar\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Session Details Modal */}\n      <Dialog open={!!selectedSessionId} onOpenChange={() => setSelectedSessionId(null)}>\n        <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>{PT.manager.sessionDetails}</DialogTitle>\n          </DialogHeader>\n          {sessionDetails && (\n            <div className=\"space-y-6\">\n              {/* Session Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Informações da Sessão</h3>\n                  <div className=\"space-y-2\">\n                    <p><span className=\"text-gray-400\">ID:</span> {sessionDetails.id}</p>\n                    <p><span className=\"text-gray-400\">Data:</span> {sessionDetails.date}</p>\n                    <p><span className=\"text-gray-400\">Turno:</span> {sessionDetails.shiftType}</p>\n                    <p><span className=\"text-gray-400\">Utilizador:</span> {sessionDetails.cashier}</p>\n                    <p><span className=\"text-gray-400\">Transações:</span> {sessionDetails.transactionCount}</p>\n                    <p><span className=\"text-gray-400\">Status:</span> <span className={sessionDetails.isActive ? \"text-green-400\" : \"text-gray-400\"}>{sessionDetails.isActive ? \"Ativa\" : \"Finalizada\"}</span></p>\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">{PT.manager.paymentMethods}</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Dinheiro ({sessionDetails.paymentBreakdown.cash.count}x):</span>\n                      <span className=\"text-green-400\">{formatCurrency(sessionDetails.paymentBreakdown.cash.total.toString())}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Mobile Money ({sessionDetails.paymentBreakdown.mobile_money.count}x):</span>\n                      <span className=\"text-blue-400\">{formatCurrency(sessionDetails.paymentBreakdown.mobile_money.total.toString())}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Crédito ({sessionDetails.paymentBreakdown.credit.count}x):</span>\n                      <span className=\"text-orange-400\">{formatCurrency(sessionDetails.paymentBreakdown.credit.total.toString())}</span>\n                    </div>\n                    <div className=\"border-t border-gray-600 pt-2\">\n                      <div className=\"flex justify-between font-semibold\">\n                        <span className=\"text-white\">Total:</span>\n                        <span className=\"text-green-400\">{formatCurrency(sessionDetails.totalSales.toString())}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Orders List */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-white mb-2\">Lista de Pedidos</h3>\n                <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                  {sessionDetails.orders?.map((order: any, index: number) => (\n                    <div key={index} className=\"flex justify-between items-center p-2 bg-gray-700 rounded\">\n                      <div>\n                        <span className={`px-2 py-1 rounded text-xs font-medium ${\n                          order.status === 'completed' ? 'bg-green-600' : \n                          order.status === 'pending' ? 'bg-yellow-600' : 'bg-gray-600'\n                        }`}>\n                          {order.status.toUpperCase()}\n                        </span>\n                        <p className=\"text-white mt-1\">Mesa {order.tableId} - {order.clientName}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-white\">{formatCurrency(order.totalPrice)}</p>\n                        <p className=\"text-xs text-gray-400\">{new Date(order.createdAt).toLocaleTimeString('pt-PT')}</p>\n                      </div>\n                    </div>\n                  )) || <p className=\"text-gray-400 text-center py-4\">Nenhum pedido encontrado</p>}\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  onClick={() => selectedSessionId && handleExportSession(selectedSessionId)}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  {PT.manager.exportData}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Product Search Modal */}\n      <Dialog open={showProductSearch} onOpenChange={setShowProductSearch}>\n        <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>Pesquisar Produtos</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Input\n              placeholder=\"Pesquisar por nome ou ID do produto...\"\n              value={productSearchTerm}\n              onChange={(e) => setProductSearchTerm(e.target.value)}\n              className=\"bg-gray-700 border-gray-600\"\n            />\n            \n            {/* Fixed Categories List */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 p-4 bg-gray-700 rounded-lg\">\n              <div className=\"text-center\">\n                <Badge variant=\"outline\" className=\"w-full\">Bebidas</Badge>\n              </div>\n              <div className=\"text-center\">\n                <Badge variant=\"outline\" className=\"w-full\">Comidas</Badge>\n              </div>\n              <div className=\"text-center\">\n                <Badge variant=\"outline\" className=\"w-full\">Vinhos</Badge>\n              </div>\n              <div className=\"text-center\">\n                <Badge variant=\"outline\" className=\"w-full\">Cervejas</Badge>\n              </div>\n            </div>\n            \n            {/* Filtered Products Results */}\n            <div className=\"max-h-96 overflow-y-auto space-y-2\">\n              {filteredProducts.map((product: any) => (\n                <div key={product.id} className=\"flex items-center justify-between p-3 bg-gray-700 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-white font-medium\">{product.name}</p>\n                    <p className=\"text-sm text-gray-400\">ID: {product.id} - {product.category}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-green-400\">{formatCurrency(product.price)}</p>\n                    <p className=\"text-xs text-gray-400\">Stock: {product.currentStock}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Stock Update Modal */}\n      <Dialog open={showBulkStockUpdate} onOpenChange={setShowBulkStockUpdate}>\n        <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-4xl max-h-[80vh]\">\n          <DialogHeader>\n            <DialogTitle>Atualização de Stock</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {/* Search products */}\n            <div className=\"border-b border-gray-600 pb-4\">\n              <Input\n                placeholder=\"Pesquisar produtos por nome ou ID...\"\n                value={productSearchTerm}\n                onChange={(e) => setProductSearchTerm(e.target.value)}\n                className=\"bg-gray-700 border-gray-600\"\n              />\n            </div>\n            \n            {/* Products list with stock update */}\n            <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n              {filteredProducts.length > 0 ? (\n                filteredProducts.map((product: any) => (\n                  <div key={product.id} className=\"flex items-center justify-between p-3 bg-gray-700 rounded-lg\">\n                    <div className=\"flex-1\">\n                      <p className=\"text-white font-medium\">{product.name}</p>\n                      <p className=\"text-sm text-gray-400\">ID: {product.id} - {product.category}</p>\n                      <p className=\"text-xs text-gray-500\">Preço: {formatCurrency(product.price)}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-right\">\n                        <p className=\"text-sm text-gray-300\">Stock atual:</p>\n                        <p className=\"text-lg font-bold text-white\">{product.currentStock}</p>\n                      </div>\n                      <div className=\"w-24\">\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          placeholder=\"Novo\"\n                          className=\"bg-gray-600 border-gray-500 text-center\"\n                          id={`stock-${product.id}`}\n                        />\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => {\n                          const inputElement = document.getElementById(`stock-${product.id}`) as HTMLInputElement;\n                          const newStock = inputElement?.value;\n                          if (newStock && parseInt(newStock) >= 0) {\n                            // Call update API for individual product\n                            updateStockMutation.mutate({ productId: product.id, newStock: parseInt(newStock) });\n                            inputElement.value = '';\n                          } else {\n                            toast({\n                              title: \"Erro\",\n                              description: \"Por favor, insira um valor válido para o stock\",\n                              variant: \"destructive\",\n                            });\n                          }\n                        }}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                        disabled={updateStockMutation.isPending}\n                      >\n                        {updateStockMutation.isPending ? \"...\" : \"Atualizar\"}\n                      </Button>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-gray-400 text-center py-8\">\n                  {productSearchTerm ? \"Nenhum produto encontrado\" : \"Digite para pesquisar produtos\"}\n                </p>\n              )}\n            </div>\n            \n            {/* Alert products section */}\n            {lowStockProducts && lowStockProducts.length > 0 && (\n              <div className=\"border-t border-gray-600 pt-4\">\n                <h4 className=\"text-sm font-medium text-orange-400 mb-2\">\n                  Produtos com Stock Baixo\n                </h4>\n                <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                  {lowStockProducts.map((product: any) => (\n                    <div key={product.id} className=\"flex items-center justify-between p-2 bg-red-900/20 border border-red-700 rounded text-sm\">\n                      <span className=\"text-white\">{product.name}</span>\n                      <span className=\"text-red-400 font-medium\">{product.currentStock}/{product.minStock}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            <div className=\"flex justify-end space-x-2 pt-4 border-t border-gray-600\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowBulkStockUpdate(false)}\n                className=\"border-gray-600\"\n              >\n                Fechar\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Credit Client Details Modal */}\n      <Dialog open={!!selectedCreditClientId} onOpenChange={() => setSelectedCreditClientId(null)}>\n        <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>{PT.manager.creditDetails}</DialogTitle>\n          </DialogHeader>\n          {creditClientDetails && (\n            <div className=\"space-y-6\">\n              {/* Client Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Informações do Cliente</h3>\n                  <div className=\"space-y-2\">\n                    <p><span className=\"text-gray-400\">Nome:</span> {creditClientDetails.client.name}</p>\n                    <p><span className=\"text-gray-400\">Email:</span> {creditClientDetails.client.email || 'N/A'}</p>\n                    <p><span className=\"text-gray-400\">Telefone:</span> {creditClientDetails.client.phone || 'N/A'}</p>\n                    <p><span className=\"text-gray-400\">Status:</span> \n                      <span className={creditClientDetails.client.isActive ? 'text-green-400' : 'text-red-400'}>\n                        {creditClientDetails.client.isActive ? ' Ativo' : ' Inativo'}\n                      </span>\n                    </p>\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Resumo Financeiro</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Total Crédito Dado:</span>\n                      <span className=\"text-red-400\">{formatCurrency(creditClientDetails.summary.totalCreditGiven)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Total Pago:</span>\n                      <span className=\"text-green-400\">{formatCurrency(creditClientDetails.summary.totalPaymentsReceived)}</span>\n                    </div>\n                    <div className=\"border-t border-gray-600 pt-2\">\n                      <div className=\"flex justify-between font-semibold\">\n                        <span className=\"text-white\">Saldo Devedor:</span>\n                        <span className=\"text-orange-400\">{formatCurrency(creditClientDetails.summary.outstandingBalance)}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Transaction History */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Histórico de Créditos</h3>\n                  <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                    {creditClientDetails.creditHistory.map((credit: any, index: number) => (\n                      <div key={index} className=\"p-2 bg-red-900/20 border border-red-700 rounded\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-red-400\">{formatCurrency(credit.amount)}</span>\n                          <span className=\"text-xs text-gray-400\">{new Date(credit.date).toLocaleDateString('pt-PT')}</span>\n                        </div>\n                        <p className=\"text-xs text-gray-500\">Sessão: {credit.sessionId}</p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">{PT.manager.paymentHistory}</h3>\n                  <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                    {creditClientDetails.paymentHistory.map((payment: any, index: number) => (\n                      <div key={index} className=\"p-2 bg-green-900/20 border border-green-700 rounded\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-green-400\">{formatCurrency(payment.amount)}</span>\n                          <span className=\"text-xs text-gray-400\">{new Date(payment.date).toLocaleDateString('pt-PT')}</span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Session Details Modal */}\n      <Dialog open={showSessionModal} onOpenChange={setShowSessionModal}>\n        <DialogContent className=\"bg-gray-900 border-gray-700 text-white max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-bold text-white\">\n              Detalhes da Sessão #{selectedSessionId}\n            </DialogTitle>\n          </DialogHeader>\n          {sessionDetails && (\n            <div className=\"space-y-6\">\n              {/* Session Summary */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Card className=\"bg-gray-800 border-gray-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-400\">Data</p>\n                      <p className=\"text-lg font-semibold text-white\">{sessionDetails.date}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card className=\"bg-gray-800 border-gray-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-400\">Turno</p>\n                      <p className=\"text-lg font-semibold text-blue-400\">{sessionDetails.shiftType}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card className=\"bg-gray-800 border-gray-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-400\">Caixa</p>\n                      <p className=\"text-lg font-semibold text-green-400\">{sessionDetails.cashier}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card className=\"bg-gray-800 border-gray-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-400\">Status</p>\n                      <Badge variant={sessionDetails.isActive ? \"default\" : \"secondary\"}>\n                        {sessionDetails.isActive ? \"Ativa\" : \"Fechada\"}\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Financial Summary */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Card className=\"bg-gray-800 border-gray-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Total de Vendas</p>\n                        <p className=\"text-2xl font-bold text-green-400\">\n                          {formatCurrency(sessionDetails.totalSales)}\n                        </p>\n                      </div>\n                      <DollarSign className=\"w-8 h-8 text-green-400\" />\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card className=\"bg-gray-800 border-gray-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Transações</p>\n                        <p className=\"text-2xl font-bold text-blue-400\">{sessionDetails.transactionCount}</p>\n                      </div>\n                      <Activity className=\"w-8 h-8 text-blue-400\" />\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card className=\"bg-gray-800 border-gray-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Horário</p>\n                        <p className=\"text-lg font-semibold text-orange-400\">\n                          {sessionDetails.startTime} - {sessionDetails.endTime}\n                        </p>\n                      </div>\n                      <Clock className=\"w-8 h-8 text-orange-400\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Payment Methods Breakdown */}\n              <Card className=\"bg-gray-800 border-gray-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center\">\n                    <CreditCard className=\"w-5 h-5 mr-2\" />\n                    Métodos de Pagamento\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    {Object.entries(sessionDetails.paymentBreakdown || {}).map(([method, data]: [string, any]) => {\n                      const methodNames = {\n                        cash: \"Dinheiro\",\n                        mobile_money: \"Mobile Money\",\n                        credit: \"Crédito\", \n                        partial: \"Parcial\"\n                      };\n                      return (\n                        <div key={method} className=\"text-center p-3 bg-gray-700 rounded-lg\">\n                          <p className=\"text-sm text-gray-400\">{methodNames[method as keyof typeof methodNames] || method}</p>\n                          <p className=\"text-lg font-semibold text-white\">{formatCurrency(data.total.toString())}</p>\n                          <p className=\"text-xs text-gray-500\">{data.count} transações</p>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recent Orders */}\n              <Card className=\"bg-gray-800 border-gray-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center\">\n                    <ShoppingCart className=\"w-5 h-5 mr-2\" />\n                    Pedidos da Sessão ({sessionDetails.orders?.length || 0})\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                    {sessionDetails.orders?.map((order: any) => (\n                      <div key={order.id} className=\"flex items-center justify-between p-3 bg-gray-700 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <p className=\"text-white font-medium\">Mesa {order.tableId} - {order.clientName || \"Cliente\"}</p>\n                          <p className=\"text-sm text-gray-400\">\n                            {new Date(order.createdAt).toLocaleString('pt-PT')} | Status: {order.status}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-lg font-semibold text-green-400\">{formatCurrency(order.totalPrice)}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Action Buttons */}\n              <div className=\"flex justify-end space-x-4 pt-4 border-t border-gray-700\">\n                <Button \n                  onClick={() => handleExportSession(selectedSessionId!)}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Exportar Relatório\n                </Button>\n                <Button \n                  onClick={() => setShowSessionModal(false)}\n                  variant=\"outline\"\n                  className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                >\n                  Fechar\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":84621},"client/src/pages/Orders.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useSearch } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { NewClientModal } from \"@/components/modals/NewClientModal\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  Plus, \n  ShoppingCart, \n  Users, \n  Clock, \n  CheckCircle, \n  XCircle,\n  Minus,\n  MapPin,\n  User,\n  UserPlus,\n  Table as TableIcon,\n  Search,\n  X,\n  Crown\n} from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { PT } from \"@/lib/i18n\";\nimport type { Table, Product, Order, OrderItem, CreditClient, Category, OrderWithItems } from \"@shared/schema\";\n\ninterface OrderStep {\n  step: 'table' | 'client' | 'products' | 'complete';\n  selectedTable: Table | null;\n  clientType: 'anonymous' | 'credit' | 'manager' | null;\n  selectedClient: CreditClient | null;\n  anonymousName: string;\n  managerName: string;\n  orderItems: Array<{\n    product: Product;\n    quantity: number;\n  }>;\n  notes: string;\n}\n\nexport default function Orders() {\n  const { toast } = useToast();\n  const search = useSearch() || \"\";\n  const [orderStep, setOrderStep] = useState<OrderStep>({\n    step: 'table',\n    selectedTable: null,\n    clientType: null,\n    selectedClient: null,\n    anonymousName: '',\n    managerName: '',\n    orderItems: [],\n    notes: ''\n  });\n  const [showNewClientModal, setShowNewClientModal] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n\n  // Data queries\n  const { data: tables, isLoading: tablesLoading } = useQuery<Table[]>({\n    queryKey: [\"/api/tables\"],\n    refetchInterval: 5000,\n  });\n\n  const { data: products, isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: creditClients } = useQuery<CreditClient[]>({\n    queryKey: [\"/api/credit-clients\"],\n  });\n\n  const { data: orders, isLoading: ordersLoading } = useQuery<OrderWithItems[]>({\n    queryKey: [\"/api/orders\"],\n    refetchInterval: 5000,\n  });\n\n  // Ensure arrays are always defined\n  const tablesList = tables || [];\n  const productsList = products || [];\n  const categoriesList = categories || [];\n  const creditClientsList = creditClients || [];\n  const ordersList = orders || [];\n\n  // Auto-select table from URL parameter\n  useEffect(() => {\n    if (!search) return;\n    \n    const urlParams = new URLSearchParams(search);\n    const tableIdParam = urlParams.get('table');\n    \n    if (tableIdParam && tablesList.length > 0) {\n      const tableId = parseInt(tableIdParam);\n      const selectedTable = tablesList.find(t => t.id === tableId);\n      \n      if (selectedTable) {\n        setOrderStep(prev => ({\n          ...prev,\n          selectedTable,\n          step: 'client' // Skip directly to client selection\n        }));\n      }\n    }\n  }, [search, tablesList]);\n\n  // Mutations\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      return apiRequest(\"POST\", \"/api/orders\", orderData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Pedido criado com sucesso!\",\n      });\n      resetOrder();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao criar pedido\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addItemsToOrderMutation = useMutation({\n    mutationFn: async ({ orderId, items }: { orderId: number; items: any[] }) => {\n      return apiRequest(\"POST\", `/api/orders/${orderId}/items`, { items });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Itens adicionados ao pedido com sucesso!\",\n      });\n      resetOrder();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao adicionar itens ao pedido\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetOrder = () => {\n    setOrderStep({\n      step: 'table',\n      selectedTable: null,\n      clientType: null,\n      selectedClient: null,\n      anonymousName: '',\n      managerName: '',\n      orderItems: [],\n      notes: ''\n    });\n  };\n\n  const handleTableSelection = (table: Table) => {\n    // Check if table has an existing pending order\n    const existingOrder = ordersList.find(order => \n      order.tableId === table.id && order.status === \"pending\"\n    );\n    \n    if (existingOrder) {\n      // Pre-populate the form with existing order data for adding items\n      setOrderStep(prev => ({\n        ...prev,\n        selectedTable: table,\n        clientType: existingOrder.creditClientId ? 'credit' : \n                  existingOrder.clientName && (existingOrder.clientName.toLowerCase() === 'carl malack' || existingOrder.clientName.toLowerCase() === 'lucelle reis') ? 'manager' : 'anonymous',\n        selectedClient: existingOrder.creditClientId ? creditClientsList.find(c => c.id === existingOrder.creditClientId) || null : null,\n        anonymousName: existingOrder.clientName && existingOrder.clientName.toLowerCase() !== 'carl malack' && existingOrder.clientName.toLowerCase() !== 'lucelle reis' ? existingOrder.clientName : '',\n        managerName: existingOrder.clientName && (existingOrder.clientName.toLowerCase() === 'carl malack' || existingOrder.clientName.toLowerCase() === 'lucelle reis') ? existingOrder.clientName : '',\n        orderItems: existingOrder.items.map(item => ({\n          product: item.product,\n          quantity: item.quantity\n        })),\n        notes: existingOrder.notes || '',\n        step: 'products'\n      }));\n      \n      toast({\n        title: \"Commande existante trouvée\",\n        description: `Vous pouvez ajouter des articles à la commande existante de la table ${table.number}`,\n      });\n      return;\n    }\n\n    // For free tables, start normal process\n    setOrderStep(prev => ({\n      ...prev,\n      selectedTable: table,\n      step: 'client'\n    }));\n  };\n\n  const handleClientSelection = (type: 'anonymous' | 'credit' | 'manager', client?: CreditClient, name?: string, managerName?: string) => {\n    setOrderStep(prev => ({\n      ...prev,\n      clientType: type,\n      selectedClient: client || null,\n      anonymousName: name || '',\n      managerName: managerName || '',\n      step: 'products'\n    }));\n  };\n\n  const handleClientCreated = (client: CreditClient) => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/credit-clients\"] });\n    handleClientSelection('credit', client);\n  };\n\n  const handleProductAdd = (product: Product) => {\n    setOrderStep(prev => {\n      const existingItem = prev.orderItems.find(item => item.product.id === product.id);\n      if (existingItem) {\n        return {\n          ...prev,\n          orderItems: prev.orderItems.map(item =>\n            item.product.id === product.id\n              ? { ...item, quantity: item.quantity + 1 }\n              : item\n          )\n        };\n      } else {\n        return {\n          ...prev,\n          orderItems: [...prev.orderItems, { product, quantity: 1 }]\n        };\n      }\n    });\n  };\n\n  const handleProductRemove = (productId: number) => {\n    setOrderStep(prev => ({\n      ...prev,\n      orderItems: prev.orderItems.filter(item => item.product.id !== productId)\n    }));\n  };\n\n  const handleQuantityChange = (productId: number, quantity: number) => {\n    if (quantity <= 0) {\n      handleProductRemove(productId);\n      return;\n    }\n\n    setOrderStep(prev => ({\n      ...prev,\n      orderItems: prev.orderItems.map(item =>\n        item.product.id === productId\n          ? { ...item, quantity }\n          : item\n      )\n    }));\n  };\n\n  const calculateTotal = () => {\n    return orderStep.orderItems.reduce((total, item) => {\n      return total + (parseFloat(item.product.price) * item.quantity);\n    }, 0);\n  };\n\n  const handleSubmitOrder = async () => {\n    if (!orderStep.selectedTable || !orderStep.clientType || orderStep.orderItems.length === 0) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, complete todos os campos obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if this table has an existing pending order\n    const existingOrder = ordersList.find(order => \n      order.tableId === orderStep.selectedTable?.id && \n      order.status === \"pending\"\n    );\n    \n    if (existingOrder) {\n      // Separate new items and quantity updates for existing items\n      const existingProductIds = existingOrder.items.map(item => item.product.id);\n      const newItems = orderStep.orderItems.filter(item => !existingProductIds.includes(item.product.id));\n      const updatedItems = orderStep.orderItems.filter(item => existingProductIds.includes(item.product.id));\n      \n      // Items to add (completely new products)\n      const itemsToAdd = [];\n      \n      // Add completely new items\n      for (const item of newItems) {\n        itemsToAdd.push({\n          productId: item.product.id,\n          quantity: item.quantity,\n          price: item.product.price\n        });\n      }\n      \n      // Handle quantity updates for existing products (including reductions)\n      for (const item of updatedItems) {\n        const existingItem = existingOrder.items.find(existing => existing.product.id === item.product.id);\n        if (existingItem && item.quantity !== existingItem.quantity) {\n          // Send the new absolute quantity (not the difference)\n          itemsToAdd.push({\n            productId: item.product.id,\n            quantity: item.quantity, // Send absolute quantity, not difference\n            price: item.product.price\n          });\n        }\n      }\n      \n      if (itemsToAdd.length > 0) {\n        addItemsToOrderMutation.mutate({ \n          orderId: existingOrder.id, \n          items: itemsToAdd \n        });\n      } else {\n        toast({\n          title: \"Aviso\",\n          description: \"Nenhum item novo para adicionar\",\n          variant: \"default\",\n        });\n      }\n    } else {\n      // Create new order\n      const orderData = {\n        tableId: orderStep.selectedTable.id,\n        creditClientId: orderStep.clientType === 'credit' ? orderStep.selectedClient?.id : null,\n        clientName: orderStep.clientType === 'anonymous' ? orderStep.anonymousName : \n                   orderStep.clientType === 'manager' ? orderStep.managerName : null,\n        totalAmount: calculateTotal(),\n        notes: orderStep.notes,\n        items: orderStep.orderItems.map(item => ({\n          productId: item.product.id,\n          quantity: item.quantity,\n          price: item.product.price\n        }))\n      };\n\n      createOrderMutation.mutate(orderData);\n    }\n  };\n\n  const getLocationName = (location: string) => {\n    switch (location) {\n      case 'main_hall':\n        return 'Sala Principal';\n      case 'balcony':\n        return 'Varanda';\n      case 'terrace':\n        return 'Esplanada';\n      default:\n        return location;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-500\";\n      case \"preparing\":\n        return \"bg-blue-500\";\n      case \"ready\":\n        return \"bg-green-500\";\n      case \"completed\":\n        return \"bg-gray-500\";\n      case \"cancelled\":\n        return \"bg-red-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"Pendente\";\n      case \"preparing\":\n        return \"Preparando\";\n      case \"ready\":\n        return \"Pronto\";\n      case \"completed\":\n        return \"Concluído\";\n      case \"cancelled\":\n        return \"Cancelado\";\n      default:\n        return status;\n    }\n  };\n\n  const groupTablesByLocation = (tables: Table[]) => {\n    const grouped = tables.reduce((acc, table) => {\n      if (!acc[table.location]) {\n        acc[table.location] = [];\n      }\n      acc[table.location].push(table);\n      return acc;\n    }, {} as Record<string, Table[]>);\n\n    // Sort tables by number within each location\n    Object.keys(grouped).forEach(location => {\n      grouped[location].sort((a, b) => a.number - b.number);\n    });\n\n    return grouped;\n  };\n\n  const groupProductsByCategory = (products: Product[]) => {\n    const grouped = products.reduce((acc, product) => {\n      const categoryName = categoriesList.find(c => c.id === product.categoryId)?.name || 'Outros';\n      if (!acc[categoryName]) {\n        acc[categoryName] = [];\n      }\n      acc[categoryName].push(product);\n      return acc;\n    }, {} as Record<string, Product[]>);\n\n    return grouped;\n  };\n\n  const filterProducts = (products: Product[]) => {\n    let filtered = products;\n\n    // Filter by search query\n    if (searchQuery.trim()) {\n      filtered = filtered.filter(product =>\n        product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        product.description?.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Filter by category\n    if (selectedCategory !== \"all\") {\n      filtered = filtered.filter(product => {\n        const categoryName = categoriesList.find(c => c.id === product.categoryId)?.name || 'Outros';\n        return categoryName === selectedCategory;\n      });\n    }\n\n    return filtered;\n  };\n\n  const getCategoryOptions = () => {\n    const categories = Array.from(new Set(productsList.map(product => {\n      return categoriesList.find(c => c.id === product.categoryId)?.name || 'Outros';\n    })));\n    return categories.sort();\n  };\n\n  if (tablesLoading || productsLoading || ordersLoading) {\n    return (\n      <div className=\"p-6\">\n        <h2 className=\"text-2xl font-bold text-white mb-6\">Sistema de Pedidos</h2>\n        <div className=\"animate-pulse\">\n          <div className=\"h-32 bg-gray-800 rounded mb-4\"></div>\n          <div className=\"h-32 bg-gray-800 rounded mb-4\"></div>\n          <div className=\"h-32 bg-gray-800 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-2xl font-bold text-white\">Sistema de Pedidos</h2>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button className=\"bg-orange-600 hover:bg-orange-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Novo Pedido\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto bg-gray-800 border-gray-700\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white\">Criar Novo Pedido</DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"space-y-6\">\n              {/* Progress Steps */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex space-x-4\">\n                  <div className={`flex items-center space-x-2 ${orderStep.step === 'table' ? 'text-orange-400' : orderStep.selectedTable ? 'text-green-400' : 'text-gray-400'}`}>\n                    <TableIcon className=\"w-5 h-5\" />\n                    <span>Mesa</span>\n                  </div>\n                  <div className={`flex items-center space-x-2 ${orderStep.step === 'client' ? 'text-orange-400' : orderStep.clientType ? 'text-green-400' : 'text-gray-400'}`}>\n                    <User className=\"w-5 h-5\" />\n                    <span>Cliente</span>\n                  </div>\n                  <div className={`flex items-center space-x-2 ${orderStep.step === 'products' ? 'text-orange-400' : orderStep.orderItems.length > 0 ? 'text-green-400' : 'text-gray-400'}`}>\n                    <ShoppingCart className=\"w-5 h-5\" />\n                    <span>Produtos</span>\n                  </div>\n                </div>\n                <Button\n                  onClick={resetOrder}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"text-gray-400 border-gray-600 hover:bg-gray-700\"\n                >\n                  Reiniciar\n                </Button>\n              </div>\n\n              {/* Step 1: Table Selection */}\n              {orderStep.step === 'table' && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-lg font-semibold text-white\">Selecionar Mesa</h3>\n                    <div className=\"flex space-x-4 text-sm\">\n                      <div className=\"flex items-center space-x-1\">\n                        <div className=\"w-3 h-3 border border-green-500 rounded\"></div>\n                        <span className=\"text-green-400\">Livre</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <div className=\"w-3 h-3 border border-orange-500 rounded bg-orange-500/20\"></div>\n                        <span className=\"text-orange-400\">Peut ajouter articles</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <div className=\"w-3 h-3 border border-red-500 rounded bg-red-500/20\"></div>\n                        <span className=\"text-red-400\">Occupée</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {Object.entries(groupTablesByLocation(tablesList)).map(([location, locationTables]) => (\n                    <div key={location} className=\"space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <MapPin className=\"w-4 h-4 text-orange-400\" />\n                        <h4 className=\"font-medium text-white\">{getLocationName(location)}</h4>\n                      </div>\n                      <div className=\"grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-2\">\n                        {locationTables.map((table) => {\n                          const hasPendingOrder = ordersList.some(order => \n                            order.tableId === table.id && order.status === \"pending\"\n                          );\n                          \n                          return (\n                            <Button\n                              key={table.id}\n                              onClick={() => handleTableSelection(table)}\n                              variant={table.status === 'free' ? 'outline' : 'secondary'}\n                              className={`h-16 flex-col ${\n                                table.status === 'free' \n                                  ? 'border-green-500 text-green-400 hover:bg-green-500/20' \n                                  : hasPendingOrder\n                                  ? 'border-orange-500 text-orange-400 hover:bg-orange-500/20'\n                                  : 'border-red-500 text-red-400 cursor-not-allowed'\n                              }`}\n                              disabled={table.status !== 'free' && !hasPendingOrder}\n                            >\n                              <span className=\"font-bold\">{table.number}</span>\n                              <span className=\"text-xs\">{table.capacity}p</span>\n                              {hasPendingOrder && (\n                                <span className=\"text-xs text-orange-300\">+</span>\n                              )}\n                            </Button>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {/* Step 2: Client Selection */}\n              {orderStep.step === 'client' && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold text-white\">\n                      Selecionar Cliente - Mesa {orderStep.selectedTable?.number} ({getLocationName(orderStep.selectedTable?.location || '')})\n                    </h3>\n                    {search && (\n                      <div className=\"bg-green-500/20 border border-green-500 rounded-lg px-3 py-1\">\n                        <span className=\"text-green-400 text-sm\">Mesa pré-selecionada</span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    {/* Anonymous Client */}\n                    <Card className=\"bg-gray-700 border-gray-600\">\n                      <CardHeader>\n                        <CardTitle className=\"text-white flex items-center\">\n                          <User className=\"w-5 h-5 mr-2\" />\n                          Cliente Anônimo\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <Input\n                          placeholder=\"Nome do cliente (opcional)\"\n                          value={orderStep.anonymousName}\n                          onChange={(e) => setOrderStep(prev => ({...prev, anonymousName: e.target.value}))}\n                          className=\"bg-gray-800 border-gray-600 text-white\"\n                        />\n                        <Button\n                          onClick={() => handleClientSelection('anonymous', undefined, orderStep.anonymousName)}\n                          className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                        >\n                          Continuar como Anônimo\n                        </Button>\n                      </CardContent>\n                    </Card>\n\n                    {/* Manager Client */}\n                    <Card className=\"bg-gray-700 border-gray-600\">\n                      <CardHeader>\n                        <CardTitle className=\"text-white flex items-center\">\n                          <Crown className=\"w-5 h-5 mr-2\" />\n                          Gerente\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <Select \n                          onValueChange={(value) => {\n                            handleClientSelection('manager', undefined, '', value);\n                          }}\n                        >\n                          <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                            <SelectValue placeholder=\"Selecionar gerente\" />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-gray-800 border-gray-600\">\n                            <SelectItem value=\"Carl Malack\" className=\"text-white\">\n                              Carl Malack\n                            </SelectItem>\n                            <SelectItem value=\"Lucelle Reis\" className=\"text-white\">\n                              Lucelle Reis\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <div className=\"text-xs text-purple-300 bg-purple-500/20 p-2 rounded border border-purple-500\">\n                          Consumo gratuito disponível para gerentes\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    {/* Credit Client */}\n                    <Card className=\"bg-gray-700 border-gray-600\">\n                      <CardHeader>\n                        <CardTitle className=\"text-white flex items-center\">\n                          <UserPlus className=\"w-5 h-5 mr-2\" />\n                          Cliente de Crédito\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <Select \n                          onValueChange={(value) => {\n                            const client = creditClientsList.find(c => c.id === parseInt(value));\n                            if (client) {\n                              handleClientSelection('credit', client);\n                            }\n                          }}\n                        >\n                          <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                            <SelectValue placeholder=\"Selecionar cliente\" />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-gray-800 border-gray-600\">\n                            {creditClientsList.map((client) => (\n                              <SelectItem key={client.id} value={client.id.toString()} className=\"text-white\">\n                                {client.name} - {formatCurrency(client.totalCredit)} crédito\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        \n                        <Button\n                          onClick={() => {\n                            console.log(\"Novo Cliente button clicked\");\n                            setShowNewClientModal(true);\n                          }}\n                          variant=\"outline\"\n                          className=\"w-full border-orange-500 text-orange-400 hover:bg-orange-500/20\"\n                        >\n                          <UserPlus className=\"w-4 h-4 mr-2\" />\n                          Novo Cliente\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              )}\n\n              {/* Step 3: Products Selection */}\n              {orderStep.step === 'products' && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-lg font-semibold text-white\">\n                      Adicionar Produtos - Mesa {orderStep.selectedTable?.number}\n                    </h3>\n                    <div className=\"text-sm text-gray-400\">\n                      Cliente: {orderStep.clientType === 'credit' ? orderStep.selectedClient?.name : \n                               orderStep.clientType === 'manager' ? orderStep.managerName :\n                               (orderStep.anonymousName || 'Anônimo')}\n                    </div>\n                  </div>\n\n                  {/* Existing order indicator */}\n                  {orders.some(order => order.tableId === orderStep.selectedTable?.id && order.status === \"pending\") && (\n                    <div className=\"bg-orange-500/20 border border-orange-500 rounded-lg p-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Plus className=\"w-4 h-4 text-orange-400\" />\n                        <span className=\"text-orange-400 font-medium\">\n                          Commande existante trouvée - Les nouveaux articles seront ajoutés\n                        </span>\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    {/* Products List */}\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium text-white\">{PT.products.title} Disponíveis</h4>\n                        <Badge variant=\"outline\" className=\"text-gray-400\">\n                          {filterProducts(productsList).length} {PT.products.productsAvailable}\n                        </Badge>\n                      </div>\n                      \n                      {/* Search and Filter Controls */}\n                      <div className=\"space-y-3\">\n                        <div className=\"relative\">\n                          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                          <Input\n                            placeholder={PT.products.searchProducts}\n                            value={searchQuery}\n                            onChange={(e) => setSearchQuery(e.target.value)}\n                            className=\"pl-10 pr-10 bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n                          />\n                          {searchQuery && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0 hover:bg-gray-700\"\n                              onClick={() => setSearchQuery(\"\")}\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                        </div>\n                        \n                        <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                          <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                            <SelectValue placeholder={PT.products.filterByCategory} />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-gray-800 border-gray-600\">\n                            <SelectItem value=\"all\" className=\"text-white\">{PT.products.allCategories}</SelectItem>\n                            {getCategoryOptions().map((category) => (\n                              <SelectItem key={category} value={category} className=\"text-white\">\n                                {category}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div className=\"max-h-96 overflow-y-auto\">\n                        {filterProducts(productsList).length === 0 ? (\n                          <div className=\"text-center py-8 text-gray-400\">\n                            <Search className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                            <p>{PT.products.noProductsFound}</p>\n                            {(searchQuery || selectedCategory !== \"all\") && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setSearchQuery(\"\");\n                                  setSelectedCategory(\"all\");\n                                }}\n                                className=\"mt-2 text-gray-400 border-gray-600 hover:bg-gray-700\"\n                              >\n                                {PT.products.clearFilters}\n                              </Button>\n                            )}\n                          </div>\n                        ) : (\n                          Object.entries(groupProductsByCategory(filterProducts(productsList))).map(([categoryName, categoryProducts]) => (\n                            <div key={categoryName} className=\"mb-4\">\n                              <h5 className=\"font-medium text-orange-400 mb-2 flex items-center\">\n                                {categoryName}\n                                <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                                  {categoryProducts.length}\n                                </Badge>\n                              </h5>\n                              <div className=\"space-y-2\">\n                                {categoryProducts.map((product) => (\n                                  <div key={product.id} className=\"flex items-center justify-between p-3 bg-gray-700 rounded-lg\">\n                                    <div className=\"flex-1\">\n                                      <div className=\"flex items-center space-x-2\">\n                                        <div className=\"font-medium text-white\">{product.name}</div>\n                                        <div className={`px-2 py-1 rounded text-xs ${\n                                          product.stock <= product.minStock \n                                            ? 'bg-red-500 text-white' \n                                            : product.stock <= product.minStock * 2\n                                            ? 'bg-orange-500 text-white'\n                                            : 'bg-green-500 text-white'\n                                        }`}>\n                                          {product.stock} {PT.products.inStock}\n                                        </div>\n                                      </div>\n                                      <div className=\"text-sm text-gray-400\">{formatCurrency(product.price)}</div>\n                                    </div>\n                                    <Button\n                                      onClick={() => handleProductAdd(product)}\n                                      size=\"sm\"\n                                      className=\"bg-orange-600 hover:bg-orange-700\"\n                                      disabled={product.stock <= 0}\n                                    >\n                                      <Plus className=\"w-4 h-4\" />\n                                    </Button>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Order Summary */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-medium text-white\">Resumo do Pedido</h4>\n                      <div className=\"bg-gray-700 rounded-lg p-4\">\n                        {orderStep.orderItems.length === 0 ? (\n                          <p className=\"text-gray-400 text-center py-8\">Nenhum produto adicionado</p>\n                        ) : (\n                          <div className=\"space-y-3\">\n                            {orderStep.orderItems.map((item) => (\n                              <div key={item.product.id} className=\"flex items-center justify-between\">\n                                <div className=\"flex-1\">\n                                  <div className=\"font-medium text-white\">{item.product.name}</div>\n                                  <div className=\"text-sm text-gray-400\">{formatCurrency(item.product.price)} cada</div>\n                                </div>\n                                <div className=\"flex items-center space-x-2\">\n                                  <Button\n                                    onClick={() => handleQuantityChange(item.product.id, item.quantity - 1)}\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"h-8 w-8 p-0\"\n                                  >\n                                    <Minus className=\"w-4 h-4\" />\n                                  </Button>\n                                  <span className=\"text-white min-w-[2rem] text-center\">{item.quantity}</span>\n                                  <Button\n                                    onClick={() => handleQuantityChange(item.product.id, item.quantity + 1)}\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"h-8 w-8 p-0\"\n                                  >\n                                    <Plus className=\"w-4 h-4\" />\n                                  </Button>\n                                  <Button\n                                    onClick={() => handleProductRemove(item.product.id)}\n                                    size=\"sm\"\n                                    variant=\"destructive\"\n                                    className=\"h-8 w-8 p-0\"\n                                  >\n                                    <XCircle className=\"w-4 h-4\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            ))}\n                            <div className=\"border-t border-gray-600 pt-3\">\n                              <div className=\"flex justify-between items-center font-bold text-white\">\n                                <span>Total:</span>\n                                <span>{formatCurrency(calculateTotal())}</span>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-white\">Observações</Label>\n                        <Textarea\n                          value={orderStep.notes}\n                          onChange={(e) => setOrderStep(prev => ({...prev, notes: e.target.value}))}\n                          placeholder=\"Observações adicionais...\"\n                          className=\"bg-gray-800 border-gray-600 text-white\"\n                        />\n                      </div>\n\n                      <Button\n                        onClick={handleSubmitOrder}\n                        disabled={orderStep.orderItems.length === 0 || createOrderMutation.isPending}\n                        className=\"w-full bg-green-600 hover:bg-green-700\"\n                      >\n                        {createOrderMutation.isPending ? 'Criando...' : 'Criar Pedido'}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Active Orders */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold text-white\">Pedidos Ativos</h3>\n        {ordersList.length === 0 ? (\n          <Card className=\"bg-gray-800 border-gray-700\">\n            <CardContent className=\"p-8 text-center\">\n              <ShoppingCart className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-400\">Nenhum pedido ativo</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {ordersList.map((order) => (\n              <Card key={order.id} className=\"bg-gray-800 border-gray-700\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <CardTitle className=\"text-white text-lg\">\n                        Mesa {order.table?.number} - {getLocationName(order.table?.location || '')}\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-400\">\n                        {order.clientName || order.creditClient?.name || 'Cliente anônimo'}\n                      </p>\n                    </div>\n                    <Badge className={`${getStatusColor(order.status)} text-white`}>\n                      {getStatusText(order.status)}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-2\">\n                    {order.items.map((item) => (\n                      <div key={item.id} className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-300\">{item.quantity}x {item.product.name}</span>\n                        <span className=\"text-gray-300\">{formatCurrency(parseFloat(item.price) * item.quantity)}</span>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"flex justify-between items-center mt-4 pt-3 border-t border-gray-600\">\n                    <div className=\"flex items-center text-sm text-gray-400\">\n                      <Clock className=\"w-4 h-4 mr-1\" />\n                      {new Date(order.createdAt).toLocaleTimeString('pt-PT', { \n                        hour: '2-digit', \n                        minute: '2-digit' \n                      })}\n                    </div>\n                    <div className=\"font-semibold text-white\">\n                      {formatCurrency(order.totalAmount)}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* New Client Modal */}\n      <NewClientModal\n        open={showNewClientModal}\n        onOpenChange={setShowNewClientModal}\n        onClientCreated={handleClientCreated}\n      />\n    </div>\n  );\n}","size_bytes":41582},"client/src/pages/SalesHistory.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { \n  History, \n  Receipt, \n  Search, \n  Eye, \n  Calendar,\n  DollarSign,\n  Clock,\n  User,\n  Printer\n} from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { thermalPrinter } from \"@/lib/thermalPrinter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { OrderWithItems } from \"@shared/schema\";\n\nexport default function SalesHistory() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n\n  const { data: completedOrders = [], isLoading } = useQuery<OrderWithItems[]>({\n    queryKey: [\"/api/orders\", \"completed\", selectedDate],\n    queryFn: async () => {\n      const response = await fetch(`/api/orders?status=completed&date=${selectedDate}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch orders');\n      return response.json();\n    },\n    refetchInterval: 30000,\n  });\n\n  const filteredOrders = completedOrders.filter(order => {\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      order.table?.number.toString().includes(searchLower) ||\n      order.server?.firstName?.toLowerCase().includes(searchLower) ||\n      order.clientName?.toLowerCase().includes(searchLower) ||\n      order.items.some(item => item.product.name.toLowerCase().includes(searchLower))\n    );\n  });\n\n  const getPaymentMethodBadge = (method: string) => {\n    const colors = {\n      cash: \"bg-green-500\",\n      mobile_money: \"bg-blue-500\",\n      credit: \"bg-orange-500\",\n      partial: \"bg-purple-500\"\n    };\n    const labels = {\n      cash: \"Dinheiro\",\n      mobile_money: \"Mobile Money\",\n      credit: \"Crédito\",\n      partial: \"Parcial\"\n    };\n    return (\n      <Badge className={`${colors[method as keyof typeof colors]} text-white`}>\n        {labels[method as keyof typeof labels]}\n      </Badge>\n    );\n  };\n\n  const handlePrintReceipt = async (order: OrderWithItems) => {\n    try {\n      // Convert order data to receipt format\n      const receiptData = {\n        orderNumber: order.id.toString(),\n        tableName: `Mesa ${order.table?.number || order.tableId}`,\n        clientName: order.clientName || order.creditClient?.name,\n        items: order.items.map((item: any) => ({\n          name: item.product?.name || 'Produto',\n          quantity: item.quantity,\n          price: `${parseFloat(item.unitPrice || 0).toFixed(0)}`,\n          total: `${parseFloat(item.totalPrice || 0).toFixed(0)}`\n        })),\n        subtotal: `${parseFloat(order.totalAmount).toFixed(0)}`,\n        total: `${parseFloat(order.totalAmount).toFixed(0)}`,\n        paymentMethod: order.payments?.[0]?.method === \"cash\" ? \"Dinheiro\" : \n                      order.payments?.[0]?.method === \"mobile_money\" ? \"Mobile Money\" : \n                      order.payments?.[0]?.method === \"credit\" ? \"Crédito\" : \"Desconhecido\",\n        receivedAmount: order.payments?.[0]?.receivedAmount ? \n          `${parseFloat(order.payments[0].receivedAmount).toFixed(0)}` : undefined,\n        change: order.payments?.[0]?.changeAmount ? \n          `${parseFloat(order.payments[0].changeAmount).toFixed(0)}` : undefined,\n        cashier: order.server?.firstName || 'Servidor',\n        timestamp: new Date(order.createdAt).toLocaleString('pt-PT', { \n          day: '2-digit', \n          month: '2-digit', \n          year: 'numeric', \n          hour: '2-digit', \n          minute: '2-digit' \n        })\n      };\n\n      await thermalPrinter.printReceipt(receiptData);\n      toast({\n        title: \"Sucesso\",\n        description: \"Recibo enviado para impressão\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro de Impressão\",\n        description: error instanceof Error ? error.message : \"Erro ao imprimir recibo\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const OrderReceiptDialog = ({ order }: { order: OrderWithItems }) => (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"border-gray-600 hover:bg-gray-700\">\n          <Eye className=\"w-4 h-4 mr-1\" />\n          Ver Recibo\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">Recibo de Venda</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"text-center border-b border-gray-600 pb-4\">\n            <h3 className=\"font-bold\">BarManager Pro</h3>\n            <p className=\"text-sm text-gray-400\">Recibo #{order.id}</p>\n            <p className=\"text-xs text-gray-500\">\n              {new Date(order.createdAt).toLocaleString(\"pt-PT\")}\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Mesa:</span>\n              <span>{order.table?.number}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span>Servidor:</span>\n              <span>{order.server?.firstName}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span>Cliente:</span>\n              <span>{order.clientName || \"Cliente Anônimo\"}</span>\n            </div>\n          </div>\n\n          <div className=\"border-t border-gray-600 pt-4\">\n            <h4 className=\"font-medium mb-2\">Itens:</h4>\n            <div className=\"space-y-1\">\n              {order.items.map((item) => (\n                <div key={item.id} className=\"flex justify-between text-sm\">\n                  <span>{item.quantity}x {item.product.name}</span>\n                  <span>{formatCurrency(parseFloat(item.totalPrice))}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"border-t border-gray-600 pt-4 space-y-2\">\n            <div className=\"flex justify-between font-medium\">\n              <span>Total:</span>\n              <span className=\"text-green-400\">{formatCurrency(order.totalAmount)}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span>Pagamento:</span>\n              {getPaymentMethodBadge(order.paymentMethod || 'cash')}\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-white flex items-center\">\n            <History className=\"w-8 h-8 mr-3\" />\n            Histórico de Vendas\n          </h2>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Card key={i} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-4\">\n                <div className=\"animate-pulse\">\n                  <div className=\"h-4 bg-gray-700 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-gray-700 rounded w-1/2 mb-2\"></div>\n                  <div className=\"h-3 bg-gray-700 rounded w-2/3\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl font-bold text-white flex items-center\">\n          <History className=\"w-8 h-8 mr-3\" />\n          Histórico de Vendas\n        </h2>\n        <Badge variant=\"secondary\" className=\"bg-gray-700 text-white\">\n          {filteredOrders.length} vendas\n        </Badge>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"bg-gray-800 border-gray-700 mb-6\">\n        <CardHeader>\n          <CardTitle className=\"text-lg text-white\">Filtros</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"search\" className=\"text-sm font-medium text-gray-300\">\n                Pesquisar\n              </Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Mesa, servidor, cliente ou produto...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"bg-gray-700 border-gray-600 text-white pl-10\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"date\" className=\"text-sm font-medium text-gray-300\">\n                Data\n              </Label>\n              <div className=\"relative\">\n                <Calendar className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                <Input\n                  id=\"date\"\n                  type=\"date\"\n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  className=\"bg-gray-700 border-gray-600 text-white pl-10\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Sales Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Total de Vendas</p>\n                <p className=\"text-2xl font-bold text-green-400\">\n                  {formatCurrency(\n                    filteredOrders.reduce((sum, order) => sum + parseFloat(order.totalAmount), 0)\n                  )}\n                </p>\n              </div>\n              <DollarSign className=\"w-8 h-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Número de Vendas</p>\n                <p className=\"text-2xl font-bold text-blue-400\">{filteredOrders.length}</p>\n              </div>\n              <Receipt className=\"w-8 h-8 text-blue-400\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Venda Média</p>\n                <p className=\"text-2xl font-bold text-purple-400\">\n                  {formatCurrency(\n                    filteredOrders.length > 0 \n                      ? filteredOrders.reduce((sum, order) => sum + parseFloat(order.totalAmount), 0) / filteredOrders.length\n                      : 0\n                  )}\n                </p>\n              </div>\n              <User className=\"w-8 h-8 text-purple-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Orders List */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {filteredOrders.length === 0 ? (\n          <div className=\"col-span-full text-center py-12\">\n            <Receipt className=\"w-16 h-16 mx-auto mb-4 text-gray-500\" />\n            <p className=\"text-gray-400\">Nenhuma venda encontrada</p>\n          </div>\n        ) : (\n          filteredOrders.map((order) => (\n            <Card key={order.id} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className=\"bg-green-500 text-white\">\n                      Mesa {order.table?.number}\n                    </Badge>\n                    {getPaymentMethodBadge(order.paymentMethod || 'cash')}\n                  </div>\n                  <span className=\"text-sm text-gray-400\">\n                    #{order.id}\n                  </span>\n                </div>\n\n                <div className=\"space-y-2 mb-3\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Clock className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-gray-300\">\n                        {new Date(order.createdAt).toLocaleTimeString(\"pt-PT\", {\n                          hour: \"2-digit\",\n                          minute: \"2-digit\",\n                        })}\n                      </span>\n                    </div>\n                    <span className=\"text-green-400 font-bold\">\n                      {formatCurrency(order.totalAmount)}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center space-x-1\">\n                      <User className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-gray-300\">\n                        {order.server?.firstName}\n                      </span>\n                    </div>\n                    <span className=\"text-gray-400\">\n                      {order.items.length} itens\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-1 mb-3\">\n                  {order.items.slice(0, 2).map((item) => (\n                    <div key={item.id} className=\"flex justify-between text-xs text-gray-400\">\n                      <span>{item.quantity}x {item.product.name}</span>\n                      <span>{formatCurrency(parseFloat(item.totalPrice))}</span>\n                    </div>\n                  ))}\n                  {order.items.length > 2 && (\n                    <div className=\"text-xs text-gray-500\">\n                      +{order.items.length - 2} mais itens\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex space-x-2\">\n                  <OrderReceiptDialog order={order} />\n                  <Button\n                    onClick={() => handlePrintReceipt(order)}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"border-green-600 text-green-400 hover:bg-green-600/20\"\n                  >\n                    <Printer className=\"w-4 h-4 mr-1\" />\n                    Imprimir\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15443},"client/src/pages/Tables.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, OrderWithItems } from \"@shared/schema\";\nimport { Plus, Users, Clock, ShoppingCart, Receipt, Edit } from \"lucide-react\";\nimport { PT } from \"@/lib/i18n\";\nimport { useState } from \"react\";\nimport { formatCurrency } from \"@/lib/currency\";\n\nexport default function Tables() {\n  const [selectedTable, setSelectedTable] = useState<Table | null>(null);\n  \n  const { data: tables, isLoading } = useQuery<Table[]>({\n    queryKey: [\"/api/tables\"],\n    refetchInterval: 5000,\n  });\n\n  const { data: orders } = useQuery<OrderWithItems[]>({\n    queryKey: [\"/api/orders/pending\"],\n    refetchInterval: 5000,\n  });\n\n  // Ensure arrays are always defined\n  const tablesList = tables || [];\n  const ordersList = orders || [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"occupied\":\n        return \"bg-red-500\";\n      case \"free\":\n        return \"bg-green-500\";\n      case \"reserved\":\n        return \"bg-yellow-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"occupied\":\n        return PT.tables.occupied;\n      case \"free\":\n        return PT.tables.free;\n      case \"reserved\":\n        return PT.tables.reserved;\n      default:\n        return status;\n    }\n  };\n\n  const occupiedTables = tablesList.filter(t => t.status === \"occupied\").length;\n  const freeTables = tablesList.filter(t => t.status === \"free\").length;\n  const reservedTables = tablesList.filter(t => t.status === \"reserved\").length;\n\n  const getTableOrder = (tableId: number): OrderWithItems | undefined => {\n    return ordersList.find(order => order.tableId === tableId && order.status === \"pending\");\n  };\n\n  const getLocationName = (location: string) => {\n    switch (location) {\n      case 'main_hall':\n        return 'Sala Principal';\n      case 'balcony':\n        return 'Varanda';\n      case 'terrace':\n        return 'Esplanada';\n      default:\n        return location;\n    }\n  };\n\n  const groupTablesByLocation = (tables: Table[]) => {\n    const grouped = tables.reduce((acc, table) => {\n      if (!acc[table.location]) {\n        acc[table.location] = [];\n      }\n      acc[table.location].push(table);\n      return acc;\n    }, {} as Record<string, Table[]>);\n\n    // Sort tables by number within each location\n    Object.keys(grouped).forEach(location => {\n      grouped[location].sort((a, b) => a.number - b.number);\n    });\n\n    return grouped;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <h2 className=\"text-2xl font-bold text-white mb-6\">{PT.tables.title}</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (\n            <Card key={i} className=\"bg-gray-800 border-gray-700\">\n              <CardContent className=\"p-4\">\n                <div className=\"animate-pulse\">\n                  <div className=\"h-8 bg-gray-600 rounded-full w-16 mx-auto mb-4\"></div>\n                  <div className=\"h-4 bg-gray-600 rounded w-3/4 mx-auto mb-2\"></div>\n                  <div className=\"h-3 bg-gray-600 rounded w-1/2 mx-auto\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl font-bold text-white\">Gestion des Tables</h2>\n        <div className=\"flex space-x-2\">\n          <Button \n            onClick={() => window.location.href = '/orders'} \n            className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n          >\n            <ShoppingCart className=\"w-4 h-4 mr-2\" />\n            Nouveau Pedido\n          </Button>\n        </div>\n      </div>\n\n      {/* Status Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Total</p>\n                <p className=\"text-2xl font-bold text-white\">{tablesList.length}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-500 bg-opacity-20 rounded-full flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-blue-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Occupées</p>\n                <p className=\"text-2xl font-bold text-red-400\">{occupiedTables}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-red-500 bg-opacity-20 rounded-full flex items-center justify-center\">\n                <Clock className=\"w-6 h-6 text-red-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Libres</p>\n                <p className=\"text-2xl font-bold text-green-400\">{freeTables}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-500 bg-opacity-20 rounded-full flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-green-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Réservées</p>\n                <p className=\"text-2xl font-bold text-yellow-400\">{reservedTables}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-yellow-500 bg-opacity-20 rounded-full flex items-center justify-center\">\n                <Clock className=\"w-6 h-6 text-yellow-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tables by Location */}\n      {Object.entries(groupTablesByLocation(tablesList)).map(([location, locationTables]) => (\n        <div key={location} className=\"mb-8\">\n          <h3 className=\"text-xl font-bold text-white mb-4 flex items-center\">\n            <Users className=\"w-5 h-5 mr-2 text-orange-400\" />\n            {getLocationName(location)}\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n            {locationTables.map((table) => {\n              const tableOrder = getTableOrder(table.id);\n              const hasPendingOrder = tableOrder !== undefined;\n              \n              return (\n                <Card key={table.id} className=\"bg-gray-800 border-gray-700 hover:bg-gray-750 transition-colors\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg text-white\">\n                        Table {table.number}\n                      </CardTitle>\n                      <Badge className={`${getStatusColor(table.status)} text-white`}>\n                        {getStatusText(table.status)}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-center\">\n                        <div className={`w-16 h-16 rounded-full flex items-center justify-center text-2xl font-bold ${\n                          table.status === 'free' \n                            ? 'bg-green-500 text-white' \n                            : hasPendingOrder\n                            ? 'bg-orange-500 text-white'\n                            : 'bg-red-500 text-white'\n                        }`}>\n                          {table.number}\n                          {hasPendingOrder && <span className=\"text-xs ml-1\">+</span>}\n                        </div>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-sm text-gray-400\">\n                          Capacité: {table.capacity} personnes\n                        </p>\n                        <p className=\"text-sm text-gray-400\">\n                          {getLocationName(table.location)}\n                        </p>\n                      </div>\n\n                      {/* Order Information */}\n                      {tableOrder && (\n                        <div className=\"bg-gray-700 rounded-lg p-3 space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-400\">Client:</span>\n                            <span className=\"text-sm text-white\">\n                              {tableOrder.clientName || tableOrder.creditClient?.name || 'Anônimo'}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-400\">Total:</span>\n                            <span className=\"text-sm text-green-400 font-bold\">\n                              {formatCurrency(tableOrder.totalAmount)}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-400\">Itens:</span>\n                            <span className=\"text-sm text-white\">\n                              {tableOrder.items.length} produtos\n                            </span>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Action Buttons */}\n                      <div className=\"flex space-x-2\">\n                        {table.status === 'free' ? (\n                          <Button \n                            size=\"sm\" \n                            className=\"flex-1 bg-orange-600 hover:bg-orange-700\"\n                            onClick={() => window.location.href = `/orders?table=${table.id}`}\n                          >\n                            <ShoppingCart className=\"w-4 h-4 mr-1\" />\n                            Novo Pedido\n                          </Button>\n                        ) : hasPendingOrder ? (\n                          <>\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\" \n                                  className=\"flex-1 border-blue-600 text-blue-400 hover:bg-blue-600/20\"\n                                >\n                                  <Receipt className=\"w-4 h-4 mr-1\" />\n                                  Ver\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"bg-gray-800 border-gray-700\">\n                                <DialogHeader>\n                                  <DialogTitle className=\"text-white\">\n                                    Commande Table {table.number}\n                                  </DialogTitle>\n                                </DialogHeader>\n                                {tableOrder && (\n                                  <div className=\"space-y-4\">\n                                    <div className=\"bg-gray-700 rounded-lg p-4\">\n                                      <h4 className=\"font-medium text-white mb-2\">Détails de la commande</h4>\n                                      <div className=\"space-y-2 text-sm\">\n                                        <div className=\"flex justify-between\">\n                                          <span className=\"text-gray-400\">Client:</span>\n                                          <span className=\"text-white\">{tableOrder.clientName || tableOrder.creditClient?.name || 'Anônimo'}</span>\n                                        </div>\n                                        <div className=\"flex justify-between\">\n                                          <span className=\"text-gray-400\">Serveur:</span>\n                                          <span className=\"text-white\">{tableOrder.server?.firstName || 'N/A'}</span>\n                                        </div>\n                                        <div className=\"flex justify-between\">\n                                          <span className=\"text-gray-400\">Total:</span>\n                                          <span className=\"text-green-400 font-bold\">{formatCurrency(tableOrder.totalAmount)}</span>\n                                        </div>\n                                      </div>\n                                    </div>\n                                    \n                                    <div className=\"bg-gray-700 rounded-lg p-4\">\n                                      <h4 className=\"font-medium text-white mb-2\">Articles ({tableOrder.items.length})</h4>\n                                      <div className=\"space-y-2\">\n                                        {tableOrder.items.map((item, index) => (\n                                          <div key={index} className=\"flex justify-between text-sm\">\n                                            <span className=\"text-gray-300\">\n                                              {item.quantity}x {item.product.name}\n                                            </span>\n                                            <span className=\"text-white\">{formatCurrency(item.totalPrice)}</span>\n                                          </div>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  </div>\n                                )}\n                              </DialogContent>\n                            </Dialog>\n                            <Button \n                              size=\"sm\" \n                              className=\"flex-1 bg-orange-600 hover:bg-orange-700\"\n                              onClick={() => window.location.href = `/orders?table=${table.id}`}\n                            >\n                              <Plus className=\"w-4 h-4 mr-1\" />\n                              Ajouter\n                            </Button>\n                          </>\n                        ) : (\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"flex-1 border-gray-600 hover:bg-gray-700\"\n                            disabled\n                          >\n                            Table occupée\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":15789},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/store/useBarStore.ts":{"content":"import { create } from 'zustand';\nimport { User, BarSession, Table, Order, CreditClient, SessionStats } from '@shared/schema';\n\ninterface BarStore {\n  // Current user and session\n  currentUser: User | null;\n  activeSession: BarSession | null;\n  sessionStats: SessionStats | null;\n  \n  // Data\n  tables: Table[];\n  pendingOrders: Order[];\n  creditClients: CreditClient[];\n  \n  // UI State\n  selectedTable: Table | null;\n  showPaymentModal: boolean;\n  showSessionModal: boolean;\n  showOpenSessionModal: boolean;\n  selectedOrder: Order | null;\n  \n  // Actions\n  setCurrentUser: (user: User | null) => void;\n  setActiveSession: (session: BarSession | null) => void;\n  setSessionStats: (stats: SessionStats | null) => void;\n  setTables: (tables: Table[]) => void;\n  setPendingOrders: (orders: Order[]) => void;\n  setCreditClients: (clients: CreditClient[]) => void;\n  setSelectedTable: (table: Table | null) => void;\n  setShowPaymentModal: (show: boolean) => void;\n  setShowSessionModal: (show: boolean) => void;\n  setShowOpenSessionModal: (show: boolean) => void;\n  setSelectedOrder: (order: Order | null) => void;\n}\n\nexport const useBarStore = create<BarStore>((set) => ({\n  // Initial state\n  currentUser: null,\n  activeSession: null,\n  sessionStats: null,\n  tables: [],\n  pendingOrders: [],\n  creditClients: [],\n  selectedTable: null,\n  showPaymentModal: false,\n  showSessionModal: false,\n  showOpenSessionModal: false,\n  selectedOrder: null,\n  \n  // Actions\n  setCurrentUser: (user) => set({ currentUser: user }),\n  setActiveSession: (session) => set({ activeSession: session }),\n  setSessionStats: (stats) => set({ sessionStats: stats }),\n  setTables: (tables) => set({ tables }),\n  setPendingOrders: (orders) => set({ pendingOrders: orders }),\n  setCreditClients: (clients) => set({ creditClients: clients }),\n  setSelectedTable: (table) => set({ selectedTable: table }),\n  setShowPaymentModal: (show) => set({ showPaymentModal: show }),\n  setShowSessionModal: (show) => set({ showSessionModal: show }),\n  setShowOpenSessionModal: (show) => set({ showOpenSessionModal: show }),\n  setSelectedOrder: (order) => set({ selectedOrder: order }),\n}));\n","size_bytes":2147},"client/src/components/dashboard/CreditClientsTable.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus } from \"lucide-react\";\nimport { CreditClient } from \"@shared/schema\";\nimport { formatCurrency } from \"@/lib/currency\";\n\nexport function CreditClientsTable() {\n  const { data: creditClients, isLoading } = useQuery<CreditClient[]>({\n    queryKey: [\"/api/credit-clients\"],\n    refetchInterval: 10000,\n  });\n\n  // Ensure creditClients is always an array\n  const clients = creditClients || [];\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"fr-FR\");\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-lg text-white\">Crédits Clients Actifs</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"bg-gray-700 p-4 rounded-lg animate-pulse\">\n                <div className=\"h-4 bg-gray-600 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-600 rounded w-1/2\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-gray-800 border-gray-700\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg text-white\">Crédits Clients Actifs</CardTitle>\n          <Button className=\"bg-orange-500 hover:bg-orange-600 text-white\" size=\"sm\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Nouveau Client\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full text-sm\">\n            <thead>\n              <tr className=\"border-b border-gray-600\">\n                <th className=\"text-left py-3 text-gray-400\">Client</th>\n                <th className=\"text-left py-3 text-gray-400\">Crédit Total</th>\n                <th className=\"text-left py-3 text-gray-400\">Dernière Mise à Jour</th>\n                <th className=\"text-left py-3 text-gray-400\">Statut</th>\n                <th className=\"text-left py-3 text-gray-400\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {clients.length === 0 ? (\n                <tr>\n                  <td colSpan={5} className=\"text-center py-8 text-gray-400\">\n                    Aucun client à crédit\n                  </td>\n                </tr>\n              ) : (\n                clients.map((client) => (\n                  <tr key={client.id} className=\"border-b border-gray-600\">\n                    <td className=\"py-3\">\n                      <div>\n                        <div className=\"font-medium text-white\">{client.name}</div>\n                        <div className=\"text-gray-400 text-xs\">\n                          Client depuis {formatDate(client.createdAt!)}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-3\">\n                      <span className=\"text-orange-400 font-medium\">{formatCurrency(client.totalCredit)}</span>\n                    </td>\n                    <td className=\"py-3\">\n                      <span className=\"text-gray-400\">{formatDate(client.updatedAt!)}</span>\n                    </td>\n                    <td className=\"py-3\">\n                      <Badge\n                        variant={client.isActive ? \"default\" : \"secondary\"}\n                        className={client.isActive ? \"bg-orange-500\" : \"bg-gray-500\"}\n                      >\n                        {client.isActive ? \"Actif\" : \"Inactif\"}\n                      </Badge>\n                    </td>\n                    <td className=\"py-3\">\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                        >\n                          Paiement\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                        >\n                          Historique\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4756},"client/src/components/dashboard/OrdersPanel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useBarStore } from \"@/store/useBarStore\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { OrderWithItems } from \"@shared/schema\";\nimport { formatCurrency } from \"@/lib/currency\";\n\nexport function OrdersPanel() {\n  const { setSelectedOrder, setShowPaymentModal } = useBarStore();\n\n  const { data: pendingOrders, isLoading } = useQuery<OrderWithItems[]>({\n    queryKey: [\"/api/orders/pending\"],\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  // Ensure pendingOrders is always an array\n  const orders = pendingOrders || [];\n\n  const handlePayment = (order: OrderWithItems) => {\n    setSelectedOrder(order);\n    setShowPaymentModal(true);\n  };\n\n  const formatTime = (date: string | Date) => {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleTimeString(\"fr-FR\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-lg text-white\">Commandes en Attente</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"bg-gray-700 p-4 rounded-lg animate-pulse\">\n                <div className=\"h-4 bg-gray-600 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-600 rounded w-1/2\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-gray-800 border-gray-700\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg text-white\">Commandes en Attente</CardTitle>\n          <Badge variant=\"secondary\" className=\"bg-orange-500 text-white\">\n            {orders.length}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {orders.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-400\">Aucune commande en attente</p>\n            </div>\n          ) : (\n            orders.map((order) => (\n              <div key={order.id} className=\"bg-gray-700 p-4 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className=\"bg-orange-500 text-white\">\n                      Table {order.table?.number || \"N/A\"}\n                    </Badge>\n                    <span className=\"text-sm text-gray-400\">\n                      Serveur: {order.server?.firstName || \"N/A\"}\n                    </span>\n                  </div>\n                  <span className=\"text-sm text-gray-400\">\n                    {formatTime(order.createdAt!)}\n                  </span>\n                </div>\n                <div className=\"text-sm space-y-1\">\n                  {order.items.map((item) => (\n                    <div key={item.id} className=\"flex justify-between\">\n                      <span className=\"text-gray-300\">\n                        {item.quantity}x {item.product.name}\n                      </span>\n                      <div className=\"text-right\">\n                        <span className=\"text-xs text-gray-400\">\n                          {formatCurrency(item.unitPrice)} cada\n                        </span>\n                        <br />\n                        <span className=\"text-white\">{formatCurrency(item.totalPrice)}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"flex justify-between items-center mt-3 pt-2 border-t border-gray-600\">\n                  <span className=\"font-medium text-white\">Total: {formatCurrency(order.totalAmount)}</span>\n                  <Button\n                    onClick={() => handlePayment(order)}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                    size=\"sm\"\n                  >\n                    Encaisser\n                  </Button>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4449},"client/src/components/dashboard/SessionControls.tsx":{"content":"import { useBarStore } from \"@/store/useBarStore\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlayCircle, Clock, AlertCircle } from \"lucide-react\";\n\nexport function SessionControls() {\n  const { user } = useAuth();\n  const { activeSession, setShowOpenSessionModal } = useBarStore();\n\n  // Only show for cashiers\n  if (user?.role !== \"cashier\") {\n    return null;\n  }\n\n  return (\n    <Card className=\"bg-gray-800 border-gray-700 mb-6\">\n      <CardHeader>\n        <CardTitle className=\"text-lg text-white flex items-center\">\n          <Clock className=\"w-5 h-5 mr-2\" />\n          Gestão de Sessão\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {!activeSession ? (\n          <div className=\"text-center py-4\">\n            <AlertCircle className=\"w-12 h-12 mx-auto mb-4 text-orange-400\" />\n            <h3 className=\"text-lg font-medium text-white mb-2\">\n              Nenhuma sessão ativa\n            </h3>\n            <p className=\"text-gray-400 mb-4\">\n              Você precisa abrir uma sessão de caixa para começar a trabalhar\n            </p>\n            <Button\n              onClick={() => setShowOpenSessionModal(true)}\n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n            >\n              <PlayCircle className=\"w-5 h-5 mr-2\" />\n              Abrir Nova Sessão\n            </Button>\n          </div>\n        ) : (\n          <div className=\"bg-green-500 bg-opacity-20 p-4 rounded-lg border border-green-500\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-medium text-green-400\">\n                  Sessão Ativa\n                </h3>\n                <p className=\"text-sm text-gray-300\">\n                  {activeSession.shiftType === \"morning\" ? \"Turno da Manhã\" : \"Turno da Tarde\"}\n                </p>\n                <p className=\"text-xs text-gray-400\">\n                  Iniciada às {new Date(activeSession.startTime).toLocaleTimeString(\"pt-PT\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                  })}\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-green-400 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm text-green-400\">Em funcionamento</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2614},"client/src/components/dashboard/StatsCards.tsx":{"content":"import { useBarStore } from \"@/store/useBarStore\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { DollarSign, Receipt, FileText, Table } from \"lucide-react\";\nimport { PT } from \"@/lib/i18n\";\nimport { formatCurrency } from \"@/lib/currency\";\n\nexport function StatsCards() {\n  const { sessionStats } = useBarStore();\n\n  const stats = [\n    {\n      title: PT.dashboard.todaySales,\n      value: formatCurrency(sessionStats?.totalSales || \"0\"),\n      change: \"+15.2% vs ontem\",\n      icon: DollarSign,\n      color: \"text-green-400\",\n      bgColor: \"bg-green-500 bg-opacity-20\",\n    },\n    {\n      title: PT.dashboard.totalTransactions,\n      value: sessionStats?.transactionCount || 0,\n      change: \"3 pendentes\",\n      icon: Receipt,\n      color: \"text-blue-400\",\n      bgColor: \"bg-blue-500 bg-opacity-20\",\n    },\n    {\n      title: PT.dashboard.activeCredits,\n      value: formatCurrency(sessionStats?.activeCredits || \"0\"),\n      change: \"2 clientes\",\n      icon: FileText,\n      color: \"text-orange-400\",\n      bgColor: \"bg-orange-500 bg-opacity-20\",\n    },\n    {\n      title: PT.dashboard.occupiedTables,\n      value: `${sessionStats?.occupiedTables || 0}/${sessionStats?.totalTables || 0}`,\n      change: `${Math.round(((sessionStats?.occupiedTables || 0) / (sessionStats?.totalTables || 1)) * 100)}% ocupação`,\n      icon: Table,\n      color: \"text-purple-400\",\n      bgColor: \"bg-purple-500 bg-opacity-20\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {stats.map((stat, index) => (\n        <Card key={index} className=\"bg-gray-800 border-gray-700\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">{stat.title}</p>\n                <p className={`text-2xl font-bold ${stat.color}`}>{stat.value}</p>\n              </div>\n              <div className={`w-12 h-12 rounded-full flex items-center justify-center ${stat.bgColor}`}>\n                <stat.icon className={`w-6 h-6 ${stat.color}`} />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-400 mt-2\">{stat.change}</p>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2291},"client/src/components/dashboard/TablesOverview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table } from \"@shared/schema\";\n\nexport function TablesOverview() {\n  const { data: tables, isLoading } = useQuery<Table[]>({\n    queryKey: [\"/api/tables\"],\n    refetchInterval: 5000,\n  });\n\n  // Ensure tables is always an array\n  const tablesList = tables || [];\n\n  const getTableStatusColor = (status: string) => {\n    switch (status) {\n      case \"occupied\":\n        return \"bg-red-500\";\n      case \"free\":\n        return \"bg-green-500\";\n      case \"reserved\":\n        return \"bg-yellow-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const getTableStatusText = (status: string) => {\n    switch (status) {\n      case \"occupied\":\n        return \"Occupé\";\n      case \"free\":\n        return \"Libre\";\n      case \"reserved\":\n        return \"Réservé\";\n      default:\n        return \"Inconnu\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-gray-800 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-lg text-white\">État des Tables</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-4 gap-3\">\n            {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (\n              <div key={i} className=\"bg-gray-700 p-3 rounded-lg animate-pulse\">\n                <div className=\"w-8 h-8 bg-gray-600 rounded-full mx-auto mb-2\"></div>\n                <div className=\"h-3 bg-gray-600 rounded w-full\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-gray-800 border-gray-700\">\n      <CardHeader>\n        <CardTitle className=\"text-lg text-white\">État des Tables</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-4 gap-3\">\n          {tablesList.map((table) => (\n            <div\n              key={table.id}\n              className=\"bg-gray-700 p-3 rounded-lg text-center cursor-pointer hover:bg-gray-600 transition-colors\"\n            >\n              <div\n                className={`w-8 h-8 ${getTableStatusColor(table.status)} mx-auto mb-2 rounded-full flex items-center justify-center`}\n              >\n                <span className=\"text-white text-sm font-medium\">{table.number}</span>\n              </div>\n              <p className=\"text-xs text-gray-400\">{table.capacity} pers.</p>\n              <p className=\"text-xs text-gray-300\">{getTableStatusText(table.status)}</p>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"flex justify-between items-center mt-4 pt-4 border-t border-gray-600\">\n          <div className=\"flex items-center space-x-4 text-sm\">\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n              <span className=\"text-gray-300\">Occupé</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <span className=\"text-gray-300\">Libre</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n              <span className=\"text-gray-300\">Réservé</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3453},"client/src/components/layout/Header.tsx":{"content":"import { useBarStore } from \"@/store/useBarStore\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, LogOut, User } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { Logo } from \"@/components/Logo\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport function Header() {\n  const { currentUser, activeSession, setShowSessionModal } = useBarStore();\n  const [, setLocation] = useLocation();\n  const { logout } = useAuth();\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case \"cashier\":\n        return \"bg-blue-600\";\n      case \"server\":\n        return \"bg-green-600\";\n      case \"manager\":\n        return \"bg-orange-600\";\n      default:\n        return \"bg-gray-600\";\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    return new Date(date).toLocaleTimeString(\"pt-PT\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/auth/logout\", {});\n    },\n    onSuccess: () => {\n      console.log(\"Server logout successful, clearing client state\");\n      // Clear localStorage session and auth state\n      logout();\n      // Clear all cached data\n      queryClient.clear();\n      // Force page reload to completely reset the application state\n      setTimeout(() => {\n        window.location.reload();\n      }, 100);\n    },\n    onError: (error) => {\n      console.error(\"Logout error:\", error);\n      // Clear localStorage session even on error\n      logout();\n      // Clear all cached data\n      queryClient.clear();\n      // Force page reload to completely reset the application state\n      setTimeout(() => {\n        window.location.reload();\n      }, 100);\n    }\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <header className=\"bg-gray-800 border-b border-gray-700 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Logo size=\"sm\" />\n          {currentUser && (\n            <div className={`px-3 py-1 rounded-full text-sm font-medium text-white ${getRoleBadgeColor(currentUser.role)}`}>\n              {currentUser.role === \"cashier\" && \"Caixa\"}\n              {currentUser.role === \"server\" && \"Empregado\"}\n              {currentUser.role === \"manager\" && \"Gerente\"}\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          {/* Session Info */}\n          {activeSession && (\n            <div className=\"bg-gray-700 px-4 py-2 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"w-4 h-4 text-orange-400\" />\n                <span className=\"text-sm text-white\">\n                  Sessão: {activeSession.shiftType === \"morning\" ? \"Manhã\" : \"Tarde\"}\n                </span>\n                <span className=\"text-xs text-gray-400\">\n                  {formatTime(activeSession.startTime)} - Em andamento\n                </span>\n              </div>\n            </div>\n          )}\n\n          {/* User Profile */}\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"w-10 h-10\">\n              <AvatarImage src={currentUser?.profileImageUrl} />\n              <AvatarFallback className=\"bg-blue-600 text-white\">\n                <User className=\"w-5 h-5\" />\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"text-sm font-medium text-white\">\n                {currentUser?.firstName} {currentUser?.lastName}\n              </div>\n              <div className=\"text-xs text-gray-400\">\n                {currentUser?.role === \"cashier\" && \"Caissière\"}\n                {currentUser?.role === \"server\" && \"Serveur\"}\n                {currentUser?.role === \"manager\" && \"Gérant\"}\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"text-gray-400 hover:text-white flex items-center space-x-2\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n              <span>Déconnexion</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4475},"client/src/components/layout/RoleIndicator.tsx":{"content":"import { useBarStore } from \"@/store/useBarStore\";\n\nexport function RoleIndicator() {\n  const { currentUser } = useBarStore();\n\n  if (!currentUser) return null;\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case \"cashier\":\n        return \"bg-blue-600\";\n      case \"server\":\n        return \"bg-green-600\";\n      case \"manager\":\n        return \"bg-orange-600\";\n      default:\n        return \"bg-gray-600\";\n    }\n  };\n\n  return (\n    <div\n      className={`fixed top-0 left-0 w-1 h-full z-50 ${getRoleColor(currentUser.role)}`}\n    />\n  );\n}\n","size_bytes":563},"client/src/components/layout/Sidebar.tsx":{"content":"import { useBarStore } from \"@/store/useBarStore\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  BarChart3,\n  ShoppingCart,\n  Table,\n  CreditCard,\n  FileText,\n  TrendingUp,\n  StopCircle,\n  Package,\n  PieChart,\n  Users,\n  LogOut,\n} from \"lucide-react\";\nimport { PT } from \"@/lib/i18n\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Sidebar() {\n  const [location, setLocation] = useLocation();\n  const { currentUser, activeSession, sessionStats, setShowSessionModal } = useBarStore();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n      // Clear all cached data\n      queryClient.clear();\n      // Force redirect to login page with full page reload\n      window.location.href = \"/login\";\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      // Force redirect even on error\n      window.location.href = \"/login\";\n    }\n  };\n\n  // Different navigation items based on user role\n  const getNavigationItems = () => {\n    if (user?.role === \"manager\") {\n      return [\n        { href: \"/\", icon: PieChart, label: \"Painel de Controlo\" },\n        { href: \"/inventory\", icon: Package, label: \"Gestão de Stock\" },\n        { href: \"/credits\", icon: CreditCard, label: \"Clientes Crédito\" },\n        { href: \"/sales-history\", icon: FileText, label: \"Histórico de Vendas\" },\n        { href: \"/stats\", icon: TrendingUp, label: \"Estatísticas\" },\n      ];\n    } else {\n      return [\n        { href: \"/\", icon: BarChart3, label: PT.nav.dashboard },\n        { href: \"/orders\", icon: ShoppingCart, label: PT.nav.orders, badge: 3 },\n        { href: \"/tables\", icon: Table, label: PT.nav.tables },\n        { href: \"/sales-history\", icon: FileText, label: \"Histórico de Vendas\" },\n        { href: \"/credits\", icon: FileText, label: PT.nav.credits, badge: 2 },\n        { href: \"/stats\", icon: TrendingUp, label: \"Estatísticas\" },\n      ];\n    }\n  };\n\n  const navigationItems = getNavigationItems();\n\n  const isActive = (href: string) => {\n    return location === href || (href !== \"/\" && location.startsWith(href));\n  };\n\n  return (\n    <aside className=\"w-64 bg-gray-800 border-r border-gray-700 pt-6 relative\">\n      <nav className=\"space-y-2 px-4\">\n        {navigationItems.map((item) => (\n          <Link key={item.href} href={item.href} className={`flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors cursor-pointer ${\n                isActive(item.href)\n                  ? \"text-white bg-blue-600\"\n                  : \"text-gray-300 hover:text-white hover:bg-gray-700\"\n              }`}>\n              <item.icon className=\"w-5 h-5\" />\n              <span>{item.label}</span>\n              {item.badge && (\n                <span className=\"ml-auto bg-orange-500 text-white text-xs px-2 py-1 rounded-full\">\n                  {item.badge}\n                </span>\n              )}\n          </Link>\n        ))}\n      </nav>\n\n      {/* Session Controls */}\n      {activeSession && currentUser?.role === \"cashier\" && (\n        <div className=\"px-4 mt-8\">\n          <div className=\"bg-gray-700 p-4 rounded-lg\">\n            <h3 className=\"font-medium text-sm mb-3 text-white\">Sessão Atual</h3>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-400\">Início:</span>\n                <span className=\"text-white\">\n                  {new Date(activeSession.startTime).toLocaleTimeString(\"pt-PT\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                  })}\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-400\">Vendas:</span>\n                <span className=\"text-green-400\">{formatCurrency(sessionStats?.totalSales || \"0\")}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-400\">Transações:</span>\n                <span className=\"text-white\">{sessionStats?.transactionCount || 0}</span>\n              </div>\n            </div>\n            <Button\n              onClick={() => setShowSessionModal(true)}\n              className=\"w-full bg-red-600 hover:bg-red-700 text-white mt-3\"\n              size=\"sm\"\n            >\n              <StopCircle className=\"w-4 h-4 mr-2\" />\n              Fechar Sessão\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Logout Button */}\n      <div className=\"absolute bottom-4 left-4 right-4\">\n        <Button\n          onClick={handleLogout}\n          variant=\"outline\"\n          className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-700\"\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Déconnexion\n        </Button>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":5110},"client/src/components/modals/NewClientModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { UserPlus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst newClientSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"Email inválido\").optional().or(z.literal(\"\")),\n  phone: z.string().min(1, \"Telefone é obrigatório\"),\n  address: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype NewClientForm = z.infer<typeof newClientSchema>;\n\ninterface NewClientModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onClientCreated?: (client: any) => void;\n}\n\nexport function NewClientModal({ open, onOpenChange, onClientCreated }: NewClientModalProps) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  \n  console.log(\"NewClientModal render - open:\", open);\n\n  const form = useForm<NewClientForm>({\n    resolver: zodResolver(newClientSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      notes: \"\",\n    },\n  });\n\n  const createClientMutation = useMutation({\n    mutationFn: async (data: NewClientForm) => {\n      console.log(\"Sending client data:\", data);\n      return apiRequest(\"POST\", \"/api/credit-clients\", {\n        name: data.name,\n        phone: data.phone,\n        email: data.email || null,\n        address: data.address || null,\n        notes: data.notes || null,\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Sucesso\",\n        description: \"Cliente criado com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/credit-clients\"] });\n      onClientCreated?.(data);\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar cliente\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: NewClientForm) => {\n    createClientMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold flex items-center\">\n            <UserPlus className=\"w-5 h-5 mr-2 text-blue-400\" />\n            Novo Cliente de Crédito\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium text-gray-300\">\n                    Nome Completo *\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"Ex: João Silva\"\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium text-gray-300\">\n                    Email\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      type=\"email\"\n                      placeholder=\"Ex: joao@exemplo.com\"\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium text-gray-300\">\n                    Telefone\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      type=\"tel\"\n                      placeholder=\"Ex: +245 123 456 789\"\n                      className=\"bg-gray-700 border-gray-600 text-white\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium text-gray-300\">\n                    Endereço\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Endereço completo...\"\n                      className=\"bg-gray-700 border-gray-600 text-white min-h-[60px]\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium text-gray-300\">\n                    Observações\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Observações sobre o cliente...\"\n                      className=\"bg-gray-700 border-gray-600 text-white min-h-[60px]\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"button\"\n                onClick={() => onOpenChange(false)}\n                variant=\"outline\"\n                className=\"flex-1 border-gray-600 hover:bg-gray-700\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createClientMutation.isPending}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n              >\n                {createClientMutation.isPending ? \"Criando...\" : \"Criar Cliente\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7241},"client/src/components/modals/OpenSessionModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useBarStore } from \"@/store/useBarStore\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { PlayCircle, Clock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function OpenSessionModal() {\n  const { showOpenSessionModal, setShowOpenSessionModal, setActiveSession } = useBarStore();\n  const [shiftType, setShiftType] = useState<\"morning\" | \"evening\">(\"morning\");\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Auto-detect shift type based on current time\n  const getCurrentShiftType = () => {\n    const hour = new Date().getHours();\n    return hour < 14 ? \"morning\" : \"evening\";\n  };\n\n  // Set default shift type based on current time\n  useEffect(() => {\n    setShiftType(getCurrentShiftType());\n  }, []);\n\n  // Listen for auto-open events\n  useEffect(() => {\n    const handleOpenSessionModal = () => {\n      setShowOpenSessionModal(true);\n    };\n    \n    window.addEventListener(\"openSessionModal\", handleOpenSessionModal);\n    return () => window.removeEventListener(\"openSessionModal\", handleOpenSessionModal);\n  }, [setShowOpenSessionModal]);\n\n  const openSessionMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/sessions\", { shiftType });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Sessão Aberta\",\n        description: `Sessão ${shiftType === \"morning\" ? \"da manhã\" : \"da tarde\"} iniciada com sucesso`,\n      });\n      setActiveSession(data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\"] });\n      setShowOpenSessionModal(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao abrir sessão\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpenSession = () => {\n    openSessionMutation.mutate();\n  };\n\n  return (\n    <Dialog open={showOpenSessionModal} onOpenChange={setShowOpenSessionModal}>\n      <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold flex items-center\">\n            <PlayCircle className=\"w-5 h-5 mr-2 text-green-400\" />\n            Abrir Nova Sessão\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-300\">\n            Selecione o tipo de turno para iniciar uma nova sessão de caixa. A sessão permanecerá aberta até ser fechada manualmente.\n          </p>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"shift-type\" className=\"text-sm font-medium\">\n              Tipo de Turno\n            </Label>\n            <Select value={shiftType} onValueChange={(value: \"morning\" | \"evening\") => setShiftType(value)}>\n              <SelectTrigger className=\"bg-gray-700 border-gray-600 text-white\">\n                <SelectValue placeholder=\"Selecionar turno\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-gray-700 border-gray-600\">\n                <SelectItem value=\"morning\" className=\"text-white\">\n                  <div className=\"flex items-center\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    Turno da Manhã\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"evening\" className=\"text-white\">\n                  <div className=\"flex items-center\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    Turno da Tarde\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Card className=\"bg-gray-700 border-gray-600\">\n            <CardContent className=\"p-4\">\n              <h3 className=\"font-medium text-sm mb-2\">Informações da Sessão</h3>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Turno:</span>\n                  <span className=\"text-white\">\n                    {shiftType === \"morning\" ? \"Manhã\" : \"Tarde\"}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Início:</span>\n                  <span className=\"text-white\">\n                    {new Date().toLocaleTimeString(\"pt-PT\", {\n                      hour: \"2-digit\",\n                      minute: \"2-digit\",\n                    })}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Data:</span>\n                  <span className=\"text-white\">\n                    {new Date().toLocaleDateString(\"pt-PT\")}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex space-x-3\">\n            <Button\n              onClick={() => setShowOpenSessionModal(false)}\n              variant=\"outline\"\n              className=\"flex-1 border-gray-600 hover:bg-gray-700\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              onClick={handleOpenSession}\n              disabled={openSessionMutation.isPending}\n              className=\"flex-1 bg-green-600 hover:bg-green-700\"\n            >\n              {openSessionMutation.isPending ? \"Abrindo...\" : \"Abrir Sessão\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5976},"client/src/components/modals/PaymentModal.tsx":{"content":"import { useState } from \"react\";\nimport { useBarStore } from \"@/store/useBarStore\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { CreditCard, Banknote, FileText, X, Smartphone, Users, Crown } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCurrency } from \"@/lib/currency\";\nimport { thermalPrinter } from \"@/lib/thermalPrinter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { CreditClient } from \"@shared/schema\";\n\nexport function PaymentModal() {\n  const { selectedOrder, showPaymentModal, setShowPaymentModal, setSelectedOrder } = useBarStore();\n  const [paymentMethod, setPaymentMethod] = useState<\"cash\" | \"mobile_money\" | \"credit\" | \"manager_consumption\">(\"cash\");\n  const [receivedAmount, setReceivedAmount] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [selectedCreditClient, setSelectedCreditClient] = useState<number | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  // Managers allowed for free consumption (any cashier can process for them)\n  const allowedManagersForFreeConsumption = [\"carlmalack\", \"lucelle\"];\n  \n  // Check if order is for one of the managers allowed for free consumption\n  const isOrderForManagerConsumption = selectedOrder && (\n    allowedManagersForFreeConsumption.includes(selectedOrder.clientName?.toLowerCase() || \"\") ||\n    allowedManagersForFreeConsumption.some(manager => \n      selectedOrder.clientName?.toLowerCase().includes(manager) ||\n      selectedOrder.creditClient?.name?.toLowerCase().includes(manager)\n    )\n  );\n\n  // Fetch credit clients\n  const { data: creditClients = [] } = useQuery<CreditClient[]>({\n    queryKey: [\"/api/credit-clients\"],\n  });\n\n  const paymentMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      return apiRequest(\"POST\", \"/api/payments\", paymentData);\n    },\n    onSuccess: async (data) => {\n      toast({\n        title: \"Sucesso\",\n        description: \"Pagamento processado com sucesso\",\n      });\n      \n      // Print receipt automatically after payment\n      if (selectedOrder) {\n        try {\n          // Get table information\n          const table = await queryClient.getQueryData([\"/api/tables\"]) as any[];\n          const tableInfo = table?.find(t => t.id === selectedOrder.tableId);\n          \n          // Get cashier info (assume current user from auth)\n          const userData = await queryClient.getQueryData([\"/api/auth/user\"]) as any;\n          \n          // Convert order data to receipt format\n          const receiptData = {\n            orderNumber: selectedOrder.id.toString(),\n            tableName: `Mesa ${tableInfo?.number || selectedOrder.tableId}`,\n            clientName: selectedOrder.clientName || selectedOrder.creditClient?.name,\n            items: selectedOrder.items.map((item: any) => ({\n              name: item.product?.name || 'Produto',\n              quantity: item.quantity,\n              price: `${parseFloat(item.unitPrice || 0).toFixed(0)}`,\n              total: `${parseFloat(item.totalPrice || 0).toFixed(0)}`\n            })),\n            subtotal: `${parseFloat(selectedOrder.totalAmount).toFixed(0)}`,\n            total: `${parseFloat(selectedOrder.totalAmount).toFixed(0)}`,\n            paymentMethod: paymentMethod === \"cash\" ? \"Dinheiro\" : \n                          paymentMethod === \"mobile_money\" ? \"Mobile Money\" : \n                          paymentMethod === \"credit\" ? \"Crédito\" : \"Consumo Gerência\",\n            receivedAmount: receivedAmount ? `${parseFloat(receivedAmount).toFixed(0)}` : undefined,\n            change: receivedAmount ? `${(parseFloat(receivedAmount) - parseFloat(selectedOrder.totalAmount)).toFixed(0)}` : undefined,\n            cashier: userData?.firstName || 'Caixa',\n            timestamp: new Date().toLocaleString('pt-PT', { \n              day: '2-digit', \n              month: '2-digit', \n              year: 'numeric', \n              hour: '2-digit', \n              minute: '2-digit' \n            })\n          };\n\n          await thermalPrinter.printReceipt(receiptData);\n          toast({\n            title: \"Recibo Impresso\",\n            description: \"Recibo enviado para impressão\",\n          });\n        } catch (error) {\n          console.error('Erro ao imprimir recibo:', error);\n          // Don't show error toast for print failure after successful payment\n        }\n      }\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/credit-clients\"] });\n      handleClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao processar pagamento\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    setShowPaymentModal(false);\n    setSelectedOrder(null);\n    setPaymentMethod(\"cash\");\n    setReceivedAmount(\"\");\n    setPhoneNumber(\"\");\n    setSelectedCreditClient(null);\n  };\n\n  const handlePayment = () => {\n    if (!selectedOrder) return;\n\n    // Validation based on payment method\n    if (paymentMethod === \"cash\" && (!receivedAmount || parseFloat(receivedAmount) < parseFloat(selectedOrder.totalAmount))) {\n      toast({\n        title: \"Erro\",\n        description: \"Valor recebido deve ser maior ou igual ao total\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (paymentMethod === \"manager_consumption\" && !isOrderForManagerConsumption) {\n      toast({\n        title: \"Erro\",\n        description: \"Consumo gratuito disponível apenas para os gerentes Carl Malack e Lucelle Reis\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (paymentMethod === \"mobile_money\" && !phoneNumber) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, insira o número de telefone\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (paymentMethod === \"credit\" && !selectedCreditClient) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, selecione um cliente de crédito\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const paymentData = {\n      orderId: selectedOrder.id,\n      method: paymentMethod,\n      amount: paymentMethod === \"manager_consumption\" ? \"0.00\" : selectedOrder.totalAmount,\n      receivedAmount: paymentMethod === \"cash\" ? parseFloat(receivedAmount) : \n                    paymentMethod === \"manager_consumption\" ? \"0.00\" : null,\n      creditClientId: paymentMethod === \"credit\" ? selectedCreditClient : null,\n      phoneNumber: paymentMethod === \"mobile_money\" ? phoneNumber : null,\n    };\n\n    paymentMutation.mutate(paymentData);\n  };\n\n  const calculateChange = () => {\n    if (!selectedOrder || !receivedAmount) return 0;\n    return Math.max(0, parseFloat(receivedAmount) - parseFloat(selectedOrder.totalAmount));\n  };\n\n  if (!selectedOrder) return null;\n\n  return (\n    <Dialog open={showPaymentModal} onOpenChange={setShowPaymentModal}>\n      <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold\">Processamento de Pagamento</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Order Summary */}\n          <Card className=\"bg-gray-700 border-gray-600\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"font-medium\">Mesa {selectedOrder.table?.number || \"N/A\"}</span>\n                <span className=\"text-green-400 font-bold\">{formatCurrency(selectedOrder.totalAmount)}</span>\n              </div>\n              <div className=\"text-sm text-gray-400\">\n                {selectedOrder.items.map((item) => (\n                  <div key={item.id} className=\"flex justify-between\">\n                    <span>{item.quantity}x {item.product.name}</span>\n                    <span>{formatCurrency(parseFloat(item.unitPrice) * item.quantity)}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Method Selection */}\n          <div className={`grid gap-3 ${isOrderForManagerConsumption ? 'grid-cols-2' : 'grid-cols-3'}`}>\n            <Button\n              onClick={() => setPaymentMethod(\"cash\")}\n              variant={paymentMethod === \"cash\" ? \"default\" : \"outline\"}\n              className={`py-6 flex-col ${\n                paymentMethod === \"cash\"\n                  ? \"bg-green-600 hover:bg-green-700\"\n                  : \"border-gray-600 hover:bg-gray-700\"\n              }`}\n            >\n              <Banknote className=\"w-6 h-6 mb-1\" />\n              <span className=\"text-sm\">Dinheiro</span>\n            </Button>\n            <Button\n              onClick={() => setPaymentMethod(\"mobile_money\")}\n              variant={paymentMethod === \"mobile_money\" ? \"default\" : \"outline\"}\n              className={`py-6 flex-col ${\n                paymentMethod === \"mobile_money\"\n                  ? \"bg-blue-600 hover:bg-blue-700\"\n                  : \"border-gray-600 hover:bg-gray-700\"\n              }`}\n            >\n              <Smartphone className=\"w-6 h-6 mb-1\" />\n              <span className=\"text-sm\">Mobile Money</span>\n            </Button>\n            {!isOrderForManagerConsumption && (\n              <Button\n                onClick={() => setPaymentMethod(\"credit\")}\n                variant={paymentMethod === \"credit\" ? \"default\" : \"outline\"}\n                className={`py-6 flex-col ${\n                  paymentMethod === \"credit\"\n                    ? \"bg-orange-600 hover:bg-orange-700\"\n                    : \"border-gray-600 hover:bg-gray-700\"\n                }`}\n              >\n                <Users className=\"w-6 h-6 mb-1\" />\n                <span className=\"text-sm\">Crédito</span>\n              </Button>\n            )}\n            {isOrderForManagerConsumption && (\n              <Button\n                onClick={() => setPaymentMethod(\"manager_consumption\")}\n                variant={paymentMethod === \"manager_consumption\" ? \"default\" : \"outline\"}\n                className={`py-6 flex-col ${\n                  paymentMethod === \"manager_consumption\"\n                    ? \"bg-purple-600 hover:bg-purple-700\"\n                    : \"border-gray-600 hover:bg-gray-700\"\n                } col-span-1`}\n              >\n                <Crown className=\"w-6 h-6 mb-1\" />\n                <span className=\"text-sm\">Consumo Gerência</span>\n              </Button>\n            )}\n          </div>\n          \n          {/* Show Credit option for manager orders if they want to pay for someone else */}\n          {isOrderForManagerConsumption && (\n            <div className=\"grid grid-cols-1 gap-3\">\n              <Button\n                onClick={() => setPaymentMethod(\"credit\")}\n                variant={paymentMethod === \"credit\" ? \"default\" : \"outline\"}\n                className={`py-4 flex-col ${\n                  paymentMethod === \"credit\"\n                    ? \"bg-orange-600 hover:bg-orange-700\"\n                    : \"border-gray-600 hover:bg-gray-700\"\n                }`}\n              >\n                <Users className=\"w-5 h-5 mb-1\" />\n                <span className=\"text-sm\">Pagar para Cliente (Crédito)</span>\n              </Button>\n            </div>\n          )}\n\n          {/* Payment Method Forms */}\n          {paymentMethod === \"cash\" && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"received\" className=\"text-sm font-medium\">\n                Valor Recebido\n              </Label>\n              <Input\n                id=\"received\"\n                type=\"number\"\n                step=\"0.01\"\n                value={receivedAmount}\n                onChange={(e) => setReceivedAmount(e.target.value)}\n                placeholder={selectedOrder.totalAmount}\n                className=\"bg-gray-700 border-gray-600 text-white\"\n              />\n              {receivedAmount && (\n                <p className=\"text-sm text-gray-400\">\n                  Troco: {formatCurrency(calculateChange())}\n                </p>\n              )}\n            </div>\n          )}\n\n          {paymentMethod === \"mobile_money\" && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\" className=\"text-sm font-medium\">\n                Número de Telefone\n              </Label>\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                value={phoneNumber}\n                onChange={(e) => setPhoneNumber(e.target.value)}\n                placeholder=\"Ex: +245 123 456 789\"\n                className=\"bg-gray-700 border-gray-600 text-white\"\n              />\n              <p className=\"text-sm text-gray-400\">\n                Total: {formatCurrency(selectedOrder.totalAmount)}\n              </p>\n            </div>\n          )}\n\n          {paymentMethod === \"credit\" && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"client\" className=\"text-sm font-medium\">\n                Cliente de Crédito\n              </Label>\n              <Select value={selectedCreditClient?.toString()} onValueChange={(value) => setSelectedCreditClient(parseInt(value))}>\n                <SelectTrigger className=\"bg-gray-700 border-gray-600 text-white\">\n                  <SelectValue placeholder=\"Selecionar cliente\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-700 border-gray-600\">\n                  {creditClients.map((client) => (\n                    <SelectItem key={client.id} value={client.id.toString()} className=\"text-white\">\n                      {client.name} - {formatCurrency(client.totalCredit)} crédito\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {selectedCreditClient && (\n                <p className=\"text-sm text-gray-400\">\n                  Será adicionado ao crédito: {formatCurrency(selectedOrder.totalAmount)}\n                </p>\n              )}\n            </div>\n          )}\n\n          {paymentMethod === \"manager_consumption\" && (\n            <div className=\"space-y-2\">\n              <div className=\"bg-purple-500 bg-opacity-20 p-4 rounded-lg border border-purple-500\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <Crown className=\"w-5 h-5 text-purple-400\" />\n                  <h3 className=\"font-medium text-purple-400\">Consumo de Gerência</h3>\n                </div>\n                <p className=\"text-sm text-gray-300\">\n                  Este consumo será registrado como gratuito para o gerente {selectedOrder.clientName || selectedOrder.creditClient?.name}.\n                </p>\n                <p className=\"text-xs text-gray-400 mt-2\">\n                  Total: {formatCurrency(selectedOrder.totalAmount)} - <span className=\"text-green-400 font-medium\">GRATUITO</span>\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3\">\n            <Button\n              onClick={handleClose}\n              variant=\"outline\"\n              className=\"flex-1 border-gray-600 hover:bg-gray-700\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              onClick={handlePayment}\n              disabled={paymentMutation.isPending}\n              className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n            >\n              {paymentMutation.isPending ? \"Processando...\" : \"Confirmar Pagamento\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":16295},"client/src/components/modals/SessionModal.tsx":{"content":"import { useBarStore } from \"@/store/useBarStore\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCurrency } from \"@/lib/currency\";\n\nexport function SessionModal() {\n  const { activeSession, sessionStats, showSessionModal, setShowSessionModal, setActiveSession } = useBarStore();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const endSessionMutation = useMutation({\n    mutationFn: async () => {\n      if (!activeSession) throw new Error(\"No active session\");\n      return apiRequest(\"POST\", `/api/sessions/${activeSession.id}/end`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sessão Encerrada\",\n        description: \"A sessão foi encerrada com sucesso\",\n      });\n      setActiveSession(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\"] });\n      setShowSessionModal(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Erreur lors de la fermeture de la session\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEndSession = () => {\n    endSessionMutation.mutate();\n  };\n\n  if (!activeSession) return null;\n\n  return (\n    <Dialog open={showSessionModal} onOpenChange={setShowSessionModal}>\n      <DialogContent className=\"bg-gray-800 border-gray-700 text-white max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold flex items-center\">\n            <AlertTriangle className=\"w-5 h-5 mr-2 text-orange-400\" />\n            Fermer la Session\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-300\">\n            Êtes-vous sûr de vouloir fermer la session actuelle ? Cette action ne peut pas être annulée.\n          </p>\n\n          <Card className=\"bg-gray-700 border-gray-600\">\n            <CardContent className=\"p-4\">\n              <h3 className=\"font-medium text-sm mb-3\">Résumé de la Session</h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Type:</span>\n                  <span className=\"text-white\">\n                    {activeSession.shiftType === \"morning\" ? \"Matin\" : \"Soir\"}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Début:</span>\n                  <span className=\"text-white\">\n                    {new Date(activeSession.startTime).toLocaleTimeString(\"fr-FR\", {\n                      hour: \"2-digit\",\n                      minute: \"2-digit\",\n                    })}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Ventes totales:</span>\n                  <span className=\"text-green-400\">{formatCurrency(sessionStats?.totalSales || \"0.00\")}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Nombre de transactions:</span>\n                  <span className=\"text-white\">{sessionStats?.transactionCount || 0}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex space-x-3\">\n            <Button\n              onClick={() => setShowSessionModal(false)}\n              variant=\"outline\"\n              className=\"flex-1 border-gray-600 hover:bg-gray-700\"\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={handleEndSession}\n              disabled={endSessionMutation.isPending}\n              className=\"flex-1 bg-red-600 hover:bg-red-700\"\n            >\n              {endSessionMutation.isPending ? \"Fermeture...\" : \"Fermer Session\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4329},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}